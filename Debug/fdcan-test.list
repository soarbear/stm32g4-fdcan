
fdcan-test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004ffc  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000154  080051dc  080051dc  000151dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005330  08005330  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08005330  08005330  00015330  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005338  08005338  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005338  08005338  00015338  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800533c  0800533c  0001533c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08005340  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000328  20000074  080053b4  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000039c  080053b4  0002039c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010136  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002017  00000000  00000000  000301da  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c58  00000000  00000000  000321f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000b90  00000000  00000000  00032e50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002626c  00000000  00000000  000339e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000de93  00000000  00000000  00059c4c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f0145  00000000  00000000  00067adf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00157c24  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003af4  00000000  00000000  00157c74  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000074 	.word	0x20000074
 80001fc:	00000000 	.word	0x00000000
 8000200:	080051c4 	.word	0x080051c4

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000078 	.word	0x20000078
 800021c:	080051c4 	.word	0x080051c4

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002d4:	f000 b974 	b.w	80005c0 <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9d08      	ldr	r5, [sp, #32]
 80002f6:	4604      	mov	r4, r0
 80002f8:	468e      	mov	lr, r1
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	d14d      	bne.n	800039a <__udivmoddi4+0xaa>
 80002fe:	428a      	cmp	r2, r1
 8000300:	4694      	mov	ip, r2
 8000302:	d969      	bls.n	80003d8 <__udivmoddi4+0xe8>
 8000304:	fab2 f282 	clz	r2, r2
 8000308:	b152      	cbz	r2, 8000320 <__udivmoddi4+0x30>
 800030a:	fa01 f302 	lsl.w	r3, r1, r2
 800030e:	f1c2 0120 	rsb	r1, r2, #32
 8000312:	fa20 f101 	lsr.w	r1, r0, r1
 8000316:	fa0c fc02 	lsl.w	ip, ip, r2
 800031a:	ea41 0e03 	orr.w	lr, r1, r3
 800031e:	4094      	lsls	r4, r2
 8000320:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000324:	0c21      	lsrs	r1, r4, #16
 8000326:	fbbe f6f8 	udiv	r6, lr, r8
 800032a:	fa1f f78c 	uxth.w	r7, ip
 800032e:	fb08 e316 	mls	r3, r8, r6, lr
 8000332:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000336:	fb06 f107 	mul.w	r1, r6, r7
 800033a:	4299      	cmp	r1, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x64>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000346:	f080 811f 	bcs.w	8000588 <__udivmoddi4+0x298>
 800034a:	4299      	cmp	r1, r3
 800034c:	f240 811c 	bls.w	8000588 <__udivmoddi4+0x298>
 8000350:	3e02      	subs	r6, #2
 8000352:	4463      	add	r3, ip
 8000354:	1a5b      	subs	r3, r3, r1
 8000356:	b2a4      	uxth	r4, r4
 8000358:	fbb3 f0f8 	udiv	r0, r3, r8
 800035c:	fb08 3310 	mls	r3, r8, r0, r3
 8000360:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000364:	fb00 f707 	mul.w	r7, r0, r7
 8000368:	42a7      	cmp	r7, r4
 800036a:	d90a      	bls.n	8000382 <__udivmoddi4+0x92>
 800036c:	eb1c 0404 	adds.w	r4, ip, r4
 8000370:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000374:	f080 810a 	bcs.w	800058c <__udivmoddi4+0x29c>
 8000378:	42a7      	cmp	r7, r4
 800037a:	f240 8107 	bls.w	800058c <__udivmoddi4+0x29c>
 800037e:	4464      	add	r4, ip
 8000380:	3802      	subs	r0, #2
 8000382:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000386:	1be4      	subs	r4, r4, r7
 8000388:	2600      	movs	r6, #0
 800038a:	b11d      	cbz	r5, 8000394 <__udivmoddi4+0xa4>
 800038c:	40d4      	lsrs	r4, r2
 800038e:	2300      	movs	r3, #0
 8000390:	e9c5 4300 	strd	r4, r3, [r5]
 8000394:	4631      	mov	r1, r6
 8000396:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039a:	428b      	cmp	r3, r1
 800039c:	d909      	bls.n	80003b2 <__udivmoddi4+0xc2>
 800039e:	2d00      	cmp	r5, #0
 80003a0:	f000 80ef 	beq.w	8000582 <__udivmoddi4+0x292>
 80003a4:	2600      	movs	r6, #0
 80003a6:	e9c5 0100 	strd	r0, r1, [r5]
 80003aa:	4630      	mov	r0, r6
 80003ac:	4631      	mov	r1, r6
 80003ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b2:	fab3 f683 	clz	r6, r3
 80003b6:	2e00      	cmp	r6, #0
 80003b8:	d14a      	bne.n	8000450 <__udivmoddi4+0x160>
 80003ba:	428b      	cmp	r3, r1
 80003bc:	d302      	bcc.n	80003c4 <__udivmoddi4+0xd4>
 80003be:	4282      	cmp	r2, r0
 80003c0:	f200 80f9 	bhi.w	80005b6 <__udivmoddi4+0x2c6>
 80003c4:	1a84      	subs	r4, r0, r2
 80003c6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ca:	2001      	movs	r0, #1
 80003cc:	469e      	mov	lr, r3
 80003ce:	2d00      	cmp	r5, #0
 80003d0:	d0e0      	beq.n	8000394 <__udivmoddi4+0xa4>
 80003d2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003d6:	e7dd      	b.n	8000394 <__udivmoddi4+0xa4>
 80003d8:	b902      	cbnz	r2, 80003dc <__udivmoddi4+0xec>
 80003da:	deff      	udf	#255	; 0xff
 80003dc:	fab2 f282 	clz	r2, r2
 80003e0:	2a00      	cmp	r2, #0
 80003e2:	f040 8092 	bne.w	800050a <__udivmoddi4+0x21a>
 80003e6:	eba1 010c 	sub.w	r1, r1, ip
 80003ea:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ee:	fa1f fe8c 	uxth.w	lr, ip
 80003f2:	2601      	movs	r6, #1
 80003f4:	0c20      	lsrs	r0, r4, #16
 80003f6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003fa:	fb07 1113 	mls	r1, r7, r3, r1
 80003fe:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000402:	fb0e f003 	mul.w	r0, lr, r3
 8000406:	4288      	cmp	r0, r1
 8000408:	d908      	bls.n	800041c <__udivmoddi4+0x12c>
 800040a:	eb1c 0101 	adds.w	r1, ip, r1
 800040e:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000412:	d202      	bcs.n	800041a <__udivmoddi4+0x12a>
 8000414:	4288      	cmp	r0, r1
 8000416:	f200 80cb 	bhi.w	80005b0 <__udivmoddi4+0x2c0>
 800041a:	4643      	mov	r3, r8
 800041c:	1a09      	subs	r1, r1, r0
 800041e:	b2a4      	uxth	r4, r4
 8000420:	fbb1 f0f7 	udiv	r0, r1, r7
 8000424:	fb07 1110 	mls	r1, r7, r0, r1
 8000428:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800042c:	fb0e fe00 	mul.w	lr, lr, r0
 8000430:	45a6      	cmp	lr, r4
 8000432:	d908      	bls.n	8000446 <__udivmoddi4+0x156>
 8000434:	eb1c 0404 	adds.w	r4, ip, r4
 8000438:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800043c:	d202      	bcs.n	8000444 <__udivmoddi4+0x154>
 800043e:	45a6      	cmp	lr, r4
 8000440:	f200 80bb 	bhi.w	80005ba <__udivmoddi4+0x2ca>
 8000444:	4608      	mov	r0, r1
 8000446:	eba4 040e 	sub.w	r4, r4, lr
 800044a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800044e:	e79c      	b.n	800038a <__udivmoddi4+0x9a>
 8000450:	f1c6 0720 	rsb	r7, r6, #32
 8000454:	40b3      	lsls	r3, r6
 8000456:	fa22 fc07 	lsr.w	ip, r2, r7
 800045a:	ea4c 0c03 	orr.w	ip, ip, r3
 800045e:	fa20 f407 	lsr.w	r4, r0, r7
 8000462:	fa01 f306 	lsl.w	r3, r1, r6
 8000466:	431c      	orrs	r4, r3
 8000468:	40f9      	lsrs	r1, r7
 800046a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800046e:	fa00 f306 	lsl.w	r3, r0, r6
 8000472:	fbb1 f8f9 	udiv	r8, r1, r9
 8000476:	0c20      	lsrs	r0, r4, #16
 8000478:	fa1f fe8c 	uxth.w	lr, ip
 800047c:	fb09 1118 	mls	r1, r9, r8, r1
 8000480:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000484:	fb08 f00e 	mul.w	r0, r8, lr
 8000488:	4288      	cmp	r0, r1
 800048a:	fa02 f206 	lsl.w	r2, r2, r6
 800048e:	d90b      	bls.n	80004a8 <__udivmoddi4+0x1b8>
 8000490:	eb1c 0101 	adds.w	r1, ip, r1
 8000494:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000498:	f080 8088 	bcs.w	80005ac <__udivmoddi4+0x2bc>
 800049c:	4288      	cmp	r0, r1
 800049e:	f240 8085 	bls.w	80005ac <__udivmoddi4+0x2bc>
 80004a2:	f1a8 0802 	sub.w	r8, r8, #2
 80004a6:	4461      	add	r1, ip
 80004a8:	1a09      	subs	r1, r1, r0
 80004aa:	b2a4      	uxth	r4, r4
 80004ac:	fbb1 f0f9 	udiv	r0, r1, r9
 80004b0:	fb09 1110 	mls	r1, r9, r0, r1
 80004b4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004b8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004bc:	458e      	cmp	lr, r1
 80004be:	d908      	bls.n	80004d2 <__udivmoddi4+0x1e2>
 80004c0:	eb1c 0101 	adds.w	r1, ip, r1
 80004c4:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80004c8:	d26c      	bcs.n	80005a4 <__udivmoddi4+0x2b4>
 80004ca:	458e      	cmp	lr, r1
 80004cc:	d96a      	bls.n	80005a4 <__udivmoddi4+0x2b4>
 80004ce:	3802      	subs	r0, #2
 80004d0:	4461      	add	r1, ip
 80004d2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004d6:	fba0 9402 	umull	r9, r4, r0, r2
 80004da:	eba1 010e 	sub.w	r1, r1, lr
 80004de:	42a1      	cmp	r1, r4
 80004e0:	46c8      	mov	r8, r9
 80004e2:	46a6      	mov	lr, r4
 80004e4:	d356      	bcc.n	8000594 <__udivmoddi4+0x2a4>
 80004e6:	d053      	beq.n	8000590 <__udivmoddi4+0x2a0>
 80004e8:	b15d      	cbz	r5, 8000502 <__udivmoddi4+0x212>
 80004ea:	ebb3 0208 	subs.w	r2, r3, r8
 80004ee:	eb61 010e 	sbc.w	r1, r1, lr
 80004f2:	fa01 f707 	lsl.w	r7, r1, r7
 80004f6:	fa22 f306 	lsr.w	r3, r2, r6
 80004fa:	40f1      	lsrs	r1, r6
 80004fc:	431f      	orrs	r7, r3
 80004fe:	e9c5 7100 	strd	r7, r1, [r5]
 8000502:	2600      	movs	r6, #0
 8000504:	4631      	mov	r1, r6
 8000506:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800050a:	f1c2 0320 	rsb	r3, r2, #32
 800050e:	40d8      	lsrs	r0, r3
 8000510:	fa0c fc02 	lsl.w	ip, ip, r2
 8000514:	fa21 f303 	lsr.w	r3, r1, r3
 8000518:	4091      	lsls	r1, r2
 800051a:	4301      	orrs	r1, r0
 800051c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000520:	fa1f fe8c 	uxth.w	lr, ip
 8000524:	fbb3 f0f7 	udiv	r0, r3, r7
 8000528:	fb07 3610 	mls	r6, r7, r0, r3
 800052c:	0c0b      	lsrs	r3, r1, #16
 800052e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000532:	fb00 f60e 	mul.w	r6, r0, lr
 8000536:	429e      	cmp	r6, r3
 8000538:	fa04 f402 	lsl.w	r4, r4, r2
 800053c:	d908      	bls.n	8000550 <__udivmoddi4+0x260>
 800053e:	eb1c 0303 	adds.w	r3, ip, r3
 8000542:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000546:	d22f      	bcs.n	80005a8 <__udivmoddi4+0x2b8>
 8000548:	429e      	cmp	r6, r3
 800054a:	d92d      	bls.n	80005a8 <__udivmoddi4+0x2b8>
 800054c:	3802      	subs	r0, #2
 800054e:	4463      	add	r3, ip
 8000550:	1b9b      	subs	r3, r3, r6
 8000552:	b289      	uxth	r1, r1
 8000554:	fbb3 f6f7 	udiv	r6, r3, r7
 8000558:	fb07 3316 	mls	r3, r7, r6, r3
 800055c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000560:	fb06 f30e 	mul.w	r3, r6, lr
 8000564:	428b      	cmp	r3, r1
 8000566:	d908      	bls.n	800057a <__udivmoddi4+0x28a>
 8000568:	eb1c 0101 	adds.w	r1, ip, r1
 800056c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000570:	d216      	bcs.n	80005a0 <__udivmoddi4+0x2b0>
 8000572:	428b      	cmp	r3, r1
 8000574:	d914      	bls.n	80005a0 <__udivmoddi4+0x2b0>
 8000576:	3e02      	subs	r6, #2
 8000578:	4461      	add	r1, ip
 800057a:	1ac9      	subs	r1, r1, r3
 800057c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000580:	e738      	b.n	80003f4 <__udivmoddi4+0x104>
 8000582:	462e      	mov	r6, r5
 8000584:	4628      	mov	r0, r5
 8000586:	e705      	b.n	8000394 <__udivmoddi4+0xa4>
 8000588:	4606      	mov	r6, r0
 800058a:	e6e3      	b.n	8000354 <__udivmoddi4+0x64>
 800058c:	4618      	mov	r0, r3
 800058e:	e6f8      	b.n	8000382 <__udivmoddi4+0x92>
 8000590:	454b      	cmp	r3, r9
 8000592:	d2a9      	bcs.n	80004e8 <__udivmoddi4+0x1f8>
 8000594:	ebb9 0802 	subs.w	r8, r9, r2
 8000598:	eb64 0e0c 	sbc.w	lr, r4, ip
 800059c:	3801      	subs	r0, #1
 800059e:	e7a3      	b.n	80004e8 <__udivmoddi4+0x1f8>
 80005a0:	4646      	mov	r6, r8
 80005a2:	e7ea      	b.n	800057a <__udivmoddi4+0x28a>
 80005a4:	4620      	mov	r0, r4
 80005a6:	e794      	b.n	80004d2 <__udivmoddi4+0x1e2>
 80005a8:	4640      	mov	r0, r8
 80005aa:	e7d1      	b.n	8000550 <__udivmoddi4+0x260>
 80005ac:	46d0      	mov	r8, sl
 80005ae:	e77b      	b.n	80004a8 <__udivmoddi4+0x1b8>
 80005b0:	3b02      	subs	r3, #2
 80005b2:	4461      	add	r1, ip
 80005b4:	e732      	b.n	800041c <__udivmoddi4+0x12c>
 80005b6:	4630      	mov	r0, r6
 80005b8:	e709      	b.n	80003ce <__udivmoddi4+0xde>
 80005ba:	4464      	add	r4, ip
 80005bc:	3802      	subs	r0, #2
 80005be:	e742      	b.n	8000446 <__udivmoddi4+0x156>

080005c0 <__aeabi_idiv0>:
 80005c0:	4770      	bx	lr
 80005c2:	bf00      	nop

080005c4 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 80005c4:	b480      	push	{r7}
 80005c6:	b083      	sub	sp, #12
 80005c8:	af00      	add	r7, sp, #0
 80005ca:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80005cc:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80005d0:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 80005d4:	f003 0301 	and.w	r3, r3, #1
 80005d8:	2b00      	cmp	r3, #0
 80005da:	d013      	beq.n	8000604 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 80005dc:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80005e0:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 80005e4:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80005e8:	2b00      	cmp	r3, #0
 80005ea:	d00b      	beq.n	8000604 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 80005ec:	e000      	b.n	80005f0 <ITM_SendChar+0x2c>
    {
      __NOP();
 80005ee:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 80005f0:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80005f4:	681b      	ldr	r3, [r3, #0]
 80005f6:	2b00      	cmp	r3, #0
 80005f8:	d0f9      	beq.n	80005ee <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 80005fa:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80005fe:	687a      	ldr	r2, [r7, #4]
 8000600:	b2d2      	uxtb	r2, r2
 8000602:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000604:	687b      	ldr	r3, [r7, #4]
}
 8000606:	4618      	mov	r0, r3
 8000608:	370c      	adds	r7, #12
 800060a:	46bd      	mov	sp, r7
 800060c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000610:	4770      	bx	lr
	...

08000614 <HAL_FDCAN_RxFifo0Callback>:
uint8_t		fdcan2RxData[64];

int32_t dataLen = 32;

// FDCAN1 Callback
void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs) {
 8000614:	b580      	push	{r7, lr}
 8000616:	b084      	sub	sp, #16
 8000618:	af00      	add	r7, sp, #0
 800061a:	6078      	str	r0, [r7, #4]
 800061c:	6039      	str	r1, [r7, #0]
  if((RxFifo0ITs & FDCAN_IT_RX_FIFO0_NEW_MESSAGE) != RESET) {
 800061e:	683b      	ldr	r3, [r7, #0]
 8000620:	f003 0301 	and.w	r3, r3, #1
 8000624:	2b00      	cmp	r3, #0
 8000626:	d042      	beq.n	80006ae <HAL_FDCAN_RxFifo0Callback+0x9a>
    /* Retreive Rx messages from RX FIFO0 */
    if (HAL_FDCAN_GetRxMessage(hfdcan, FDCAN_RX_FIFO0, &fdcan1RxHeader, fdcan1RxData) != HAL_OK) {
 8000628:	4b23      	ldr	r3, [pc, #140]	; (80006b8 <HAL_FDCAN_RxFifo0Callback+0xa4>)
 800062a:	4a24      	ldr	r2, [pc, #144]	; (80006bc <HAL_FDCAN_RxFifo0Callback+0xa8>)
 800062c:	2140      	movs	r1, #64	; 0x40
 800062e:	6878      	ldr	r0, [r7, #4]
 8000630:	f001 f95a 	bl	80018e8 <HAL_FDCAN_GetRxMessage>
 8000634:	4603      	mov	r3, r0
 8000636:	2b00      	cmp	r3, #0
 8000638:	d001      	beq.n	800063e <HAL_FDCAN_RxFifo0Callback+0x2a>
		/* Reception Error */
		Error_Handler();
 800063a:	f000 fb21 	bl	8000c80 <Error_Handler>
    }

    if (HAL_FDCAN_ActivateNotification(hfdcan, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0) != HAL_OK) {
 800063e:	2200      	movs	r2, #0
 8000640:	2101      	movs	r1, #1
 8000642:	6878      	ldr	r0, [r7, #4]
 8000644:	f001 fa2a 	bl	8001a9c <HAL_FDCAN_ActivateNotification>
 8000648:	4603      	mov	r3, r0
 800064a:	2b00      	cmp	r3, #0
 800064c:	d001      	beq.n	8000652 <HAL_FDCAN_RxFifo0Callback+0x3e>
      /* Notification Error */
      Error_Handler();
 800064e:	f000 fb17 	bl	8000c80 <Error_Handler>
    }

    printf("fdcan1 received data: ");
 8000652:	481b      	ldr	r0, [pc, #108]	; (80006c0 <HAL_FDCAN_RxFifo0Callback+0xac>)
 8000654:	f003 fdb2 	bl	80041bc <iprintf>
    // Prepare Tx data for fdcan2
    for (int32_t i = 0; i < dataLen; i++) {
 8000658:	2300      	movs	r3, #0
 800065a:	60fb      	str	r3, [r7, #12]
 800065c:	e015      	b.n	800068a <HAL_FDCAN_RxFifo0Callback+0x76>
    	fdcan1TxData[i] = fdcan1RxData[i] + 1;
 800065e:	4a16      	ldr	r2, [pc, #88]	; (80006b8 <HAL_FDCAN_RxFifo0Callback+0xa4>)
 8000660:	68fb      	ldr	r3, [r7, #12]
 8000662:	4413      	add	r3, r2
 8000664:	781b      	ldrb	r3, [r3, #0]
 8000666:	3301      	adds	r3, #1
 8000668:	b2d9      	uxtb	r1, r3
 800066a:	4a16      	ldr	r2, [pc, #88]	; (80006c4 <HAL_FDCAN_RxFifo0Callback+0xb0>)
 800066c:	68fb      	ldr	r3, [r7, #12]
 800066e:	4413      	add	r3, r2
 8000670:	460a      	mov	r2, r1
 8000672:	701a      	strb	r2, [r3, #0]
        printf("%d, ", fdcan1RxData[i]);
 8000674:	4a10      	ldr	r2, [pc, #64]	; (80006b8 <HAL_FDCAN_RxFifo0Callback+0xa4>)
 8000676:	68fb      	ldr	r3, [r7, #12]
 8000678:	4413      	add	r3, r2
 800067a:	781b      	ldrb	r3, [r3, #0]
 800067c:	4619      	mov	r1, r3
 800067e:	4812      	ldr	r0, [pc, #72]	; (80006c8 <HAL_FDCAN_RxFifo0Callback+0xb4>)
 8000680:	f003 fd9c 	bl	80041bc <iprintf>
    for (int32_t i = 0; i < dataLen; i++) {
 8000684:	68fb      	ldr	r3, [r7, #12]
 8000686:	3301      	adds	r3, #1
 8000688:	60fb      	str	r3, [r7, #12]
 800068a:	4b10      	ldr	r3, [pc, #64]	; (80006cc <HAL_FDCAN_RxFifo0Callback+0xb8>)
 800068c:	681b      	ldr	r3, [r3, #0]
 800068e:	68fa      	ldr	r2, [r7, #12]
 8000690:	429a      	cmp	r2, r3
 8000692:	dbe4      	blt.n	800065e <HAL_FDCAN_RxFifo0Callback+0x4a>
    }
    printf("\n\r");
 8000694:	480e      	ldr	r0, [pc, #56]	; (80006d0 <HAL_FDCAN_RxFifo0Callback+0xbc>)
 8000696:	f003 fd91 	bl	80041bc <iprintf>

    // Put Tx data to Txfifo queue
    if (HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &fdcan1TxHeader, fdcan1TxData)!= HAL_OK) {
 800069a:	4a0a      	ldr	r2, [pc, #40]	; (80006c4 <HAL_FDCAN_RxFifo0Callback+0xb0>)
 800069c:	490d      	ldr	r1, [pc, #52]	; (80006d4 <HAL_FDCAN_RxFifo0Callback+0xc0>)
 800069e:	480e      	ldr	r0, [pc, #56]	; (80006d8 <HAL_FDCAN_RxFifo0Callback+0xc4>)
 80006a0:	f001 f8de 	bl	8001860 <HAL_FDCAN_AddMessageToTxFifoQ>
 80006a4:	4603      	mov	r3, r0
 80006a6:	2b00      	cmp	r3, #0
 80006a8:	d001      	beq.n	80006ae <HAL_FDCAN_RxFifo0Callback+0x9a>
  	  Error_Handler();
 80006aa:	f000 fae9 	bl	8000c80 <Error_Handler>
    }

  }
}
 80006ae:	bf00      	nop
 80006b0:	3710      	adds	r7, #16
 80006b2:	46bd      	mov	sp, r7
 80006b4:	bd80      	pop	{r7, pc}
 80006b6:	bf00      	nop
 80006b8:	20000274 	.word	0x20000274
 80006bc:	2000020c 	.word	0x2000020c
 80006c0:	080051dc 	.word	0x080051dc
 80006c4:	20000234 	.word	0x20000234
 80006c8:	080051f4 	.word	0x080051f4
 80006cc:	20000000 	.word	0x20000000
 80006d0:	080051fc 	.word	0x080051fc
 80006d4:	200001e8 	.word	0x200001e8
 80006d8:	20000090 	.word	0x20000090

080006dc <HAL_FDCAN_RxFifo1Callback>:

// FDCAN2 Callback
void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 80006dc:	b580      	push	{r7, lr}
 80006de:	b084      	sub	sp, #16
 80006e0:	af00      	add	r7, sp, #0
 80006e2:	6078      	str	r0, [r7, #4]
 80006e4:	6039      	str	r1, [r7, #0]
  if((RxFifo1ITs & FDCAN_IT_RX_FIFO1_NEW_MESSAGE) != RESET) {
 80006e6:	683b      	ldr	r3, [r7, #0]
 80006e8:	f003 0308 	and.w	r3, r3, #8
 80006ec:	2b00      	cmp	r3, #0
 80006ee:	d042      	beq.n	8000776 <HAL_FDCAN_RxFifo1Callback+0x9a>
    /* Retreive Rx messages from RX FIFO0 */
    if (HAL_FDCAN_GetRxMessage(hfdcan, FDCAN_RX_FIFO1, &fdcan2RxHeader, fdcan2RxData) != HAL_OK) {
 80006f0:	4b23      	ldr	r3, [pc, #140]	; (8000780 <HAL_FDCAN_RxFifo1Callback+0xa4>)
 80006f2:	4a24      	ldr	r2, [pc, #144]	; (8000784 <HAL_FDCAN_RxFifo1Callback+0xa8>)
 80006f4:	2141      	movs	r1, #65	; 0x41
 80006f6:	6878      	ldr	r0, [r7, #4]
 80006f8:	f001 f8f6 	bl	80018e8 <HAL_FDCAN_GetRxMessage>
 80006fc:	4603      	mov	r3, r0
 80006fe:	2b00      	cmp	r3, #0
 8000700:	d001      	beq.n	8000706 <HAL_FDCAN_RxFifo1Callback+0x2a>
		/* Reception Error */
		Error_Handler();
 8000702:	f000 fabd 	bl	8000c80 <Error_Handler>
    }

    if (HAL_FDCAN_ActivateNotification(hfdcan, FDCAN_IT_RX_FIFO1_NEW_MESSAGE, 0) != HAL_OK) {
 8000706:	2200      	movs	r2, #0
 8000708:	2108      	movs	r1, #8
 800070a:	6878      	ldr	r0, [r7, #4]
 800070c:	f001 f9c6 	bl	8001a9c <HAL_FDCAN_ActivateNotification>
 8000710:	4603      	mov	r3, r0
 8000712:	2b00      	cmp	r3, #0
 8000714:	d001      	beq.n	800071a <HAL_FDCAN_RxFifo1Callback+0x3e>
      /* Notification Error */
      Error_Handler();
 8000716:	f000 fab3 	bl	8000c80 <Error_Handler>
    }

    printf("fdcan2 received data: ");
 800071a:	481b      	ldr	r0, [pc, #108]	; (8000788 <HAL_FDCAN_RxFifo1Callback+0xac>)
 800071c:	f003 fd4e 	bl	80041bc <iprintf>
    // Prepare Tx data for fdcan2
    for (int32_t i = 0; i < dataLen; i++) {
 8000720:	2300      	movs	r3, #0
 8000722:	60fb      	str	r3, [r7, #12]
 8000724:	e015      	b.n	8000752 <HAL_FDCAN_RxFifo1Callback+0x76>
    	fdcan2TxData[i] = fdcan2RxData[i] + 1;
 8000726:	4a16      	ldr	r2, [pc, #88]	; (8000780 <HAL_FDCAN_RxFifo1Callback+0xa4>)
 8000728:	68fb      	ldr	r3, [r7, #12]
 800072a:	4413      	add	r3, r2
 800072c:	781b      	ldrb	r3, [r3, #0]
 800072e:	3301      	adds	r3, #1
 8000730:	b2d9      	uxtb	r1, r3
 8000732:	4a16      	ldr	r2, [pc, #88]	; (800078c <HAL_FDCAN_RxFifo1Callback+0xb0>)
 8000734:	68fb      	ldr	r3, [r7, #12]
 8000736:	4413      	add	r3, r2
 8000738:	460a      	mov	r2, r1
 800073a:	701a      	strb	r2, [r3, #0]
        printf("%d, ", fdcan2RxData[i]);
 800073c:	4a10      	ldr	r2, [pc, #64]	; (8000780 <HAL_FDCAN_RxFifo1Callback+0xa4>)
 800073e:	68fb      	ldr	r3, [r7, #12]
 8000740:	4413      	add	r3, r2
 8000742:	781b      	ldrb	r3, [r3, #0]
 8000744:	4619      	mov	r1, r3
 8000746:	4812      	ldr	r0, [pc, #72]	; (8000790 <HAL_FDCAN_RxFifo1Callback+0xb4>)
 8000748:	f003 fd38 	bl	80041bc <iprintf>
    for (int32_t i = 0; i < dataLen; i++) {
 800074c:	68fb      	ldr	r3, [r7, #12]
 800074e:	3301      	adds	r3, #1
 8000750:	60fb      	str	r3, [r7, #12]
 8000752:	4b10      	ldr	r3, [pc, #64]	; (8000794 <HAL_FDCAN_RxFifo1Callback+0xb8>)
 8000754:	681b      	ldr	r3, [r3, #0]
 8000756:	68fa      	ldr	r2, [r7, #12]
 8000758:	429a      	cmp	r2, r3
 800075a:	dbe4      	blt.n	8000726 <HAL_FDCAN_RxFifo1Callback+0x4a>
    }
    printf("\n\r");
 800075c:	480e      	ldr	r0, [pc, #56]	; (8000798 <HAL_FDCAN_RxFifo1Callback+0xbc>)
 800075e:	f003 fd2d 	bl	80041bc <iprintf>

    // Put Tx data to Txfifo queue
    if (HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan2, &fdcan2TxHeader, fdcan2TxData)!= HAL_OK) {
 8000762:	4a0a      	ldr	r2, [pc, #40]	; (800078c <HAL_FDCAN_RxFifo1Callback+0xb0>)
 8000764:	490d      	ldr	r1, [pc, #52]	; (800079c <HAL_FDCAN_RxFifo1Callback+0xc0>)
 8000766:	480e      	ldr	r0, [pc, #56]	; (80007a0 <HAL_FDCAN_RxFifo1Callback+0xc4>)
 8000768:	f001 f87a 	bl	8001860 <HAL_FDCAN_AddMessageToTxFifoQ>
 800076c:	4603      	mov	r3, r0
 800076e:	2b00      	cmp	r3, #0
 8000770:	d001      	beq.n	8000776 <HAL_FDCAN_RxFifo1Callback+0x9a>
  	  Error_Handler();
 8000772:	f000 fa85 	bl	8000c80 <Error_Handler>
    }
  }
}
 8000776:	bf00      	nop
 8000778:	3710      	adds	r7, #16
 800077a:	46bd      	mov	sp, r7
 800077c:	bd80      	pop	{r7, pc}
 800077e:	bf00      	nop
 8000780:	20000340 	.word	0x20000340
 8000784:	200002d8 	.word	0x200002d8
 8000788:	08005200 	.word	0x08005200
 800078c:	20000300 	.word	0x20000300
 8000790:	080051f4 	.word	0x080051f4
 8000794:	20000000 	.word	0x20000000
 8000798:	080051fc 	.word	0x080051fc
 800079c:	200002b4 	.word	0x200002b4
 80007a0:	200000f4 	.word	0x200000f4

080007a4 <__io_putchar>:

int __io_putchar(uint8_t ch) {
 80007a4:	b580      	push	{r7, lr}
 80007a6:	b082      	sub	sp, #8
 80007a8:	af00      	add	r7, sp, #0
 80007aa:	4603      	mov	r3, r0
 80007ac:	71fb      	strb	r3, [r7, #7]
	return ITM_SendChar(ch);
 80007ae:	79fb      	ldrb	r3, [r7, #7]
 80007b0:	4618      	mov	r0, r3
 80007b2:	f7ff ff07 	bl	80005c4 <ITM_SendChar>
 80007b6:	4603      	mov	r3, r0
}
 80007b8:	4618      	mov	r0, r3
 80007ba:	3708      	adds	r7, #8
 80007bc:	46bd      	mov	sp, r7
 80007be:	bd80      	pop	{r7, pc}

080007c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007c0:	b580      	push	{r7, lr}
 80007c2:	b082      	sub	sp, #8
 80007c4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007c6:	f000 fccc 	bl	8001162 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007ca:	f000 f895 	bl	80008f8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007ce:	f000 f9e9 	bl	8000ba4 <MX_GPIO_Init>
  MX_LPUART1_UART_Init();
 80007d2:	f000 f99d 	bl	8000b10 <MX_LPUART1_UART_Init>
  MX_FDCAN1_Init();
 80007d6:	f000 f8db 	bl	8000990 <MX_FDCAN1_Init>
  MX_FDCAN2_Init();
 80007da:	f000 f939 	bl	8000a50 <MX_FDCAN2_Init>
  /* USER CODE BEGIN 2 */
  // begin@2023-05-21/tateo.y
  // STart FDCAN1
  if(HAL_FDCAN_Start(&hfdcan1)!= HAL_OK) {
 80007de:	483f      	ldr	r0, [pc, #252]	; (80008dc <main+0x11c>)
 80007e0:	f001 f816 	bl	8001810 <HAL_FDCAN_Start>
 80007e4:	4603      	mov	r3, r0
 80007e6:	2b00      	cmp	r3, #0
 80007e8:	d001      	beq.n	80007ee <main+0x2e>
	  Error_Handler();
 80007ea:	f000 fa49 	bl	8000c80 <Error_Handler>
  }

  // STart FDCAN2
  if(HAL_FDCAN_Start(&hfdcan2)!= HAL_OK) {
 80007ee:	483c      	ldr	r0, [pc, #240]	; (80008e0 <main+0x120>)
 80007f0:	f001 f80e 	bl	8001810 <HAL_FDCAN_Start>
 80007f4:	4603      	mov	r3, r0
 80007f6:	2b00      	cmp	r3, #0
 80007f8:	d001      	beq.n	80007fe <main+0x3e>
	  Error_Handler();
 80007fa:	f000 fa41 	bl	8000c80 <Error_Handler>
  }

  // Activate the notification for new data in FIFO0 for FDCAN1
  if (HAL_FDCAN_ActivateNotification(&hfdcan1, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0) != HAL_OK) {
 80007fe:	2200      	movs	r2, #0
 8000800:	2101      	movs	r1, #1
 8000802:	4836      	ldr	r0, [pc, #216]	; (80008dc <main+0x11c>)
 8000804:	f001 f94a 	bl	8001a9c <HAL_FDCAN_ActivateNotification>
 8000808:	4603      	mov	r3, r0
 800080a:	2b00      	cmp	r3, #0
 800080c:	d001      	beq.n	8000812 <main+0x52>
    /* Notification Error */
    Error_Handler();
 800080e:	f000 fa37 	bl	8000c80 <Error_Handler>
  }

  // Activate the notification for new data in FIFO1 for FDCAN2
  if (HAL_FDCAN_ActivateNotification(&hfdcan2, FDCAN_IT_RX_FIFO1_NEW_MESSAGE, 0) != HAL_OK) {
 8000812:	2200      	movs	r2, #0
 8000814:	2108      	movs	r1, #8
 8000816:	4832      	ldr	r0, [pc, #200]	; (80008e0 <main+0x120>)
 8000818:	f001 f940 	bl	8001a9c <HAL_FDCAN_ActivateNotification>
 800081c:	4603      	mov	r3, r0
 800081e:	2b00      	cmp	r3, #0
 8000820:	d001      	beq.n	8000826 <main+0x66>
    /* Notification Error */
    Error_Handler();
 8000822:	f000 fa2d 	bl	8000c80 <Error_Handler>
  }

  // start|added@2023-05-21/tateo.yanagi
  // Configure TX Header for FDCAN1
  fdcan1TxHeader.Identifier = 0x1;
 8000826:	4b2f      	ldr	r3, [pc, #188]	; (80008e4 <main+0x124>)
 8000828:	2201      	movs	r2, #1
 800082a:	601a      	str	r2, [r3, #0]
  fdcan1TxHeader.IdType = FDCAN_STANDARD_ID;
 800082c:	4b2d      	ldr	r3, [pc, #180]	; (80008e4 <main+0x124>)
 800082e:	2200      	movs	r2, #0
 8000830:	605a      	str	r2, [r3, #4]
  fdcan1TxHeader.TxFrameType = FDCAN_DATA_FRAME;
 8000832:	4b2c      	ldr	r3, [pc, #176]	; (80008e4 <main+0x124>)
 8000834:	2200      	movs	r2, #0
 8000836:	609a      	str	r2, [r3, #8]
  fdcan1TxHeader.DataLength = FDCAN_DLC_BYTES_32;
 8000838:	4b2a      	ldr	r3, [pc, #168]	; (80008e4 <main+0x124>)
 800083a:	f44f 2250 	mov.w	r2, #851968	; 0xd0000
 800083e:	60da      	str	r2, [r3, #12]
  fdcan1TxHeader.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 8000840:	4b28      	ldr	r3, [pc, #160]	; (80008e4 <main+0x124>)
 8000842:	2200      	movs	r2, #0
 8000844:	611a      	str	r2, [r3, #16]
  fdcan1TxHeader.BitRateSwitch = FDCAN_BRS_ON;
 8000846:	4b27      	ldr	r3, [pc, #156]	; (80008e4 <main+0x124>)
 8000848:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800084c:	615a      	str	r2, [r3, #20]
  fdcan1TxHeader.FDFormat = FDCAN_FD_CAN;
 800084e:	4b25      	ldr	r3, [pc, #148]	; (80008e4 <main+0x124>)
 8000850:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8000854:	619a      	str	r2, [r3, #24]
  fdcan1TxHeader.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 8000856:	4b23      	ldr	r3, [pc, #140]	; (80008e4 <main+0x124>)
 8000858:	2200      	movs	r2, #0
 800085a:	61da      	str	r2, [r3, #28]
  fdcan1TxHeader.MessageMarker = 0;
 800085c:	4b21      	ldr	r3, [pc, #132]	; (80008e4 <main+0x124>)
 800085e:	2200      	movs	r2, #0
 8000860:	621a      	str	r2, [r3, #32]

  // Configure TX Header for FDCAN2
  fdcan2TxHeader.Identifier = 0x2;
 8000862:	4b21      	ldr	r3, [pc, #132]	; (80008e8 <main+0x128>)
 8000864:	2202      	movs	r2, #2
 8000866:	601a      	str	r2, [r3, #0]
  fdcan2TxHeader.IdType = FDCAN_STANDARD_ID;
 8000868:	4b1f      	ldr	r3, [pc, #124]	; (80008e8 <main+0x128>)
 800086a:	2200      	movs	r2, #0
 800086c:	605a      	str	r2, [r3, #4]
  fdcan2TxHeader.TxFrameType = FDCAN_DATA_FRAME;
 800086e:	4b1e      	ldr	r3, [pc, #120]	; (80008e8 <main+0x128>)
 8000870:	2200      	movs	r2, #0
 8000872:	609a      	str	r2, [r3, #8]
  fdcan2TxHeader.DataLength = FDCAN_DLC_BYTES_32;
 8000874:	4b1c      	ldr	r3, [pc, #112]	; (80008e8 <main+0x128>)
 8000876:	f44f 2250 	mov.w	r2, #851968	; 0xd0000
 800087a:	60da      	str	r2, [r3, #12]
  fdcan2TxHeader.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 800087c:	4b1a      	ldr	r3, [pc, #104]	; (80008e8 <main+0x128>)
 800087e:	2200      	movs	r2, #0
 8000880:	611a      	str	r2, [r3, #16]
  fdcan2TxHeader.BitRateSwitch = FDCAN_BRS_ON;
 8000882:	4b19      	ldr	r3, [pc, #100]	; (80008e8 <main+0x128>)
 8000884:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8000888:	615a      	str	r2, [r3, #20]
  fdcan2TxHeader.FDFormat = FDCAN_FD_CAN;
 800088a:	4b17      	ldr	r3, [pc, #92]	; (80008e8 <main+0x128>)
 800088c:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8000890:	619a      	str	r2, [r3, #24]
  fdcan2TxHeader.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 8000892:	4b15      	ldr	r3, [pc, #84]	; (80008e8 <main+0x128>)
 8000894:	2200      	movs	r2, #0
 8000896:	61da      	str	r2, [r3, #28]
  fdcan2TxHeader.MessageMarker = 0;
 8000898:	4b13      	ldr	r3, [pc, #76]	; (80008e8 <main+0x128>)
 800089a:	2200      	movs	r2, #0
 800089c:	621a      	str	r2, [r3, #32]

  // Prepare first Tx data for fdcan1
  for (int32_t i = 0; i < dataLen; i++) {
 800089e:	2300      	movs	r3, #0
 80008a0:	607b      	str	r3, [r7, #4]
 80008a2:	e007      	b.n	80008b4 <main+0xf4>
	  fdcan1TxData[i] = 1;
 80008a4:	4a11      	ldr	r2, [pc, #68]	; (80008ec <main+0x12c>)
 80008a6:	687b      	ldr	r3, [r7, #4]
 80008a8:	4413      	add	r3, r2
 80008aa:	2201      	movs	r2, #1
 80008ac:	701a      	strb	r2, [r3, #0]
  for (int32_t i = 0; i < dataLen; i++) {
 80008ae:	687b      	ldr	r3, [r7, #4]
 80008b0:	3301      	adds	r3, #1
 80008b2:	607b      	str	r3, [r7, #4]
 80008b4:	4b0e      	ldr	r3, [pc, #56]	; (80008f0 <main+0x130>)
 80008b6:	681b      	ldr	r3, [r3, #0]
 80008b8:	687a      	ldr	r2, [r7, #4]
 80008ba:	429a      	cmp	r2, r3
 80008bc:	dbf2      	blt.n	80008a4 <main+0xe4>
  }

  // Put Tx data to Txfifo
  if (HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &fdcan1TxHeader, fdcan1TxData)!= HAL_OK) {
 80008be:	4a0b      	ldr	r2, [pc, #44]	; (80008ec <main+0x12c>)
 80008c0:	4908      	ldr	r1, [pc, #32]	; (80008e4 <main+0x124>)
 80008c2:	4806      	ldr	r0, [pc, #24]	; (80008dc <main+0x11c>)
 80008c4:	f000 ffcc 	bl	8001860 <HAL_FDCAN_AddMessageToTxFifoQ>
 80008c8:	4603      	mov	r3, r0
 80008ca:	2b00      	cmp	r3, #0
 80008cc:	d004      	beq.n	80008d8 <main+0x118>
	  printf("HAL_FDCAN_AddMessageToTxFifoQ\r\n");
 80008ce:	4809      	ldr	r0, [pc, #36]	; (80008f4 <main+0x134>)
 80008d0:	f003 fcfa 	bl	80042c8 <puts>
	  Error_Handler();
 80008d4:	f000 f9d4 	bl	8000c80 <Error_Handler>
  // end@2023-05-21/tateo.y
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1) {
 80008d8:	e7fe      	b.n	80008d8 <main+0x118>
 80008da:	bf00      	nop
 80008dc:	20000090 	.word	0x20000090
 80008e0:	200000f4 	.word	0x200000f4
 80008e4:	200001e8 	.word	0x200001e8
 80008e8:	200002b4 	.word	0x200002b4
 80008ec:	20000234 	.word	0x20000234
 80008f0:	20000000 	.word	0x20000000
 80008f4:	08005218 	.word	0x08005218

080008f8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008f8:	b580      	push	{r7, lr}
 80008fa:	b094      	sub	sp, #80	; 0x50
 80008fc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008fe:	f107 0318 	add.w	r3, r7, #24
 8000902:	2238      	movs	r2, #56	; 0x38
 8000904:	2100      	movs	r1, #0
 8000906:	4618      	mov	r0, r3
 8000908:	f003 fc50 	bl	80041ac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800090c:	1d3b      	adds	r3, r7, #4
 800090e:	2200      	movs	r2, #0
 8000910:	601a      	str	r2, [r3, #0]
 8000912:	605a      	str	r2, [r3, #4]
 8000914:	609a      	str	r2, [r3, #8]
 8000916:	60da      	str	r2, [r3, #12]
 8000918:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 800091a:	2000      	movs	r0, #0
 800091c:	f001 fde2 	bl	80024e4 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000920:	2302      	movs	r3, #2
 8000922:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000924:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000928:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800092a:	2340      	movs	r3, #64	; 0x40
 800092c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800092e:	2302      	movs	r3, #2
 8000930:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000932:	2302      	movs	r3, #2
 8000934:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8000936:	2304      	movs	r3, #4
 8000938:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 800093a:	2355      	movs	r3, #85	; 0x55
 800093c:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800093e:	2302      	movs	r3, #2
 8000940:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000942:	2302      	movs	r3, #2
 8000944:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000946:	2302      	movs	r3, #2
 8000948:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800094a:	f107 0318 	add.w	r3, r7, #24
 800094e:	4618      	mov	r0, r3
 8000950:	f001 fe7c 	bl	800264c <HAL_RCC_OscConfig>
 8000954:	4603      	mov	r3, r0
 8000956:	2b00      	cmp	r3, #0
 8000958:	d001      	beq.n	800095e <SystemClock_Config+0x66>
  {
    Error_Handler();
 800095a:	f000 f991 	bl	8000c80 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800095e:	230f      	movs	r3, #15
 8000960:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000962:	2303      	movs	r3, #3
 8000964:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000966:	2300      	movs	r3, #0
 8000968:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800096a:	2300      	movs	r3, #0
 800096c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800096e:	2300      	movs	r3, #0
 8000970:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000972:	1d3b      	adds	r3, r7, #4
 8000974:	2104      	movs	r1, #4
 8000976:	4618      	mov	r0, r3
 8000978:	f002 f980 	bl	8002c7c <HAL_RCC_ClockConfig>
 800097c:	4603      	mov	r3, r0
 800097e:	2b00      	cmp	r3, #0
 8000980:	d001      	beq.n	8000986 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8000982:	f000 f97d 	bl	8000c80 <Error_Handler>
  }
}
 8000986:	bf00      	nop
 8000988:	3750      	adds	r7, #80	; 0x50
 800098a:	46bd      	mov	sp, r7
 800098c:	bd80      	pop	{r7, pc}
	...

08000990 <MX_FDCAN1_Init>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 8000990:	b580      	push	{r7, lr}
 8000992:	b086      	sub	sp, #24
 8000994:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8000996:	4b2c      	ldr	r3, [pc, #176]	; (8000a48 <MX_FDCAN1_Init+0xb8>)
 8000998:	4a2c      	ldr	r2, [pc, #176]	; (8000a4c <MX_FDCAN1_Init+0xbc>)
 800099a:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 800099c:	4b2a      	ldr	r3, [pc, #168]	; (8000a48 <MX_FDCAN1_Init+0xb8>)
 800099e:	2200      	movs	r2, #0
 80009a0:	605a      	str	r2, [r3, #4]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_FD_BRS;
 80009a2:	4b29      	ldr	r3, [pc, #164]	; (8000a48 <MX_FDCAN1_Init+0xb8>)
 80009a4:	f44f 7240 	mov.w	r2, #768	; 0x300
 80009a8:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 80009aa:	4b27      	ldr	r3, [pc, #156]	; (8000a48 <MX_FDCAN1_Init+0xb8>)
 80009ac:	2200      	movs	r2, #0
 80009ae:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 80009b0:	4b25      	ldr	r3, [pc, #148]	; (8000a48 <MX_FDCAN1_Init+0xb8>)
 80009b2:	2200      	movs	r2, #0
 80009b4:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 80009b6:	4b24      	ldr	r3, [pc, #144]	; (8000a48 <MX_FDCAN1_Init+0xb8>)
 80009b8:	2200      	movs	r2, #0
 80009ba:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = ENABLE;
 80009bc:	4b22      	ldr	r3, [pc, #136]	; (8000a48 <MX_FDCAN1_Init+0xb8>)
 80009be:	2201      	movs	r2, #1
 80009c0:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 5;
 80009c2:	4b21      	ldr	r3, [pc, #132]	; (8000a48 <MX_FDCAN1_Init+0xb8>)
 80009c4:	2205      	movs	r2, #5
 80009c6:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 11;
 80009c8:	4b1f      	ldr	r3, [pc, #124]	; (8000a48 <MX_FDCAN1_Init+0xb8>)
 80009ca:	220b      	movs	r2, #11
 80009cc:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 56;
 80009ce:	4b1e      	ldr	r3, [pc, #120]	; (8000a48 <MX_FDCAN1_Init+0xb8>)
 80009d0:	2238      	movs	r2, #56	; 0x38
 80009d2:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 11;
 80009d4:	4b1c      	ldr	r3, [pc, #112]	; (8000a48 <MX_FDCAN1_Init+0xb8>)
 80009d6:	220b      	movs	r2, #11
 80009d8:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 5;
 80009da:	4b1b      	ldr	r3, [pc, #108]	; (8000a48 <MX_FDCAN1_Init+0xb8>)
 80009dc:	2205      	movs	r2, #5
 80009de:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan1.Init.DataSyncJumpWidth = 4;
 80009e0:	4b19      	ldr	r3, [pc, #100]	; (8000a48 <MX_FDCAN1_Init+0xb8>)
 80009e2:	2204      	movs	r2, #4
 80009e4:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan1.Init.DataTimeSeg1 = 12;
 80009e6:	4b18      	ldr	r3, [pc, #96]	; (8000a48 <MX_FDCAN1_Init+0xb8>)
 80009e8:	220c      	movs	r2, #12
 80009ea:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan1.Init.DataTimeSeg2 = 4;
 80009ec:	4b16      	ldr	r3, [pc, #88]	; (8000a48 <MX_FDCAN1_Init+0xb8>)
 80009ee:	2204      	movs	r2, #4
 80009f0:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan1.Init.StdFiltersNbr = 1;
 80009f2:	4b15      	ldr	r3, [pc, #84]	; (8000a48 <MX_FDCAN1_Init+0xb8>)
 80009f4:	2201      	movs	r2, #1
 80009f6:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan1.Init.ExtFiltersNbr = 0;
 80009f8:	4b13      	ldr	r3, [pc, #76]	; (8000a48 <MX_FDCAN1_Init+0xb8>)
 80009fa:	2200      	movs	r2, #0
 80009fc:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 80009fe:	4b12      	ldr	r3, [pc, #72]	; (8000a48 <MX_FDCAN1_Init+0xb8>)
 8000a00:	2200      	movs	r2, #0
 8000a02:	63da      	str	r2, [r3, #60]	; 0x3c
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8000a04:	4810      	ldr	r0, [pc, #64]	; (8000a48 <MX_FDCAN1_Init+0xb8>)
 8000a06:	f000 fd4f 	bl	80014a8 <HAL_FDCAN_Init>
 8000a0a:	4603      	mov	r3, r0
 8000a0c:	2b00      	cmp	r3, #0
 8000a0e:	d001      	beq.n	8000a14 <MX_FDCAN1_Init+0x84>
  {
    Error_Handler();
 8000a10:	f000 f936 	bl	8000c80 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */
  // begin@2023-05-21/tateo.y
  FDCAN_FilterTypeDef sFilterConfig;
  sFilterConfig.IdType = FDCAN_STANDARD_ID;
 8000a14:	2300      	movs	r3, #0
 8000a16:	603b      	str	r3, [r7, #0]
  sFilterConfig.FilterIndex = 0;
 8000a18:	2300      	movs	r3, #0
 8000a1a:	607b      	str	r3, [r7, #4]
  sFilterConfig.FilterType = FDCAN_FILTER_MASK;
 8000a1c:	2302      	movs	r3, #2
 8000a1e:	60bb      	str	r3, [r7, #8]
  sFilterConfig.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
 8000a20:	2301      	movs	r3, #1
 8000a22:	60fb      	str	r3, [r7, #12]
  sFilterConfig.FilterID1 = 0x2;
 8000a24:	2302      	movs	r3, #2
 8000a26:	613b      	str	r3, [r7, #16]
  sFilterConfig.FilterID2 = 0x2;
 8000a28:	2302      	movs	r3, #2
 8000a2a:	617b      	str	r3, [r7, #20]
  //sFilterConfig.RxBufferIndex = 0;
  if (HAL_FDCAN_ConfigFilter(&hfdcan1, &sFilterConfig) != HAL_OK) {
 8000a2c:	463b      	mov	r3, r7
 8000a2e:	4619      	mov	r1, r3
 8000a30:	4805      	ldr	r0, [pc, #20]	; (8000a48 <MX_FDCAN1_Init+0xb8>)
 8000a32:	f000 fe93 	bl	800175c <HAL_FDCAN_ConfigFilter>
 8000a36:	4603      	mov	r3, r0
 8000a38:	2b00      	cmp	r3, #0
 8000a3a:	d001      	beq.n	8000a40 <MX_FDCAN1_Init+0xb0>
    /* Filter configuration Error */
    Error_Handler();
 8000a3c:	f000 f920 	bl	8000c80 <Error_Handler>
  }
  // end@2023-05-21/tateo.y
  /* USER CODE END FDCAN1_Init 2 */

}
 8000a40:	bf00      	nop
 8000a42:	3718      	adds	r7, #24
 8000a44:	46bd      	mov	sp, r7
 8000a46:	bd80      	pop	{r7, pc}
 8000a48:	20000090 	.word	0x20000090
 8000a4c:	40006400 	.word	0x40006400

08000a50 <MX_FDCAN2_Init>:
  * @brief FDCAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN2_Init(void)
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	b086      	sub	sp, #24
 8000a54:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN2_Init 0 */

  /* USER CODE BEGIN FDCAN2_Init 1 */

  /* USER CODE END FDCAN2_Init 1 */
  hfdcan2.Instance = FDCAN2;
 8000a56:	4b2c      	ldr	r3, [pc, #176]	; (8000b08 <MX_FDCAN2_Init+0xb8>)
 8000a58:	4a2c      	ldr	r2, [pc, #176]	; (8000b0c <MX_FDCAN2_Init+0xbc>)
 8000a5a:	601a      	str	r2, [r3, #0]
  hfdcan2.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 8000a5c:	4b2a      	ldr	r3, [pc, #168]	; (8000b08 <MX_FDCAN2_Init+0xb8>)
 8000a5e:	2200      	movs	r2, #0
 8000a60:	605a      	str	r2, [r3, #4]
  hfdcan2.Init.FrameFormat = FDCAN_FRAME_FD_BRS;
 8000a62:	4b29      	ldr	r3, [pc, #164]	; (8000b08 <MX_FDCAN2_Init+0xb8>)
 8000a64:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000a68:	609a      	str	r2, [r3, #8]
  hfdcan2.Init.Mode = FDCAN_MODE_NORMAL;
 8000a6a:	4b27      	ldr	r3, [pc, #156]	; (8000b08 <MX_FDCAN2_Init+0xb8>)
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	60da      	str	r2, [r3, #12]
  hfdcan2.Init.AutoRetransmission = DISABLE;
 8000a70:	4b25      	ldr	r3, [pc, #148]	; (8000b08 <MX_FDCAN2_Init+0xb8>)
 8000a72:	2200      	movs	r2, #0
 8000a74:	741a      	strb	r2, [r3, #16]
  hfdcan2.Init.TransmitPause = DISABLE;
 8000a76:	4b24      	ldr	r3, [pc, #144]	; (8000b08 <MX_FDCAN2_Init+0xb8>)
 8000a78:	2200      	movs	r2, #0
 8000a7a:	745a      	strb	r2, [r3, #17]
  hfdcan2.Init.ProtocolException = ENABLE;
 8000a7c:	4b22      	ldr	r3, [pc, #136]	; (8000b08 <MX_FDCAN2_Init+0xb8>)
 8000a7e:	2201      	movs	r2, #1
 8000a80:	749a      	strb	r2, [r3, #18]
  hfdcan2.Init.NominalPrescaler = 5;
 8000a82:	4b21      	ldr	r3, [pc, #132]	; (8000b08 <MX_FDCAN2_Init+0xb8>)
 8000a84:	2205      	movs	r2, #5
 8000a86:	615a      	str	r2, [r3, #20]
  hfdcan2.Init.NominalSyncJumpWidth = 11;
 8000a88:	4b1f      	ldr	r3, [pc, #124]	; (8000b08 <MX_FDCAN2_Init+0xb8>)
 8000a8a:	220b      	movs	r2, #11
 8000a8c:	619a      	str	r2, [r3, #24]
  hfdcan2.Init.NominalTimeSeg1 = 56;
 8000a8e:	4b1e      	ldr	r3, [pc, #120]	; (8000b08 <MX_FDCAN2_Init+0xb8>)
 8000a90:	2238      	movs	r2, #56	; 0x38
 8000a92:	61da      	str	r2, [r3, #28]
  hfdcan2.Init.NominalTimeSeg2 = 11;
 8000a94:	4b1c      	ldr	r3, [pc, #112]	; (8000b08 <MX_FDCAN2_Init+0xb8>)
 8000a96:	220b      	movs	r2, #11
 8000a98:	621a      	str	r2, [r3, #32]
  hfdcan2.Init.DataPrescaler = 5;
 8000a9a:	4b1b      	ldr	r3, [pc, #108]	; (8000b08 <MX_FDCAN2_Init+0xb8>)
 8000a9c:	2205      	movs	r2, #5
 8000a9e:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan2.Init.DataSyncJumpWidth = 4;
 8000aa0:	4b19      	ldr	r3, [pc, #100]	; (8000b08 <MX_FDCAN2_Init+0xb8>)
 8000aa2:	2204      	movs	r2, #4
 8000aa4:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan2.Init.DataTimeSeg1 = 12;
 8000aa6:	4b18      	ldr	r3, [pc, #96]	; (8000b08 <MX_FDCAN2_Init+0xb8>)
 8000aa8:	220c      	movs	r2, #12
 8000aaa:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan2.Init.DataTimeSeg2 = 4;
 8000aac:	4b16      	ldr	r3, [pc, #88]	; (8000b08 <MX_FDCAN2_Init+0xb8>)
 8000aae:	2204      	movs	r2, #4
 8000ab0:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan2.Init.StdFiltersNbr = 1;
 8000ab2:	4b15      	ldr	r3, [pc, #84]	; (8000b08 <MX_FDCAN2_Init+0xb8>)
 8000ab4:	2201      	movs	r2, #1
 8000ab6:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan2.Init.ExtFiltersNbr = 0;
 8000ab8:	4b13      	ldr	r3, [pc, #76]	; (8000b08 <MX_FDCAN2_Init+0xb8>)
 8000aba:	2200      	movs	r2, #0
 8000abc:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan2.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8000abe:	4b12      	ldr	r3, [pc, #72]	; (8000b08 <MX_FDCAN2_Init+0xb8>)
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	63da      	str	r2, [r3, #60]	; 0x3c
  if (HAL_FDCAN_Init(&hfdcan2) != HAL_OK)
 8000ac4:	4810      	ldr	r0, [pc, #64]	; (8000b08 <MX_FDCAN2_Init+0xb8>)
 8000ac6:	f000 fcef 	bl	80014a8 <HAL_FDCAN_Init>
 8000aca:	4603      	mov	r3, r0
 8000acc:	2b00      	cmp	r3, #0
 8000ace:	d001      	beq.n	8000ad4 <MX_FDCAN2_Init+0x84>
  {
    Error_Handler();
 8000ad0:	f000 f8d6 	bl	8000c80 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN2_Init 2 */
  // start@2023-05-21/tateo.y
  FDCAN_FilterTypeDef sFilterConfig;
  sFilterConfig.IdType = FDCAN_STANDARD_ID;
 8000ad4:	2300      	movs	r3, #0
 8000ad6:	603b      	str	r3, [r7, #0]
  sFilterConfig.FilterIndex = 0;
 8000ad8:	2300      	movs	r3, #0
 8000ada:	607b      	str	r3, [r7, #4]
  sFilterConfig.FilterType = FDCAN_FILTER_MASK;
 8000adc:	2302      	movs	r3, #2
 8000ade:	60bb      	str	r3, [r7, #8]
  sFilterConfig.FilterConfig = FDCAN_FILTER_TO_RXFIFO1;
 8000ae0:	2302      	movs	r3, #2
 8000ae2:	60fb      	str	r3, [r7, #12]
  sFilterConfig.FilterID1 = 0x1;
 8000ae4:	2301      	movs	r3, #1
 8000ae6:	613b      	str	r3, [r7, #16]
  sFilterConfig.FilterID2 = 0x1;
 8000ae8:	2301      	movs	r3, #1
 8000aea:	617b      	str	r3, [r7, #20]
  //sFilterConfig.RxBufferIndex = 0;
  if (HAL_FDCAN_ConfigFilter(&hfdcan2, &sFilterConfig) != HAL_OK) {
 8000aec:	463b      	mov	r3, r7
 8000aee:	4619      	mov	r1, r3
 8000af0:	4805      	ldr	r0, [pc, #20]	; (8000b08 <MX_FDCAN2_Init+0xb8>)
 8000af2:	f000 fe33 	bl	800175c <HAL_FDCAN_ConfigFilter>
 8000af6:	4603      	mov	r3, r0
 8000af8:	2b00      	cmp	r3, #0
 8000afa:	d001      	beq.n	8000b00 <MX_FDCAN2_Init+0xb0>
    /* Filter configuration Error */
    Error_Handler();
 8000afc:	f000 f8c0 	bl	8000c80 <Error_Handler>
  }
  // end@2023-05-21/tateo.y
  /* USER CODE END FDCAN2_Init 2 */

}
 8000b00:	bf00      	nop
 8000b02:	3718      	adds	r7, #24
 8000b04:	46bd      	mov	sp, r7
 8000b06:	bd80      	pop	{r7, pc}
 8000b08:	200000f4 	.word	0x200000f4
 8000b0c:	40006800 	.word	0x40006800

08000b10 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8000b14:	4b21      	ldr	r3, [pc, #132]	; (8000b9c <MX_LPUART1_UART_Init+0x8c>)
 8000b16:	4a22      	ldr	r2, [pc, #136]	; (8000ba0 <MX_LPUART1_UART_Init+0x90>)
 8000b18:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 8000b1a:	4b20      	ldr	r3, [pc, #128]	; (8000b9c <MX_LPUART1_UART_Init+0x8c>)
 8000b1c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000b20:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000b22:	4b1e      	ldr	r3, [pc, #120]	; (8000b9c <MX_LPUART1_UART_Init+0x8c>)
 8000b24:	2200      	movs	r2, #0
 8000b26:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8000b28:	4b1c      	ldr	r3, [pc, #112]	; (8000b9c <MX_LPUART1_UART_Init+0x8c>)
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8000b2e:	4b1b      	ldr	r3, [pc, #108]	; (8000b9c <MX_LPUART1_UART_Init+0x8c>)
 8000b30:	2200      	movs	r2, #0
 8000b32:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8000b34:	4b19      	ldr	r3, [pc, #100]	; (8000b9c <MX_LPUART1_UART_Init+0x8c>)
 8000b36:	220c      	movs	r2, #12
 8000b38:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b3a:	4b18      	ldr	r3, [pc, #96]	; (8000b9c <MX_LPUART1_UART_Init+0x8c>)
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000b40:	4b16      	ldr	r3, [pc, #88]	; (8000b9c <MX_LPUART1_UART_Init+0x8c>)
 8000b42:	2200      	movs	r2, #0
 8000b44:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000b46:	4b15      	ldr	r3, [pc, #84]	; (8000b9c <MX_LPUART1_UART_Init+0x8c>)
 8000b48:	2200      	movs	r2, #0
 8000b4a:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000b4c:	4b13      	ldr	r3, [pc, #76]	; (8000b9c <MX_LPUART1_UART_Init+0x8c>)
 8000b4e:	2200      	movs	r2, #0
 8000b50:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8000b52:	4812      	ldr	r0, [pc, #72]	; (8000b9c <MX_LPUART1_UART_Init+0x8c>)
 8000b54:	f002 fcfc 	bl	8003550 <HAL_UART_Init>
 8000b58:	4603      	mov	r3, r0
 8000b5a:	2b00      	cmp	r3, #0
 8000b5c:	d001      	beq.n	8000b62 <MX_LPUART1_UART_Init+0x52>
  {
    Error_Handler();
 8000b5e:	f000 f88f 	bl	8000c80 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000b62:	2100      	movs	r1, #0
 8000b64:	480d      	ldr	r0, [pc, #52]	; (8000b9c <MX_LPUART1_UART_Init+0x8c>)
 8000b66:	f003 fa2d 	bl	8003fc4 <HAL_UARTEx_SetTxFifoThreshold>
 8000b6a:	4603      	mov	r3, r0
 8000b6c:	2b00      	cmp	r3, #0
 8000b6e:	d001      	beq.n	8000b74 <MX_LPUART1_UART_Init+0x64>
  {
    Error_Handler();
 8000b70:	f000 f886 	bl	8000c80 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000b74:	2100      	movs	r1, #0
 8000b76:	4809      	ldr	r0, [pc, #36]	; (8000b9c <MX_LPUART1_UART_Init+0x8c>)
 8000b78:	f003 fa62 	bl	8004040 <HAL_UARTEx_SetRxFifoThreshold>
 8000b7c:	4603      	mov	r3, r0
 8000b7e:	2b00      	cmp	r3, #0
 8000b80:	d001      	beq.n	8000b86 <MX_LPUART1_UART_Init+0x76>
  {
    Error_Handler();
 8000b82:	f000 f87d 	bl	8000c80 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8000b86:	4805      	ldr	r0, [pc, #20]	; (8000b9c <MX_LPUART1_UART_Init+0x8c>)
 8000b88:	f003 f9e3 	bl	8003f52 <HAL_UARTEx_DisableFifoMode>
 8000b8c:	4603      	mov	r3, r0
 8000b8e:	2b00      	cmp	r3, #0
 8000b90:	d001      	beq.n	8000b96 <MX_LPUART1_UART_Init+0x86>
  {
    Error_Handler();
 8000b92:	f000 f875 	bl	8000c80 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8000b96:	bf00      	nop
 8000b98:	bd80      	pop	{r7, pc}
 8000b9a:	bf00      	nop
 8000b9c:	20000158 	.word	0x20000158
 8000ba0:	40008000 	.word	0x40008000

08000ba4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	b08a      	sub	sp, #40	; 0x28
 8000ba8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000baa:	f107 0314 	add.w	r3, r7, #20
 8000bae:	2200      	movs	r2, #0
 8000bb0:	601a      	str	r2, [r3, #0]
 8000bb2:	605a      	str	r2, [r3, #4]
 8000bb4:	609a      	str	r2, [r3, #8]
 8000bb6:	60da      	str	r2, [r3, #12]
 8000bb8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bba:	4b2f      	ldr	r3, [pc, #188]	; (8000c78 <MX_GPIO_Init+0xd4>)
 8000bbc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bbe:	4a2e      	ldr	r2, [pc, #184]	; (8000c78 <MX_GPIO_Init+0xd4>)
 8000bc0:	f043 0304 	orr.w	r3, r3, #4
 8000bc4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000bc6:	4b2c      	ldr	r3, [pc, #176]	; (8000c78 <MX_GPIO_Init+0xd4>)
 8000bc8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bca:	f003 0304 	and.w	r3, r3, #4
 8000bce:	613b      	str	r3, [r7, #16]
 8000bd0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000bd2:	4b29      	ldr	r3, [pc, #164]	; (8000c78 <MX_GPIO_Init+0xd4>)
 8000bd4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bd6:	4a28      	ldr	r2, [pc, #160]	; (8000c78 <MX_GPIO_Init+0xd4>)
 8000bd8:	f043 0320 	orr.w	r3, r3, #32
 8000bdc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000bde:	4b26      	ldr	r3, [pc, #152]	; (8000c78 <MX_GPIO_Init+0xd4>)
 8000be0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000be2:	f003 0320 	and.w	r3, r3, #32
 8000be6:	60fb      	str	r3, [r7, #12]
 8000be8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bea:	4b23      	ldr	r3, [pc, #140]	; (8000c78 <MX_GPIO_Init+0xd4>)
 8000bec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bee:	4a22      	ldr	r2, [pc, #136]	; (8000c78 <MX_GPIO_Init+0xd4>)
 8000bf0:	f043 0301 	orr.w	r3, r3, #1
 8000bf4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000bf6:	4b20      	ldr	r3, [pc, #128]	; (8000c78 <MX_GPIO_Init+0xd4>)
 8000bf8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bfa:	f003 0301 	and.w	r3, r3, #1
 8000bfe:	60bb      	str	r3, [r7, #8]
 8000c00:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c02:	4b1d      	ldr	r3, [pc, #116]	; (8000c78 <MX_GPIO_Init+0xd4>)
 8000c04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c06:	4a1c      	ldr	r2, [pc, #112]	; (8000c78 <MX_GPIO_Init+0xd4>)
 8000c08:	f043 0302 	orr.w	r3, r3, #2
 8000c0c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c0e:	4b1a      	ldr	r3, [pc, #104]	; (8000c78 <MX_GPIO_Init+0xd4>)
 8000c10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c12:	f003 0302 	and.w	r3, r3, #2
 8000c16:	607b      	str	r3, [r7, #4]
 8000c18:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	2120      	movs	r1, #32
 8000c1e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c22:	f001 fc23 	bl	800246c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000c26:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000c2a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000c2c:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000c30:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c32:	2300      	movs	r3, #0
 8000c34:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000c36:	f107 0314 	add.w	r3, r7, #20
 8000c3a:	4619      	mov	r1, r3
 8000c3c:	480f      	ldr	r0, [pc, #60]	; (8000c7c <MX_GPIO_Init+0xd8>)
 8000c3e:	f001 fa93 	bl	8002168 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000c42:	2320      	movs	r3, #32
 8000c44:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c46:	2301      	movs	r3, #1
 8000c48:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c4e:	2300      	movs	r3, #0
 8000c50:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000c52:	f107 0314 	add.w	r3, r7, #20
 8000c56:	4619      	mov	r1, r3
 8000c58:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c5c:	f001 fa84 	bl	8002168 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000c60:	2200      	movs	r2, #0
 8000c62:	2100      	movs	r1, #0
 8000c64:	2028      	movs	r0, #40	; 0x28
 8000c66:	f000 fbea 	bl	800143e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000c6a:	2028      	movs	r0, #40	; 0x28
 8000c6c:	f000 fc01 	bl	8001472 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000c70:	bf00      	nop
 8000c72:	3728      	adds	r7, #40	; 0x28
 8000c74:	46bd      	mov	sp, r7
 8000c76:	bd80      	pop	{r7, pc}
 8000c78:	40021000 	.word	0x40021000
 8000c7c:	48000800 	.word	0x48000800

08000c80 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c84:	b672      	cpsid	i
}
 8000c86:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1) {
	// begin@2023-05-21/tateo.y
	printf("Error detected\r\n");
 8000c88:	4803      	ldr	r0, [pc, #12]	; (8000c98 <Error_Handler+0x18>)
 8000c8a:	f003 fb1d 	bl	80042c8 <puts>
	HAL_Delay(1000);
 8000c8e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000c92:	f000 fad7 	bl	8001244 <HAL_Delay>
	printf("Error detected\r\n");
 8000c96:	e7f7      	b.n	8000c88 <Error_Handler+0x8>
 8000c98:	08005238 	.word	0x08005238

08000c9c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	b082      	sub	sp, #8
 8000ca0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ca2:	4b0f      	ldr	r3, [pc, #60]	; (8000ce0 <HAL_MspInit+0x44>)
 8000ca4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000ca6:	4a0e      	ldr	r2, [pc, #56]	; (8000ce0 <HAL_MspInit+0x44>)
 8000ca8:	f043 0301 	orr.w	r3, r3, #1
 8000cac:	6613      	str	r3, [r2, #96]	; 0x60
 8000cae:	4b0c      	ldr	r3, [pc, #48]	; (8000ce0 <HAL_MspInit+0x44>)
 8000cb0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000cb2:	f003 0301 	and.w	r3, r3, #1
 8000cb6:	607b      	str	r3, [r7, #4]
 8000cb8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000cba:	4b09      	ldr	r3, [pc, #36]	; (8000ce0 <HAL_MspInit+0x44>)
 8000cbc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000cbe:	4a08      	ldr	r2, [pc, #32]	; (8000ce0 <HAL_MspInit+0x44>)
 8000cc0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000cc4:	6593      	str	r3, [r2, #88]	; 0x58
 8000cc6:	4b06      	ldr	r3, [pc, #24]	; (8000ce0 <HAL_MspInit+0x44>)
 8000cc8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000cca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000cce:	603b      	str	r3, [r7, #0]
 8000cd0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000cd2:	f001 fcab 	bl	800262c <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000cd6:	bf00      	nop
 8000cd8:	3708      	adds	r7, #8
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	bd80      	pop	{r7, pc}
 8000cde:	bf00      	nop
 8000ce0:	40021000 	.word	0x40021000

08000ce4 <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	b0a0      	sub	sp, #128	; 0x80
 8000ce8:	af00      	add	r7, sp, #0
 8000cea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cec:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	601a      	str	r2, [r3, #0]
 8000cf4:	605a      	str	r2, [r3, #4]
 8000cf6:	609a      	str	r2, [r3, #8]
 8000cf8:	60da      	str	r2, [r3, #12]
 8000cfa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000cfc:	f107 0318 	add.w	r3, r7, #24
 8000d00:	2254      	movs	r2, #84	; 0x54
 8000d02:	2100      	movs	r1, #0
 8000d04:	4618      	mov	r0, r3
 8000d06:	f003 fa51 	bl	80041ac <memset>
  if(hfdcan->Instance==FDCAN1)
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	681b      	ldr	r3, [r3, #0]
 8000d0e:	4a51      	ldr	r2, [pc, #324]	; (8000e54 <HAL_FDCAN_MspInit+0x170>)
 8000d10:	4293      	cmp	r3, r2
 8000d12:	d14b      	bne.n	8000dac <HAL_FDCAN_MspInit+0xc8>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8000d14:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d18:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 8000d1a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000d1e:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000d20:	f107 0318 	add.w	r3, r7, #24
 8000d24:	4618      	mov	r0, r3
 8000d26:	f002 f9c5 	bl	80030b4 <HAL_RCCEx_PeriphCLKConfig>
 8000d2a:	4603      	mov	r3, r0
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	d001      	beq.n	8000d34 <HAL_FDCAN_MspInit+0x50>
    {
      Error_Handler();
 8000d30:	f7ff ffa6 	bl	8000c80 <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_FDCAN_CLK_ENABLED++;
 8000d34:	4b48      	ldr	r3, [pc, #288]	; (8000e58 <HAL_FDCAN_MspInit+0x174>)
 8000d36:	681b      	ldr	r3, [r3, #0]
 8000d38:	3301      	adds	r3, #1
 8000d3a:	4a47      	ldr	r2, [pc, #284]	; (8000e58 <HAL_FDCAN_MspInit+0x174>)
 8000d3c:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 8000d3e:	4b46      	ldr	r3, [pc, #280]	; (8000e58 <HAL_FDCAN_MspInit+0x174>)
 8000d40:	681b      	ldr	r3, [r3, #0]
 8000d42:	2b01      	cmp	r3, #1
 8000d44:	d10b      	bne.n	8000d5e <HAL_FDCAN_MspInit+0x7a>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 8000d46:	4b45      	ldr	r3, [pc, #276]	; (8000e5c <HAL_FDCAN_MspInit+0x178>)
 8000d48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d4a:	4a44      	ldr	r2, [pc, #272]	; (8000e5c <HAL_FDCAN_MspInit+0x178>)
 8000d4c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000d50:	6593      	str	r3, [r2, #88]	; 0x58
 8000d52:	4b42      	ldr	r3, [pc, #264]	; (8000e5c <HAL_FDCAN_MspInit+0x178>)
 8000d54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d56:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000d5a:	617b      	str	r3, [r7, #20]
 8000d5c:	697b      	ldr	r3, [r7, #20]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d5e:	4b3f      	ldr	r3, [pc, #252]	; (8000e5c <HAL_FDCAN_MspInit+0x178>)
 8000d60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d62:	4a3e      	ldr	r2, [pc, #248]	; (8000e5c <HAL_FDCAN_MspInit+0x178>)
 8000d64:	f043 0301 	orr.w	r3, r3, #1
 8000d68:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d6a:	4b3c      	ldr	r3, [pc, #240]	; (8000e5c <HAL_FDCAN_MspInit+0x178>)
 8000d6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d6e:	f003 0301 	and.w	r3, r3, #1
 8000d72:	613b      	str	r3, [r7, #16]
 8000d74:	693b      	ldr	r3, [r7, #16]
    /**FDCAN1 GPIO Configuration
    PA11     ------> FDCAN1_RX
    PA12     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000d76:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000d7a:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d7c:	2302      	movs	r3, #2
 8000d7e:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d80:	2300      	movs	r3, #0
 8000d82:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d84:	2300      	movs	r3, #0
 8000d86:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8000d88:	2309      	movs	r3, #9
 8000d8a:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d8c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000d90:	4619      	mov	r1, r3
 8000d92:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d96:	f001 f9e7 	bl	8002168 <HAL_GPIO_Init>

    /* FDCAN1 interrupt Init */
    HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 0, 0);
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	2100      	movs	r1, #0
 8000d9e:	2015      	movs	r0, #21
 8000da0:	f000 fb4d 	bl	800143e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 8000da4:	2015      	movs	r0, #21
 8000da6:	f000 fb64 	bl	8001472 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN FDCAN2_MspInit 1 */

  /* USER CODE END FDCAN2_MspInit 1 */
  }

}
 8000daa:	e04e      	b.n	8000e4a <HAL_FDCAN_MspInit+0x166>
  else if(hfdcan->Instance==FDCAN2)
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	4a2b      	ldr	r2, [pc, #172]	; (8000e60 <HAL_FDCAN_MspInit+0x17c>)
 8000db2:	4293      	cmp	r3, r2
 8000db4:	d149      	bne.n	8000e4a <HAL_FDCAN_MspInit+0x166>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8000db6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000dba:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 8000dbc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000dc0:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000dc2:	f107 0318 	add.w	r3, r7, #24
 8000dc6:	4618      	mov	r0, r3
 8000dc8:	f002 f974 	bl	80030b4 <HAL_RCCEx_PeriphCLKConfig>
 8000dcc:	4603      	mov	r3, r0
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	d001      	beq.n	8000dd6 <HAL_FDCAN_MspInit+0xf2>
      Error_Handler();
 8000dd2:	f7ff ff55 	bl	8000c80 <Error_Handler>
    HAL_RCC_FDCAN_CLK_ENABLED++;
 8000dd6:	4b20      	ldr	r3, [pc, #128]	; (8000e58 <HAL_FDCAN_MspInit+0x174>)
 8000dd8:	681b      	ldr	r3, [r3, #0]
 8000dda:	3301      	adds	r3, #1
 8000ddc:	4a1e      	ldr	r2, [pc, #120]	; (8000e58 <HAL_FDCAN_MspInit+0x174>)
 8000dde:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 8000de0:	4b1d      	ldr	r3, [pc, #116]	; (8000e58 <HAL_FDCAN_MspInit+0x174>)
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	2b01      	cmp	r3, #1
 8000de6:	d10b      	bne.n	8000e00 <HAL_FDCAN_MspInit+0x11c>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 8000de8:	4b1c      	ldr	r3, [pc, #112]	; (8000e5c <HAL_FDCAN_MspInit+0x178>)
 8000dea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000dec:	4a1b      	ldr	r2, [pc, #108]	; (8000e5c <HAL_FDCAN_MspInit+0x178>)
 8000dee:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000df2:	6593      	str	r3, [r2, #88]	; 0x58
 8000df4:	4b19      	ldr	r3, [pc, #100]	; (8000e5c <HAL_FDCAN_MspInit+0x178>)
 8000df6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000df8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000dfc:	60fb      	str	r3, [r7, #12]
 8000dfe:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e00:	4b16      	ldr	r3, [pc, #88]	; (8000e5c <HAL_FDCAN_MspInit+0x178>)
 8000e02:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e04:	4a15      	ldr	r2, [pc, #84]	; (8000e5c <HAL_FDCAN_MspInit+0x178>)
 8000e06:	f043 0302 	orr.w	r3, r3, #2
 8000e0a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e0c:	4b13      	ldr	r3, [pc, #76]	; (8000e5c <HAL_FDCAN_MspInit+0x178>)
 8000e0e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e10:	f003 0302 	and.w	r3, r3, #2
 8000e14:	60bb      	str	r3, [r7, #8]
 8000e16:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8000e18:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8000e1c:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e1e:	2302      	movs	r3, #2
 8000e20:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e22:	2300      	movs	r3, #0
 8000e24:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e26:	2300      	movs	r3, #0
 8000e28:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN2;
 8000e2a:	2309      	movs	r3, #9
 8000e2c:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e2e:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000e32:	4619      	mov	r1, r3
 8000e34:	480b      	ldr	r0, [pc, #44]	; (8000e64 <HAL_FDCAN_MspInit+0x180>)
 8000e36:	f001 f997 	bl	8002168 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(FDCAN2_IT0_IRQn, 0, 0);
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	2100      	movs	r1, #0
 8000e3e:	2056      	movs	r0, #86	; 0x56
 8000e40:	f000 fafd 	bl	800143e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN2_IT0_IRQn);
 8000e44:	2056      	movs	r0, #86	; 0x56
 8000e46:	f000 fb14 	bl	8001472 <HAL_NVIC_EnableIRQ>
}
 8000e4a:	bf00      	nop
 8000e4c:	3780      	adds	r7, #128	; 0x80
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	bd80      	pop	{r7, pc}
 8000e52:	bf00      	nop
 8000e54:	40006400 	.word	0x40006400
 8000e58:	20000380 	.word	0x20000380
 8000e5c:	40021000 	.word	0x40021000
 8000e60:	40006800 	.word	0x40006800
 8000e64:	48000400 	.word	0x48000400

08000e68 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	b09e      	sub	sp, #120	; 0x78
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e70:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000e74:	2200      	movs	r2, #0
 8000e76:	601a      	str	r2, [r3, #0]
 8000e78:	605a      	str	r2, [r3, #4]
 8000e7a:	609a      	str	r2, [r3, #8]
 8000e7c:	60da      	str	r2, [r3, #12]
 8000e7e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000e80:	f107 0310 	add.w	r3, r7, #16
 8000e84:	2254      	movs	r2, #84	; 0x54
 8000e86:	2100      	movs	r1, #0
 8000e88:	4618      	mov	r0, r3
 8000e8a:	f003 f98f 	bl	80041ac <memset>
  if(huart->Instance==LPUART1)
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	4a1f      	ldr	r2, [pc, #124]	; (8000f10 <HAL_UART_MspInit+0xa8>)
 8000e94:	4293      	cmp	r3, r2
 8000e96:	d136      	bne.n	8000f06 <HAL_UART_MspInit+0x9e>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8000e98:	2320      	movs	r3, #32
 8000e9a:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8000e9c:	2300      	movs	r3, #0
 8000e9e:	62bb      	str	r3, [r7, #40]	; 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000ea0:	f107 0310 	add.w	r3, r7, #16
 8000ea4:	4618      	mov	r0, r3
 8000ea6:	f002 f905 	bl	80030b4 <HAL_RCCEx_PeriphCLKConfig>
 8000eaa:	4603      	mov	r3, r0
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	d001      	beq.n	8000eb4 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000eb0:	f7ff fee6 	bl	8000c80 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8000eb4:	4b17      	ldr	r3, [pc, #92]	; (8000f14 <HAL_UART_MspInit+0xac>)
 8000eb6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000eb8:	4a16      	ldr	r2, [pc, #88]	; (8000f14 <HAL_UART_MspInit+0xac>)
 8000eba:	f043 0301 	orr.w	r3, r3, #1
 8000ebe:	65d3      	str	r3, [r2, #92]	; 0x5c
 8000ec0:	4b14      	ldr	r3, [pc, #80]	; (8000f14 <HAL_UART_MspInit+0xac>)
 8000ec2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000ec4:	f003 0301 	and.w	r3, r3, #1
 8000ec8:	60fb      	str	r3, [r7, #12]
 8000eca:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ecc:	4b11      	ldr	r3, [pc, #68]	; (8000f14 <HAL_UART_MspInit+0xac>)
 8000ece:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ed0:	4a10      	ldr	r2, [pc, #64]	; (8000f14 <HAL_UART_MspInit+0xac>)
 8000ed2:	f043 0301 	orr.w	r3, r3, #1
 8000ed6:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ed8:	4b0e      	ldr	r3, [pc, #56]	; (8000f14 <HAL_UART_MspInit+0xac>)
 8000eda:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000edc:	f003 0301 	and.w	r3, r3, #1
 8000ee0:	60bb      	str	r3, [r7, #8]
 8000ee2:	68bb      	ldr	r3, [r7, #8]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 8000ee4:	230c      	movs	r3, #12
 8000ee6:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ee8:	2302      	movs	r3, #2
 8000eea:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eec:	2300      	movs	r3, #0
 8000eee:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ef0:	2300      	movs	r3, #0
 8000ef2:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 8000ef4:	230c      	movs	r3, #12
 8000ef6:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ef8:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000efc:	4619      	mov	r1, r3
 8000efe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f02:	f001 f931 	bl	8002168 <HAL_GPIO_Init>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
 8000f06:	bf00      	nop
 8000f08:	3778      	adds	r7, #120	; 0x78
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	bd80      	pop	{r7, pc}
 8000f0e:	bf00      	nop
 8000f10:	40008000 	.word	0x40008000
 8000f14:	40021000 	.word	0x40021000

08000f18 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f18:	b480      	push	{r7}
 8000f1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000f1c:	e7fe      	b.n	8000f1c <NMI_Handler+0x4>

08000f1e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f1e:	b480      	push	{r7}
 8000f20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f22:	e7fe      	b.n	8000f22 <HardFault_Handler+0x4>

08000f24 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f24:	b480      	push	{r7}
 8000f26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f28:	e7fe      	b.n	8000f28 <MemManage_Handler+0x4>

08000f2a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f2a:	b480      	push	{r7}
 8000f2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f2e:	e7fe      	b.n	8000f2e <BusFault_Handler+0x4>

08000f30 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f30:	b480      	push	{r7}
 8000f32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f34:	e7fe      	b.n	8000f34 <UsageFault_Handler+0x4>

08000f36 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f36:	b480      	push	{r7}
 8000f38:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f3a:	bf00      	nop
 8000f3c:	46bd      	mov	sp, r7
 8000f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f42:	4770      	bx	lr

08000f44 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f44:	b480      	push	{r7}
 8000f46:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f48:	bf00      	nop
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f50:	4770      	bx	lr

08000f52 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f52:	b480      	push	{r7}
 8000f54:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f56:	bf00      	nop
 8000f58:	46bd      	mov	sp, r7
 8000f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f5e:	4770      	bx	lr

08000f60 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f64:	f000 f950 	bl	8001208 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f68:	bf00      	nop
 8000f6a:	bd80      	pop	{r7, pc}

08000f6c <FDCAN1_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 0.
  */
void FDCAN1_IT0_IRQHandler(void)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 0 */

  /* USER CODE END FDCAN1_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 8000f70:	4802      	ldr	r0, [pc, #8]	; (8000f7c <FDCAN1_IT0_IRQHandler+0x10>)
 8000f72:	f000 fe79 	bl	8001c68 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 1 */

  /* USER CODE END FDCAN1_IT0_IRQn 1 */
}
 8000f76:	bf00      	nop
 8000f78:	bd80      	pop	{r7, pc}
 8000f7a:	bf00      	nop
 8000f7c:	20000090 	.word	0x20000090

08000f80 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8000f84:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000f88:	f001 fa88 	bl	800249c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000f8c:	bf00      	nop
 8000f8e:	bd80      	pop	{r7, pc}

08000f90 <FDCAN2_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN2 interrupt 0.
  */
void FDCAN2_IT0_IRQHandler(void)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN2_IT0_IRQn 0 */

  /* USER CODE END FDCAN2_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan2);
 8000f94:	4802      	ldr	r0, [pc, #8]	; (8000fa0 <FDCAN2_IT0_IRQHandler+0x10>)
 8000f96:	f000 fe67 	bl	8001c68 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN2_IT0_IRQn 1 */

  /* USER CODE END FDCAN2_IT0_IRQn 1 */
}
 8000f9a:	bf00      	nop
 8000f9c:	bd80      	pop	{r7, pc}
 8000f9e:	bf00      	nop
 8000fa0:	200000f4 	.word	0x200000f4

08000fa4 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	b086      	sub	sp, #24
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	60f8      	str	r0, [r7, #12]
 8000fac:	60b9      	str	r1, [r7, #8]
 8000fae:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000fb0:	2300      	movs	r3, #0
 8000fb2:	617b      	str	r3, [r7, #20]
 8000fb4:	e00a      	b.n	8000fcc <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000fb6:	f3af 8000 	nop.w
 8000fba:	4601      	mov	r1, r0
 8000fbc:	68bb      	ldr	r3, [r7, #8]
 8000fbe:	1c5a      	adds	r2, r3, #1
 8000fc0:	60ba      	str	r2, [r7, #8]
 8000fc2:	b2ca      	uxtb	r2, r1
 8000fc4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000fc6:	697b      	ldr	r3, [r7, #20]
 8000fc8:	3301      	adds	r3, #1
 8000fca:	617b      	str	r3, [r7, #20]
 8000fcc:	697a      	ldr	r2, [r7, #20]
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	429a      	cmp	r2, r3
 8000fd2:	dbf0      	blt.n	8000fb6 <_read+0x12>
  }

  return len;
 8000fd4:	687b      	ldr	r3, [r7, #4]
}
 8000fd6:	4618      	mov	r0, r3
 8000fd8:	3718      	adds	r7, #24
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	bd80      	pop	{r7, pc}

08000fde <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000fde:	b580      	push	{r7, lr}
 8000fe0:	b086      	sub	sp, #24
 8000fe2:	af00      	add	r7, sp, #0
 8000fe4:	60f8      	str	r0, [r7, #12]
 8000fe6:	60b9      	str	r1, [r7, #8]
 8000fe8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000fea:	2300      	movs	r3, #0
 8000fec:	617b      	str	r3, [r7, #20]
 8000fee:	e009      	b.n	8001004 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000ff0:	68bb      	ldr	r3, [r7, #8]
 8000ff2:	1c5a      	adds	r2, r3, #1
 8000ff4:	60ba      	str	r2, [r7, #8]
 8000ff6:	781b      	ldrb	r3, [r3, #0]
 8000ff8:	4618      	mov	r0, r3
 8000ffa:	f7ff fbd3 	bl	80007a4 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ffe:	697b      	ldr	r3, [r7, #20]
 8001000:	3301      	adds	r3, #1
 8001002:	617b      	str	r3, [r7, #20]
 8001004:	697a      	ldr	r2, [r7, #20]
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	429a      	cmp	r2, r3
 800100a:	dbf1      	blt.n	8000ff0 <_write+0x12>
  }
  return len;
 800100c:	687b      	ldr	r3, [r7, #4]
}
 800100e:	4618      	mov	r0, r3
 8001010:	3718      	adds	r7, #24
 8001012:	46bd      	mov	sp, r7
 8001014:	bd80      	pop	{r7, pc}

08001016 <_close>:

int _close(int file)
{
 8001016:	b480      	push	{r7}
 8001018:	b083      	sub	sp, #12
 800101a:	af00      	add	r7, sp, #0
 800101c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800101e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001022:	4618      	mov	r0, r3
 8001024:	370c      	adds	r7, #12
 8001026:	46bd      	mov	sp, r7
 8001028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102c:	4770      	bx	lr

0800102e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800102e:	b480      	push	{r7}
 8001030:	b083      	sub	sp, #12
 8001032:	af00      	add	r7, sp, #0
 8001034:	6078      	str	r0, [r7, #4]
 8001036:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001038:	683b      	ldr	r3, [r7, #0]
 800103a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800103e:	605a      	str	r2, [r3, #4]
  return 0;
 8001040:	2300      	movs	r3, #0
}
 8001042:	4618      	mov	r0, r3
 8001044:	370c      	adds	r7, #12
 8001046:	46bd      	mov	sp, r7
 8001048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104c:	4770      	bx	lr

0800104e <_isatty>:

int _isatty(int file)
{
 800104e:	b480      	push	{r7}
 8001050:	b083      	sub	sp, #12
 8001052:	af00      	add	r7, sp, #0
 8001054:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001056:	2301      	movs	r3, #1
}
 8001058:	4618      	mov	r0, r3
 800105a:	370c      	adds	r7, #12
 800105c:	46bd      	mov	sp, r7
 800105e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001062:	4770      	bx	lr

08001064 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001064:	b480      	push	{r7}
 8001066:	b085      	sub	sp, #20
 8001068:	af00      	add	r7, sp, #0
 800106a:	60f8      	str	r0, [r7, #12]
 800106c:	60b9      	str	r1, [r7, #8]
 800106e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001070:	2300      	movs	r3, #0
}
 8001072:	4618      	mov	r0, r3
 8001074:	3714      	adds	r7, #20
 8001076:	46bd      	mov	sp, r7
 8001078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107c:	4770      	bx	lr
	...

08001080 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	b086      	sub	sp, #24
 8001084:	af00      	add	r7, sp, #0
 8001086:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001088:	4a14      	ldr	r2, [pc, #80]	; (80010dc <_sbrk+0x5c>)
 800108a:	4b15      	ldr	r3, [pc, #84]	; (80010e0 <_sbrk+0x60>)
 800108c:	1ad3      	subs	r3, r2, r3
 800108e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001090:	697b      	ldr	r3, [r7, #20]
 8001092:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001094:	4b13      	ldr	r3, [pc, #76]	; (80010e4 <_sbrk+0x64>)
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	2b00      	cmp	r3, #0
 800109a:	d102      	bne.n	80010a2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800109c:	4b11      	ldr	r3, [pc, #68]	; (80010e4 <_sbrk+0x64>)
 800109e:	4a12      	ldr	r2, [pc, #72]	; (80010e8 <_sbrk+0x68>)
 80010a0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80010a2:	4b10      	ldr	r3, [pc, #64]	; (80010e4 <_sbrk+0x64>)
 80010a4:	681a      	ldr	r2, [r3, #0]
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	4413      	add	r3, r2
 80010aa:	693a      	ldr	r2, [r7, #16]
 80010ac:	429a      	cmp	r2, r3
 80010ae:	d207      	bcs.n	80010c0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80010b0:	f003 f852 	bl	8004158 <__errno>
 80010b4:	4603      	mov	r3, r0
 80010b6:	220c      	movs	r2, #12
 80010b8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80010ba:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80010be:	e009      	b.n	80010d4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80010c0:	4b08      	ldr	r3, [pc, #32]	; (80010e4 <_sbrk+0x64>)
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80010c6:	4b07      	ldr	r3, [pc, #28]	; (80010e4 <_sbrk+0x64>)
 80010c8:	681a      	ldr	r2, [r3, #0]
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	4413      	add	r3, r2
 80010ce:	4a05      	ldr	r2, [pc, #20]	; (80010e4 <_sbrk+0x64>)
 80010d0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80010d2:	68fb      	ldr	r3, [r7, #12]
}
 80010d4:	4618      	mov	r0, r3
 80010d6:	3718      	adds	r7, #24
 80010d8:	46bd      	mov	sp, r7
 80010da:	bd80      	pop	{r7, pc}
 80010dc:	20020000 	.word	0x20020000
 80010e0:	00000400 	.word	0x00000400
 80010e4:	20000384 	.word	0x20000384
 80010e8:	200003a0 	.word	0x200003a0

080010ec <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80010ec:	b480      	push	{r7}
 80010ee:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80010f0:	4b06      	ldr	r3, [pc, #24]	; (800110c <SystemInit+0x20>)
 80010f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80010f6:	4a05      	ldr	r2, [pc, #20]	; (800110c <SystemInit+0x20>)
 80010f8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80010fc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001100:	bf00      	nop
 8001102:	46bd      	mov	sp, r7
 8001104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001108:	4770      	bx	lr
 800110a:	bf00      	nop
 800110c:	e000ed00 	.word	0xe000ed00

08001110 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001110:	480d      	ldr	r0, [pc, #52]	; (8001148 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001112:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001114:	480d      	ldr	r0, [pc, #52]	; (800114c <LoopForever+0x6>)
  ldr r1, =_edata
 8001116:	490e      	ldr	r1, [pc, #56]	; (8001150 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001118:	4a0e      	ldr	r2, [pc, #56]	; (8001154 <LoopForever+0xe>)
  movs r3, #0
 800111a:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 800111c:	e002      	b.n	8001124 <LoopCopyDataInit>

0800111e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800111e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001120:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001122:	3304      	adds	r3, #4

08001124 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001124:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001126:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001128:	d3f9      	bcc.n	800111e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800112a:	4a0b      	ldr	r2, [pc, #44]	; (8001158 <LoopForever+0x12>)
  ldr r4, =_ebss
 800112c:	4c0b      	ldr	r4, [pc, #44]	; (800115c <LoopForever+0x16>)
  movs r3, #0
 800112e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001130:	e001      	b.n	8001136 <LoopFillZerobss>

08001132 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001132:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001134:	3204      	adds	r2, #4

08001136 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001136:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001138:	d3fb      	bcc.n	8001132 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800113a:	f7ff ffd7 	bl	80010ec <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800113e:	f003 f811 	bl	8004164 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001142:	f7ff fb3d 	bl	80007c0 <main>

08001146 <LoopForever>:

LoopForever:
    b LoopForever
 8001146:	e7fe      	b.n	8001146 <LoopForever>
  ldr   r0, =_estack
 8001148:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800114c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001150:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8001154:	08005340 	.word	0x08005340
  ldr r2, =_sbss
 8001158:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 800115c:	2000039c 	.word	0x2000039c

08001160 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001160:	e7fe      	b.n	8001160 <ADC1_2_IRQHandler>

08001162 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001162:	b580      	push	{r7, lr}
 8001164:	b082      	sub	sp, #8
 8001166:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001168:	2300      	movs	r3, #0
 800116a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800116c:	2003      	movs	r0, #3
 800116e:	f000 f95b 	bl	8001428 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001172:	2000      	movs	r0, #0
 8001174:	f000 f80e 	bl	8001194 <HAL_InitTick>
 8001178:	4603      	mov	r3, r0
 800117a:	2b00      	cmp	r3, #0
 800117c:	d002      	beq.n	8001184 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800117e:	2301      	movs	r3, #1
 8001180:	71fb      	strb	r3, [r7, #7]
 8001182:	e001      	b.n	8001188 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001184:	f7ff fd8a 	bl	8000c9c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001188:	79fb      	ldrb	r3, [r7, #7]

}
 800118a:	4618      	mov	r0, r3
 800118c:	3708      	adds	r7, #8
 800118e:	46bd      	mov	sp, r7
 8001190:	bd80      	pop	{r7, pc}
	...

08001194 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	b084      	sub	sp, #16
 8001198:	af00      	add	r7, sp, #0
 800119a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800119c:	2300      	movs	r3, #0
 800119e:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80011a0:	4b16      	ldr	r3, [pc, #88]	; (80011fc <HAL_InitTick+0x68>)
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d022      	beq.n	80011ee <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80011a8:	4b15      	ldr	r3, [pc, #84]	; (8001200 <HAL_InitTick+0x6c>)
 80011aa:	681a      	ldr	r2, [r3, #0]
 80011ac:	4b13      	ldr	r3, [pc, #76]	; (80011fc <HAL_InitTick+0x68>)
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80011b4:	fbb1 f3f3 	udiv	r3, r1, r3
 80011b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80011bc:	4618      	mov	r0, r3
 80011be:	f000 f966 	bl	800148e <HAL_SYSTICK_Config>
 80011c2:	4603      	mov	r3, r0
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d10f      	bne.n	80011e8 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	2b0f      	cmp	r3, #15
 80011cc:	d809      	bhi.n	80011e2 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80011ce:	2200      	movs	r2, #0
 80011d0:	6879      	ldr	r1, [r7, #4]
 80011d2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80011d6:	f000 f932 	bl	800143e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80011da:	4a0a      	ldr	r2, [pc, #40]	; (8001204 <HAL_InitTick+0x70>)
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	6013      	str	r3, [r2, #0]
 80011e0:	e007      	b.n	80011f2 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80011e2:	2301      	movs	r3, #1
 80011e4:	73fb      	strb	r3, [r7, #15]
 80011e6:	e004      	b.n	80011f2 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80011e8:	2301      	movs	r3, #1
 80011ea:	73fb      	strb	r3, [r7, #15]
 80011ec:	e001      	b.n	80011f2 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80011ee:	2301      	movs	r3, #1
 80011f0:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80011f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80011f4:	4618      	mov	r0, r3
 80011f6:	3710      	adds	r7, #16
 80011f8:	46bd      	mov	sp, r7
 80011fa:	bd80      	pop	{r7, pc}
 80011fc:	2000000c 	.word	0x2000000c
 8001200:	20000004 	.word	0x20000004
 8001204:	20000008 	.word	0x20000008

08001208 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001208:	b480      	push	{r7}
 800120a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800120c:	4b05      	ldr	r3, [pc, #20]	; (8001224 <HAL_IncTick+0x1c>)
 800120e:	681a      	ldr	r2, [r3, #0]
 8001210:	4b05      	ldr	r3, [pc, #20]	; (8001228 <HAL_IncTick+0x20>)
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	4413      	add	r3, r2
 8001216:	4a03      	ldr	r2, [pc, #12]	; (8001224 <HAL_IncTick+0x1c>)
 8001218:	6013      	str	r3, [r2, #0]
}
 800121a:	bf00      	nop
 800121c:	46bd      	mov	sp, r7
 800121e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001222:	4770      	bx	lr
 8001224:	20000388 	.word	0x20000388
 8001228:	2000000c 	.word	0x2000000c

0800122c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800122c:	b480      	push	{r7}
 800122e:	af00      	add	r7, sp, #0
  return uwTick;
 8001230:	4b03      	ldr	r3, [pc, #12]	; (8001240 <HAL_GetTick+0x14>)
 8001232:	681b      	ldr	r3, [r3, #0]
}
 8001234:	4618      	mov	r0, r3
 8001236:	46bd      	mov	sp, r7
 8001238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123c:	4770      	bx	lr
 800123e:	bf00      	nop
 8001240:	20000388 	.word	0x20000388

08001244 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	b084      	sub	sp, #16
 8001248:	af00      	add	r7, sp, #0
 800124a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800124c:	f7ff ffee 	bl	800122c <HAL_GetTick>
 8001250:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001256:	68fb      	ldr	r3, [r7, #12]
 8001258:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800125c:	d004      	beq.n	8001268 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 800125e:	4b09      	ldr	r3, [pc, #36]	; (8001284 <HAL_Delay+0x40>)
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	68fa      	ldr	r2, [r7, #12]
 8001264:	4413      	add	r3, r2
 8001266:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001268:	bf00      	nop
 800126a:	f7ff ffdf 	bl	800122c <HAL_GetTick>
 800126e:	4602      	mov	r2, r0
 8001270:	68bb      	ldr	r3, [r7, #8]
 8001272:	1ad3      	subs	r3, r2, r3
 8001274:	68fa      	ldr	r2, [r7, #12]
 8001276:	429a      	cmp	r2, r3
 8001278:	d8f7      	bhi.n	800126a <HAL_Delay+0x26>
  {
  }
}
 800127a:	bf00      	nop
 800127c:	bf00      	nop
 800127e:	3710      	adds	r7, #16
 8001280:	46bd      	mov	sp, r7
 8001282:	bd80      	pop	{r7, pc}
 8001284:	2000000c 	.word	0x2000000c

08001288 <__NVIC_SetPriorityGrouping>:
{
 8001288:	b480      	push	{r7}
 800128a:	b085      	sub	sp, #20
 800128c:	af00      	add	r7, sp, #0
 800128e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	f003 0307 	and.w	r3, r3, #7
 8001296:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001298:	4b0c      	ldr	r3, [pc, #48]	; (80012cc <__NVIC_SetPriorityGrouping+0x44>)
 800129a:	68db      	ldr	r3, [r3, #12]
 800129c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800129e:	68ba      	ldr	r2, [r7, #8]
 80012a0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80012a4:	4013      	ands	r3, r2
 80012a6:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80012a8:	68fb      	ldr	r3, [r7, #12]
 80012aa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80012ac:	68bb      	ldr	r3, [r7, #8]
 80012ae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80012b0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80012b4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80012b8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80012ba:	4a04      	ldr	r2, [pc, #16]	; (80012cc <__NVIC_SetPriorityGrouping+0x44>)
 80012bc:	68bb      	ldr	r3, [r7, #8]
 80012be:	60d3      	str	r3, [r2, #12]
}
 80012c0:	bf00      	nop
 80012c2:	3714      	adds	r7, #20
 80012c4:	46bd      	mov	sp, r7
 80012c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ca:	4770      	bx	lr
 80012cc:	e000ed00 	.word	0xe000ed00

080012d0 <__NVIC_GetPriorityGrouping>:
{
 80012d0:	b480      	push	{r7}
 80012d2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80012d4:	4b04      	ldr	r3, [pc, #16]	; (80012e8 <__NVIC_GetPriorityGrouping+0x18>)
 80012d6:	68db      	ldr	r3, [r3, #12]
 80012d8:	0a1b      	lsrs	r3, r3, #8
 80012da:	f003 0307 	and.w	r3, r3, #7
}
 80012de:	4618      	mov	r0, r3
 80012e0:	46bd      	mov	sp, r7
 80012e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e6:	4770      	bx	lr
 80012e8:	e000ed00 	.word	0xe000ed00

080012ec <__NVIC_EnableIRQ>:
{
 80012ec:	b480      	push	{r7}
 80012ee:	b083      	sub	sp, #12
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	4603      	mov	r3, r0
 80012f4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	db0b      	blt.n	8001316 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80012fe:	79fb      	ldrb	r3, [r7, #7]
 8001300:	f003 021f 	and.w	r2, r3, #31
 8001304:	4907      	ldr	r1, [pc, #28]	; (8001324 <__NVIC_EnableIRQ+0x38>)
 8001306:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800130a:	095b      	lsrs	r3, r3, #5
 800130c:	2001      	movs	r0, #1
 800130e:	fa00 f202 	lsl.w	r2, r0, r2
 8001312:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001316:	bf00      	nop
 8001318:	370c      	adds	r7, #12
 800131a:	46bd      	mov	sp, r7
 800131c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001320:	4770      	bx	lr
 8001322:	bf00      	nop
 8001324:	e000e100 	.word	0xe000e100

08001328 <__NVIC_SetPriority>:
{
 8001328:	b480      	push	{r7}
 800132a:	b083      	sub	sp, #12
 800132c:	af00      	add	r7, sp, #0
 800132e:	4603      	mov	r3, r0
 8001330:	6039      	str	r1, [r7, #0]
 8001332:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001334:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001338:	2b00      	cmp	r3, #0
 800133a:	db0a      	blt.n	8001352 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800133c:	683b      	ldr	r3, [r7, #0]
 800133e:	b2da      	uxtb	r2, r3
 8001340:	490c      	ldr	r1, [pc, #48]	; (8001374 <__NVIC_SetPriority+0x4c>)
 8001342:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001346:	0112      	lsls	r2, r2, #4
 8001348:	b2d2      	uxtb	r2, r2
 800134a:	440b      	add	r3, r1
 800134c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001350:	e00a      	b.n	8001368 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001352:	683b      	ldr	r3, [r7, #0]
 8001354:	b2da      	uxtb	r2, r3
 8001356:	4908      	ldr	r1, [pc, #32]	; (8001378 <__NVIC_SetPriority+0x50>)
 8001358:	79fb      	ldrb	r3, [r7, #7]
 800135a:	f003 030f 	and.w	r3, r3, #15
 800135e:	3b04      	subs	r3, #4
 8001360:	0112      	lsls	r2, r2, #4
 8001362:	b2d2      	uxtb	r2, r2
 8001364:	440b      	add	r3, r1
 8001366:	761a      	strb	r2, [r3, #24]
}
 8001368:	bf00      	nop
 800136a:	370c      	adds	r7, #12
 800136c:	46bd      	mov	sp, r7
 800136e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001372:	4770      	bx	lr
 8001374:	e000e100 	.word	0xe000e100
 8001378:	e000ed00 	.word	0xe000ed00

0800137c <NVIC_EncodePriority>:
{
 800137c:	b480      	push	{r7}
 800137e:	b089      	sub	sp, #36	; 0x24
 8001380:	af00      	add	r7, sp, #0
 8001382:	60f8      	str	r0, [r7, #12]
 8001384:	60b9      	str	r1, [r7, #8]
 8001386:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001388:	68fb      	ldr	r3, [r7, #12]
 800138a:	f003 0307 	and.w	r3, r3, #7
 800138e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001390:	69fb      	ldr	r3, [r7, #28]
 8001392:	f1c3 0307 	rsb	r3, r3, #7
 8001396:	2b04      	cmp	r3, #4
 8001398:	bf28      	it	cs
 800139a:	2304      	movcs	r3, #4
 800139c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800139e:	69fb      	ldr	r3, [r7, #28]
 80013a0:	3304      	adds	r3, #4
 80013a2:	2b06      	cmp	r3, #6
 80013a4:	d902      	bls.n	80013ac <NVIC_EncodePriority+0x30>
 80013a6:	69fb      	ldr	r3, [r7, #28]
 80013a8:	3b03      	subs	r3, #3
 80013aa:	e000      	b.n	80013ae <NVIC_EncodePriority+0x32>
 80013ac:	2300      	movs	r3, #0
 80013ae:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013b0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80013b4:	69bb      	ldr	r3, [r7, #24]
 80013b6:	fa02 f303 	lsl.w	r3, r2, r3
 80013ba:	43da      	mvns	r2, r3
 80013bc:	68bb      	ldr	r3, [r7, #8]
 80013be:	401a      	ands	r2, r3
 80013c0:	697b      	ldr	r3, [r7, #20]
 80013c2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80013c4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80013c8:	697b      	ldr	r3, [r7, #20]
 80013ca:	fa01 f303 	lsl.w	r3, r1, r3
 80013ce:	43d9      	mvns	r1, r3
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013d4:	4313      	orrs	r3, r2
}
 80013d6:	4618      	mov	r0, r3
 80013d8:	3724      	adds	r7, #36	; 0x24
 80013da:	46bd      	mov	sp, r7
 80013dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e0:	4770      	bx	lr
	...

080013e4 <SysTick_Config>:
{
 80013e4:	b580      	push	{r7, lr}
 80013e6:	b082      	sub	sp, #8
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	3b01      	subs	r3, #1
 80013f0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80013f4:	d301      	bcc.n	80013fa <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 80013f6:	2301      	movs	r3, #1
 80013f8:	e00f      	b.n	800141a <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80013fa:	4a0a      	ldr	r2, [pc, #40]	; (8001424 <SysTick_Config+0x40>)
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	3b01      	subs	r3, #1
 8001400:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001402:	210f      	movs	r1, #15
 8001404:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001408:	f7ff ff8e 	bl	8001328 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800140c:	4b05      	ldr	r3, [pc, #20]	; (8001424 <SysTick_Config+0x40>)
 800140e:	2200      	movs	r2, #0
 8001410:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001412:	4b04      	ldr	r3, [pc, #16]	; (8001424 <SysTick_Config+0x40>)
 8001414:	2207      	movs	r2, #7
 8001416:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8001418:	2300      	movs	r3, #0
}
 800141a:	4618      	mov	r0, r3
 800141c:	3708      	adds	r7, #8
 800141e:	46bd      	mov	sp, r7
 8001420:	bd80      	pop	{r7, pc}
 8001422:	bf00      	nop
 8001424:	e000e010 	.word	0xe000e010

08001428 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	b082      	sub	sp, #8
 800142c:	af00      	add	r7, sp, #0
 800142e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001430:	6878      	ldr	r0, [r7, #4]
 8001432:	f7ff ff29 	bl	8001288 <__NVIC_SetPriorityGrouping>
}
 8001436:	bf00      	nop
 8001438:	3708      	adds	r7, #8
 800143a:	46bd      	mov	sp, r7
 800143c:	bd80      	pop	{r7, pc}

0800143e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800143e:	b580      	push	{r7, lr}
 8001440:	b086      	sub	sp, #24
 8001442:	af00      	add	r7, sp, #0
 8001444:	4603      	mov	r3, r0
 8001446:	60b9      	str	r1, [r7, #8]
 8001448:	607a      	str	r2, [r7, #4]
 800144a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800144c:	f7ff ff40 	bl	80012d0 <__NVIC_GetPriorityGrouping>
 8001450:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001452:	687a      	ldr	r2, [r7, #4]
 8001454:	68b9      	ldr	r1, [r7, #8]
 8001456:	6978      	ldr	r0, [r7, #20]
 8001458:	f7ff ff90 	bl	800137c <NVIC_EncodePriority>
 800145c:	4602      	mov	r2, r0
 800145e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001462:	4611      	mov	r1, r2
 8001464:	4618      	mov	r0, r3
 8001466:	f7ff ff5f 	bl	8001328 <__NVIC_SetPriority>
}
 800146a:	bf00      	nop
 800146c:	3718      	adds	r7, #24
 800146e:	46bd      	mov	sp, r7
 8001470:	bd80      	pop	{r7, pc}

08001472 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001472:	b580      	push	{r7, lr}
 8001474:	b082      	sub	sp, #8
 8001476:	af00      	add	r7, sp, #0
 8001478:	4603      	mov	r3, r0
 800147a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800147c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001480:	4618      	mov	r0, r3
 8001482:	f7ff ff33 	bl	80012ec <__NVIC_EnableIRQ>
}
 8001486:	bf00      	nop
 8001488:	3708      	adds	r7, #8
 800148a:	46bd      	mov	sp, r7
 800148c:	bd80      	pop	{r7, pc}

0800148e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800148e:	b580      	push	{r7, lr}
 8001490:	b082      	sub	sp, #8
 8001492:	af00      	add	r7, sp, #0
 8001494:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001496:	6878      	ldr	r0, [r7, #4]
 8001498:	f7ff ffa4 	bl	80013e4 <SysTick_Config>
 800149c:	4603      	mov	r3, r0
}
 800149e:	4618      	mov	r0, r3
 80014a0:	3708      	adds	r7, #8
 80014a2:	46bd      	mov	sp, r7
 80014a4:	bd80      	pop	{r7, pc}
	...

080014a8 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	b084      	sub	sp, #16
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d101      	bne.n	80014ba <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 80014b6:	2301      	movs	r3, #1
 80014b8:	e147      	b.n	800174a <HAL_FDCAN_Init+0x2a2>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80014c0:	b2db      	uxtb	r3, r3
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d106      	bne.n	80014d4 <HAL_FDCAN_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	2200      	movs	r2, #0
 80014ca:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 80014ce:	6878      	ldr	r0, [r7, #4]
 80014d0:	f7ff fc08 	bl	8000ce4 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	699a      	ldr	r2, [r3, #24]
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	f022 0210 	bic.w	r2, r2, #16
 80014e2:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80014e4:	f7ff fea2 	bl	800122c <HAL_GetTick>
 80014e8:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80014ea:	e012      	b.n	8001512 <HAL_FDCAN_Init+0x6a>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80014ec:	f7ff fe9e 	bl	800122c <HAL_GetTick>
 80014f0:	4602      	mov	r2, r0
 80014f2:	68fb      	ldr	r3, [r7, #12]
 80014f4:	1ad3      	subs	r3, r2, r3
 80014f6:	2b0a      	cmp	r3, #10
 80014f8:	d90b      	bls.n	8001512 <HAL_FDCAN_Init+0x6a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80014fe:	f043 0201 	orr.w	r2, r3, #1
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	2203      	movs	r2, #3
 800150a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 800150e:	2301      	movs	r3, #1
 8001510:	e11b      	b.n	800174a <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	699b      	ldr	r3, [r3, #24]
 8001518:	f003 0308 	and.w	r3, r3, #8
 800151c:	2b08      	cmp	r3, #8
 800151e:	d0e5      	beq.n	80014ec <HAL_FDCAN_Init+0x44>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	699a      	ldr	r2, [r3, #24]
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	f042 0201 	orr.w	r2, r2, #1
 800152e:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001530:	f7ff fe7c 	bl	800122c <HAL_GetTick>
 8001534:	60f8      	str	r0, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8001536:	e012      	b.n	800155e <HAL_FDCAN_Init+0xb6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8001538:	f7ff fe78 	bl	800122c <HAL_GetTick>
 800153c:	4602      	mov	r2, r0
 800153e:	68fb      	ldr	r3, [r7, #12]
 8001540:	1ad3      	subs	r3, r2, r3
 8001542:	2b0a      	cmp	r3, #10
 8001544:	d90b      	bls.n	800155e <HAL_FDCAN_Init+0xb6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800154a:	f043 0201 	orr.w	r2, r3, #1
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	2203      	movs	r2, #3
 8001556:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 800155a:	2301      	movs	r3, #1
 800155c:	e0f5      	b.n	800174a <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	699b      	ldr	r3, [r3, #24]
 8001564:	f003 0301 	and.w	r3, r3, #1
 8001568:	2b00      	cmp	r3, #0
 800156a:	d0e5      	beq.n	8001538 <HAL_FDCAN_Init+0x90>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	699a      	ldr	r2, [r3, #24]
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	f042 0202 	orr.w	r2, r2, #2
 800157a:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	4a74      	ldr	r2, [pc, #464]	; (8001754 <HAL_FDCAN_Init+0x2ac>)
 8001582:	4293      	cmp	r3, r2
 8001584:	d103      	bne.n	800158e <HAL_FDCAN_Init+0xe6>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 8001586:	4a74      	ldr	r2, [pc, #464]	; (8001758 <HAL_FDCAN_Init+0x2b0>)
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	685b      	ldr	r3, [r3, #4]
 800158c:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	7c1b      	ldrb	r3, [r3, #16]
 8001592:	2b01      	cmp	r3, #1
 8001594:	d108      	bne.n	80015a8 <HAL_FDCAN_Init+0x100>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	699a      	ldr	r2, [r3, #24]
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80015a4:	619a      	str	r2, [r3, #24]
 80015a6:	e007      	b.n	80015b8 <HAL_FDCAN_Init+0x110>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	699a      	ldr	r2, [r3, #24]
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80015b6:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	7c5b      	ldrb	r3, [r3, #17]
 80015bc:	2b01      	cmp	r3, #1
 80015be:	d108      	bne.n	80015d2 <HAL_FDCAN_Init+0x12a>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	699a      	ldr	r2, [r3, #24]
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80015ce:	619a      	str	r2, [r3, #24]
 80015d0:	e007      	b.n	80015e2 <HAL_FDCAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	699a      	ldr	r2, [r3, #24]
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80015e0:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	7c9b      	ldrb	r3, [r3, #18]
 80015e6:	2b01      	cmp	r3, #1
 80015e8:	d108      	bne.n	80015fc <HAL_FDCAN_Init+0x154>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	699a      	ldr	r2, [r3, #24]
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80015f8:	619a      	str	r2, [r3, #24]
 80015fa:	e007      	b.n	800160c <HAL_FDCAN_Init+0x164>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	699a      	ldr	r2, [r3, #24]
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800160a:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	699b      	ldr	r3, [r3, #24]
 8001612:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	689a      	ldr	r2, [r3, #8]
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	430a      	orrs	r2, r1
 8001620:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	699a      	ldr	r2, [r3, #24]
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 8001630:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	691a      	ldr	r2, [r3, #16]
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	f022 0210 	bic.w	r2, r2, #16
 8001640:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	68db      	ldr	r3, [r3, #12]
 8001646:	2b01      	cmp	r3, #1
 8001648:	d108      	bne.n	800165c <HAL_FDCAN_Init+0x1b4>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	699a      	ldr	r2, [r3, #24]
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	f042 0204 	orr.w	r2, r2, #4
 8001658:	619a      	str	r2, [r3, #24]
 800165a:	e02c      	b.n	80016b6 <HAL_FDCAN_Init+0x20e>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	68db      	ldr	r3, [r3, #12]
 8001660:	2b00      	cmp	r3, #0
 8001662:	d028      	beq.n	80016b6 <HAL_FDCAN_Init+0x20e>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	68db      	ldr	r3, [r3, #12]
 8001668:	2b02      	cmp	r3, #2
 800166a:	d01c      	beq.n	80016a6 <HAL_FDCAN_Init+0x1fe>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	699a      	ldr	r2, [r3, #24]
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800167a:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	691a      	ldr	r2, [r3, #16]
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	f042 0210 	orr.w	r2, r2, #16
 800168a:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	68db      	ldr	r3, [r3, #12]
 8001690:	2b03      	cmp	r3, #3
 8001692:	d110      	bne.n	80016b6 <HAL_FDCAN_Init+0x20e>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	699a      	ldr	r2, [r3, #24]
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	f042 0220 	orr.w	r2, r2, #32
 80016a2:	619a      	str	r2, [r3, #24]
 80016a4:	e007      	b.n	80016b6 <HAL_FDCAN_Init+0x20e>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	699a      	ldr	r2, [r3, #24]
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	f042 0220 	orr.w	r2, r2, #32
 80016b4:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	699b      	ldr	r3, [r3, #24]
 80016ba:	3b01      	subs	r3, #1
 80016bc:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	69db      	ldr	r3, [r3, #28]
 80016c2:	3b01      	subs	r3, #1
 80016c4:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80016c6:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	6a1b      	ldr	r3, [r3, #32]
 80016cc:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80016ce:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	695b      	ldr	r3, [r3, #20]
 80016d6:	3b01      	subs	r3, #1
 80016d8:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80016de:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80016e0:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	689b      	ldr	r3, [r3, #8]
 80016e6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80016ea:	d115      	bne.n	8001718 <HAL_FDCAN_Init+0x270>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016f0:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016f6:	3b01      	subs	r3, #1
 80016f8:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80016fa:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001700:	3b01      	subs	r3, #1
 8001702:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8001704:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800170c:	3b01      	subs	r3, #1
 800170e:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8001714:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8001716:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	430a      	orrs	r2, r1
 800172a:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 800172e:	6878      	ldr	r0, [r7, #4]
 8001730:	f000 fc32 	bl	8001f98 <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	2200      	movs	r2, #0
 8001738:	659a      	str	r2, [r3, #88]	; 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	2200      	movs	r2, #0
 800173e:	661a      	str	r2, [r3, #96]	; 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	2201      	movs	r2, #1
 8001744:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return HAL_OK;
 8001748:	2300      	movs	r3, #0
}
 800174a:	4618      	mov	r0, r3
 800174c:	3710      	adds	r7, #16
 800174e:	46bd      	mov	sp, r7
 8001750:	bd80      	pop	{r7, pc}
 8001752:	bf00      	nop
 8001754:	40006400 	.word	0x40006400
 8001758:	40006500 	.word	0x40006500

0800175c <HAL_FDCAN_ConfigFilter>:
  * @param  sFilterConfig pointer to an FDCAN_FilterTypeDef structure that
  *         contains the filter configuration information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ConfigFilter(FDCAN_HandleTypeDef *hfdcan, FDCAN_FilterTypeDef *sFilterConfig)
{
 800175c:	b480      	push	{r7}
 800175e:	b087      	sub	sp, #28
 8001760:	af00      	add	r7, sp, #0
 8001762:	6078      	str	r0, [r7, #4]
 8001764:	6039      	str	r1, [r7, #0]
  uint32_t FilterElementW1;
  uint32_t FilterElementW2;
  uint32_t *FilterAddress;
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800176c:	75fb      	strb	r3, [r7, #23]

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 800176e:	7dfb      	ldrb	r3, [r7, #23]
 8001770:	2b01      	cmp	r3, #1
 8001772:	d002      	beq.n	800177a <HAL_FDCAN_ConfigFilter+0x1e>
 8001774:	7dfb      	ldrb	r3, [r7, #23]
 8001776:	2b02      	cmp	r3, #2
 8001778:	d13d      	bne.n	80017f6 <HAL_FDCAN_ConfigFilter+0x9a>
  {
    /* Check function parameters */
    assert_param(IS_FDCAN_ID_TYPE(sFilterConfig->IdType));
    assert_param(IS_FDCAN_FILTER_CFG(sFilterConfig->FilterConfig));

    if (sFilterConfig->IdType == FDCAN_STANDARD_ID)
 800177a:	683b      	ldr	r3, [r7, #0]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	2b00      	cmp	r3, #0
 8001780:	d119      	bne.n	80017b6 <HAL_FDCAN_ConfigFilter+0x5a>
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID1, 0x7FFU));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x7FFU));
      assert_param(IS_FDCAN_STD_FILTER_TYPE(sFilterConfig->FilterType));

      /* Build filter element */
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8001782:	683b      	ldr	r3, [r7, #0]
 8001784:	689b      	ldr	r3, [r3, #8]
 8001786:	079a      	lsls	r2, r3, #30
                         (sFilterConfig->FilterConfig << 27U) |
 8001788:	683b      	ldr	r3, [r7, #0]
 800178a:	68db      	ldr	r3, [r3, #12]
 800178c:	06db      	lsls	r3, r3, #27
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 800178e:	431a      	orrs	r2, r3
                         (sFilterConfig->FilterID1 << 16U)    |
 8001790:	683b      	ldr	r3, [r7, #0]
 8001792:	691b      	ldr	r3, [r3, #16]
 8001794:	041b      	lsls	r3, r3, #16
                         (sFilterConfig->FilterConfig << 27U) |
 8001796:	431a      	orrs	r2, r3
                         sFilterConfig->FilterID2);
 8001798:	683b      	ldr	r3, [r7, #0]
 800179a:	695b      	ldr	r3, [r3, #20]
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 800179c:	4313      	orrs	r3, r2
 800179e:	613b      	str	r3, [r7, #16]

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.StandardFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLS_SIZE));
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80017a4:	683b      	ldr	r3, [r7, #0]
 80017a6:	685b      	ldr	r3, [r3, #4]
 80017a8:	009b      	lsls	r3, r3, #2
 80017aa:	4413      	add	r3, r2
 80017ac:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 80017ae:	68bb      	ldr	r3, [r7, #8]
 80017b0:	693a      	ldr	r2, [r7, #16]
 80017b2:	601a      	str	r2, [r3, #0]
 80017b4:	e01d      	b.n	80017f2 <HAL_FDCAN_ConfigFilter+0x96>
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID1, 0x1FFFFFFFU));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x1FFFFFFFU));
      assert_param(IS_FDCAN_EXT_FILTER_TYPE(sFilterConfig->FilterType));

      /* Build first word of filter element */
      FilterElementW1 = ((sFilterConfig->FilterConfig << 29U) | sFilterConfig->FilterID1);
 80017b6:	683b      	ldr	r3, [r7, #0]
 80017b8:	68db      	ldr	r3, [r3, #12]
 80017ba:	075a      	lsls	r2, r3, #29
 80017bc:	683b      	ldr	r3, [r7, #0]
 80017be:	691b      	ldr	r3, [r3, #16]
 80017c0:	4313      	orrs	r3, r2
 80017c2:	613b      	str	r3, [r7, #16]

      /* Build second word of filter element */
      FilterElementW2 = ((sFilterConfig->FilterType << 30U) | sFilterConfig->FilterID2);
 80017c4:	683b      	ldr	r3, [r7, #0]
 80017c6:	689b      	ldr	r3, [r3, #8]
 80017c8:	079a      	lsls	r2, r3, #30
 80017ca:	683b      	ldr	r3, [r7, #0]
 80017cc:	695b      	ldr	r3, [r3, #20]
 80017ce:	4313      	orrs	r3, r2
 80017d0:	60fb      	str	r3, [r7, #12]

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.ExtendedFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLE_SIZE));
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80017d6:	683b      	ldr	r3, [r7, #0]
 80017d8:	685b      	ldr	r3, [r3, #4]
 80017da:	00db      	lsls	r3, r3, #3
 80017dc:	4413      	add	r3, r2
 80017de:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 80017e0:	68bb      	ldr	r3, [r7, #8]
 80017e2:	693a      	ldr	r2, [r7, #16]
 80017e4:	601a      	str	r2, [r3, #0]
      FilterAddress++;
 80017e6:	68bb      	ldr	r3, [r7, #8]
 80017e8:	3304      	adds	r3, #4
 80017ea:	60bb      	str	r3, [r7, #8]
      *FilterAddress = FilterElementW2;
 80017ec:	68bb      	ldr	r3, [r7, #8]
 80017ee:	68fa      	ldr	r2, [r7, #12]
 80017f0:	601a      	str	r2, [r3, #0]
    }

    /* Return function status */
    return HAL_OK;
 80017f2:	2300      	movs	r3, #0
 80017f4:	e006      	b.n	8001804 <HAL_FDCAN_ConfigFilter+0xa8>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80017fa:	f043 0202 	orr.w	r2, r3, #2
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8001802:	2301      	movs	r3, #1
  }
}
 8001804:	4618      	mov	r0, r3
 8001806:	371c      	adds	r7, #28
 8001808:	46bd      	mov	sp, r7
 800180a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800180e:	4770      	bx	lr

08001810 <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 8001810:	b480      	push	{r7}
 8001812:	b083      	sub	sp, #12
 8001814:	af00      	add	r7, sp, #0
 8001816:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800181e:	b2db      	uxtb	r3, r3
 8001820:	2b01      	cmp	r3, #1
 8001822:	d110      	bne.n	8001846 <HAL_FDCAN_Start+0x36>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	2202      	movs	r2, #2
 8001828:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	699a      	ldr	r2, [r3, #24]
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	f022 0201 	bic.w	r2, r2, #1
 800183a:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	2200      	movs	r2, #0
 8001840:	661a      	str	r2, [r3, #96]	; 0x60

    /* Return function status */
    return HAL_OK;
 8001842:	2300      	movs	r3, #0
 8001844:	e006      	b.n	8001854 <HAL_FDCAN_Start+0x44>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800184a:	f043 0204 	orr.w	r2, r3, #4
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8001852:	2301      	movs	r3, #1
  }
}
 8001854:	4618      	mov	r0, r3
 8001856:	370c      	adds	r7, #12
 8001858:	46bd      	mov	sp, r7
 800185a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185e:	4770      	bx	lr

08001860 <HAL_FDCAN_AddMessageToTxFifoQ>:
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_AddMessageToTxFifoQ(FDCAN_HandleTypeDef *hfdcan, FDCAN_TxHeaderTypeDef *pTxHeader,
                                                uint8_t *pTxData)
{
 8001860:	b580      	push	{r7, lr}
 8001862:	b086      	sub	sp, #24
 8001864:	af00      	add	r7, sp, #0
 8001866:	60f8      	str	r0, [r7, #12]
 8001868:	60b9      	str	r1, [r7, #8]
 800186a:	607a      	str	r2, [r7, #4]
  assert_param(IS_FDCAN_BRS(pTxHeader->BitRateSwitch));
  assert_param(IS_FDCAN_FDF(pTxHeader->FDFormat));
  assert_param(IS_FDCAN_EFC(pTxHeader->TxEventFifoControl));
  assert_param(IS_FDCAN_MAX_VALUE(pTxHeader->MessageMarker, 0xFFU));

  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8001872:	b2db      	uxtb	r3, r3
 8001874:	2b02      	cmp	r3, #2
 8001876:	d12c      	bne.n	80018d2 <HAL_FDCAN_AddMessageToTxFifoQ+0x72>
  {
    /* Check that the Tx FIFO/Queue is not full */
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8001880:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001884:	2b00      	cmp	r3, #0
 8001886:	d007      	beq.n	8001898 <HAL_FDCAN_AddMessageToTxFifoQ+0x38>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800188c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001890:	68fb      	ldr	r3, [r7, #12]
 8001892:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 8001894:	2301      	movs	r3, #1
 8001896:	e023      	b.n	80018e0 <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
    }
    else
    {
      /* Retrieve the Tx FIFO PutIndex */
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 80018a0:	0c1b      	lsrs	r3, r3, #16
 80018a2:	f003 0303 	and.w	r3, r3, #3
 80018a6:	617b      	str	r3, [r7, #20]

      /* Add the message to the Tx FIFO/Queue */
      FDCAN_CopyMessageToRAM(hfdcan, pTxHeader, pTxData, PutIndex);
 80018a8:	697b      	ldr	r3, [r7, #20]
 80018aa:	687a      	ldr	r2, [r7, #4]
 80018ac:	68b9      	ldr	r1, [r7, #8]
 80018ae:	68f8      	ldr	r0, [r7, #12]
 80018b0:	f000 fbde 	bl	8002070 <FDCAN_CopyMessageToRAM>

      /* Activate the corresponding transmission request */
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	2101      	movs	r1, #1
 80018ba:	697a      	ldr	r2, [r7, #20]
 80018bc:	fa01 f202 	lsl.w	r2, r1, r2
 80018c0:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc

      /* Store the Latest Tx FIFO/Queue Request Buffer Index */
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 80018c4:	2201      	movs	r2, #1
 80018c6:	697b      	ldr	r3, [r7, #20]
 80018c8:	409a      	lsls	r2, r3
 80018ca:	68fb      	ldr	r3, [r7, #12]
 80018cc:	659a      	str	r2, [r3, #88]	; 0x58
    }

    /* Return function status */
    return HAL_OK;
 80018ce:	2300      	movs	r3, #0
 80018d0:	e006      	b.n	80018e0 <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 80018d2:	68fb      	ldr	r3, [r7, #12]
 80018d4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80018d6:	f043 0208 	orr.w	r2, r3, #8
 80018da:	68fb      	ldr	r3, [r7, #12]
 80018dc:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 80018de:	2301      	movs	r3, #1
  }
}
 80018e0:	4618      	mov	r0, r3
 80018e2:	3718      	adds	r7, #24
 80018e4:	46bd      	mov	sp, r7
 80018e6:	bd80      	pop	{r7, pc}

080018e8 <HAL_FDCAN_GetRxMessage>:
  * @param  pRxData pointer to a buffer where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation,
                                         FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
 80018e8:	b480      	push	{r7}
 80018ea:	b08b      	sub	sp, #44	; 0x2c
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	60f8      	str	r0, [r7, #12]
 80018f0:	60b9      	str	r1, [r7, #8]
 80018f2:	607a      	str	r2, [r7, #4]
 80018f4:	603b      	str	r3, [r7, #0]
  uint32_t *RxAddress;
  uint8_t  *pData;
  uint32_t ByteCounter;
  uint32_t GetIndex;
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 80018f6:	68fb      	ldr	r3, [r7, #12]
 80018f8:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80018fc:	76fb      	strb	r3, [r7, #27]

  /* Check function parameters */
  assert_param(IS_FDCAN_RX_FIFO(RxLocation));

  if (state == HAL_FDCAN_STATE_BUSY)
 80018fe:	7efb      	ldrb	r3, [r7, #27]
 8001900:	2b02      	cmp	r3, #2
 8001902:	f040 80bc 	bne.w	8001a7e <HAL_FDCAN_GetRxMessage+0x196>
  {
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8001906:	68bb      	ldr	r3, [r7, #8]
 8001908:	2b40      	cmp	r3, #64	; 0x40
 800190a:	d121      	bne.n	8001950 <HAL_FDCAN_GetRxMessage+0x68>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001914:	f003 030f 	and.w	r3, r3, #15
 8001918:	2b00      	cmp	r3, #0
 800191a:	d107      	bne.n	800192c <HAL_FDCAN_GetRxMessage+0x44>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001920:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	661a      	str	r2, [r3, #96]	; 0x60

        return HAL_ERROR;
 8001928:	2301      	movs	r3, #1
 800192a:	e0af      	b.n	8001a8c <HAL_FDCAN_GetRxMessage+0x1a4>
      }
      else
      {
        /* Calculate Rx FIFO 0 element address */
        GetIndex = ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 800192c:	68fb      	ldr	r3, [r7, #12]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001934:	0a1b      	lsrs	r3, r3, #8
 8001936:	f003 0303 	and.w	r3, r3, #3
 800193a:	61fb      	str	r3, [r7, #28]
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * SRAMCAN_RF0_SIZE));
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	6c99      	ldr	r1, [r3, #72]	; 0x48
 8001940:	69fa      	ldr	r2, [r7, #28]
 8001942:	4613      	mov	r3, r2
 8001944:	00db      	lsls	r3, r3, #3
 8001946:	4413      	add	r3, r2
 8001948:	00db      	lsls	r3, r3, #3
 800194a:	440b      	add	r3, r1
 800194c:	627b      	str	r3, [r7, #36]	; 0x24
 800194e:	e020      	b.n	8001992 <HAL_FDCAN_GetRxMessage+0xaa>
      }
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001958:	f003 030f 	and.w	r3, r3, #15
 800195c:	2b00      	cmp	r3, #0
 800195e:	d107      	bne.n	8001970 <HAL_FDCAN_GetRxMessage+0x88>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001964:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	661a      	str	r2, [r3, #96]	; 0x60

        return HAL_ERROR;
 800196c:	2301      	movs	r3, #1
 800196e:	e08d      	b.n	8001a8c <HAL_FDCAN_GetRxMessage+0x1a4>
      }
      else
      {
        /* Calculate Rx FIFO 1 element address */
        GetIndex = ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001978:	0a1b      	lsrs	r3, r3, #8
 800197a:	f003 0303 	and.w	r3, r3, #3
 800197e:	61fb      	str	r3, [r7, #28]
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * SRAMCAN_RF1_SIZE));
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8001984:	69fa      	ldr	r2, [r7, #28]
 8001986:	4613      	mov	r3, r2
 8001988:	00db      	lsls	r3, r3, #3
 800198a:	4413      	add	r3, r2
 800198c:	00db      	lsls	r3, r3, #3
 800198e:	440b      	add	r3, r1
 8001990:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }

    /* Retrieve IdType */
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 8001992:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	f003 4280 	and.w	r2, r3, #1073741824	; 0x40000000
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	685b      	ldr	r3, [r3, #4]
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d107      	bne.n	80019b6 <HAL_FDCAN_GetRxMessage+0xce>
    {
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18U);
 80019a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	0c9b      	lsrs	r3, r3, #18
 80019ac:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	601a      	str	r2, [r3, #0]
 80019b4:	e005      	b.n	80019c2 <HAL_FDCAN_GetRxMessage+0xda>
    }
    else /* Extended ID element */
    {
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 80019b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve RxFrameType */
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 80019c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	f003 5200 	and.w	r2, r3, #536870912	; 0x20000000
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 80019ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	611a      	str	r2, [r3, #16]

    /* Increment RxAddress pointer to second word of Rx FIFO element */
    RxAddress++;
 80019da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019dc:	3304      	adds	r3, #4
 80019de:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 80019e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	b29a      	uxth	r2, r3
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pRxHeader->DataLength = (*RxAddress & FDCAN_ELEMENT_MASK_DLC);
 80019ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	f403 2270 	and.w	r2, r3, #983040	; 0xf0000
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 80019f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	f403 1280 	and.w	r2, r3, #1048576	; 0x100000
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 8001a02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	f403 1200 	and.w	r2, r3, #2097152	; 0x200000
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	619a      	str	r2, [r3, #24]

    /* Retrieve FilterIndex */
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24U);
 8001a0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	0e1b      	lsrs	r3, r3, #24
 8001a14:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	621a      	str	r2, [r3, #32]

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31U);
 8001a1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	0fda      	lsrs	r2, r3, #31
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	625a      	str	r2, [r3, #36]	; 0x24

    /* Increment RxAddress pointer to payload of Rx FIFO element */
    RxAddress++;
 8001a26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a28:	3304      	adds	r3, #4
 8001a2a:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve Rx payload */
    pData = (uint8_t *)RxAddress;
 8001a2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a2e:	617b      	str	r3, [r7, #20]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16U]; ByteCounter++)
 8001a30:	2300      	movs	r3, #0
 8001a32:	623b      	str	r3, [r7, #32]
 8001a34:	e00a      	b.n	8001a4c <HAL_FDCAN_GetRxMessage+0x164>
    {
      pRxData[ByteCounter] = pData[ByteCounter];
 8001a36:	697a      	ldr	r2, [r7, #20]
 8001a38:	6a3b      	ldr	r3, [r7, #32]
 8001a3a:	441a      	add	r2, r3
 8001a3c:	6839      	ldr	r1, [r7, #0]
 8001a3e:	6a3b      	ldr	r3, [r7, #32]
 8001a40:	440b      	add	r3, r1
 8001a42:	7812      	ldrb	r2, [r2, #0]
 8001a44:	701a      	strb	r2, [r3, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16U]; ByteCounter++)
 8001a46:	6a3b      	ldr	r3, [r7, #32]
 8001a48:	3301      	adds	r3, #1
 8001a4a:	623b      	str	r3, [r7, #32]
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	68db      	ldr	r3, [r3, #12]
 8001a50:	0c1b      	lsrs	r3, r3, #16
 8001a52:	4a11      	ldr	r2, [pc, #68]	; (8001a98 <HAL_FDCAN_GetRxMessage+0x1b0>)
 8001a54:	5cd3      	ldrb	r3, [r2, r3]
 8001a56:	461a      	mov	r2, r3
 8001a58:	6a3b      	ldr	r3, [r7, #32]
 8001a5a:	4293      	cmp	r3, r2
 8001a5c:	d3eb      	bcc.n	8001a36 <HAL_FDCAN_GetRxMessage+0x14e>
    }

    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8001a5e:	68bb      	ldr	r3, [r7, #8]
 8001a60:	2b40      	cmp	r3, #64	; 0x40
 8001a62:	d105      	bne.n	8001a70 <HAL_FDCAN_GetRxMessage+0x188>
    {
      /* Acknowledge the Rx FIFO 0 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF0A = GetIndex;
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	69fa      	ldr	r2, [r7, #28]
 8001a6a:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
 8001a6e:	e004      	b.n	8001a7a <HAL_FDCAN_GetRxMessage+0x192>
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Acknowledge the Rx FIFO 1 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF1A = GetIndex;
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	69fa      	ldr	r2, [r7, #28]
 8001a76:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
    }

    /* Return function status */
    return HAL_OK;
 8001a7a:	2300      	movs	r3, #0
 8001a7c:	e006      	b.n	8001a8c <HAL_FDCAN_GetRxMessage+0x1a4>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8001a7e:	68fb      	ldr	r3, [r7, #12]
 8001a80:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a82:	f043 0208 	orr.w	r2, r3, #8
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8001a8a:	2301      	movs	r3, #1
  }
}
 8001a8c:	4618      	mov	r0, r3
 8001a8e:	372c      	adds	r7, #44	; 0x2c
 8001a90:	46bd      	mov	sp, r7
 8001a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a96:	4770      	bx	lr
 8001a98:	08005260 	.word	0x08005260

08001a9c <HAL_FDCAN_ActivateNotification>:
  *           - FDCAN_IT_TX_ABORT_COMPLETE
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ActivateNotification(FDCAN_HandleTypeDef *hfdcan, uint32_t ActiveITs,
                                                 uint32_t BufferIndexes)
{
 8001a9c:	b480      	push	{r7}
 8001a9e:	b087      	sub	sp, #28
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	60f8      	str	r0, [r7, #12]
 8001aa4:	60b9      	str	r1, [r7, #8]
 8001aa6:	607a      	str	r2, [r7, #4]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8001aae:	75fb      	strb	r3, [r7, #23]
  if ((ActiveITs & (FDCAN_IT_TX_COMPLETE | FDCAN_IT_TX_ABORT_COMPLETE)) != 0U)
  {
    assert_param(IS_FDCAN_TX_LOCATION_LIST(BufferIndexes));
  }

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8001ab0:	7dfb      	ldrb	r3, [r7, #23]
 8001ab2:	2b01      	cmp	r3, #1
 8001ab4:	d003      	beq.n	8001abe <HAL_FDCAN_ActivateNotification+0x22>
 8001ab6:	7dfb      	ldrb	r3, [r7, #23]
 8001ab8:	2b02      	cmp	r3, #2
 8001aba:	f040 80c8 	bne.w	8001c4e <HAL_FDCAN_ActivateNotification+0x1b2>
  {
    /* Get interrupts line selection */
    ITs_lines_selection = hfdcan->Instance->ILS;
 8001abe:	68fb      	ldr	r3, [r7, #12]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ac4:	613b      	str	r3, [r7, #16]

    /* Enable Interrupt lines */
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0) != 0U)
 8001ac6:	68bb      	ldr	r3, [r7, #8]
 8001ac8:	f003 0307 	and.w	r3, r3, #7
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d004      	beq.n	8001ada <HAL_FDCAN_ActivateNotification+0x3e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 8001ad0:	693b      	ldr	r3, [r7, #16]
 8001ad2:	f003 0301 	and.w	r3, r3, #1
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d03b      	beq.n	8001b52 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U)
 8001ada:	68bb      	ldr	r3, [r7, #8]
 8001adc:	f003 0338 	and.w	r3, r3, #56	; 0x38
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d004      	beq.n	8001aee <HAL_FDCAN_ActivateNotification+0x52>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 8001ae4:	693b      	ldr	r3, [r7, #16]
 8001ae6:	f003 0302 	and.w	r3, r3, #2
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d031      	beq.n	8001b52 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U)
 8001aee:	68bb      	ldr	r3, [r7, #8]
 8001af0:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d004      	beq.n	8001b02 <HAL_FDCAN_ActivateNotification+0x66>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 8001af8:	693b      	ldr	r3, [r7, #16]
 8001afa:	f003 0304 	and.w	r3, r3, #4
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d027      	beq.n	8001b52 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U)
 8001b02:	68bb      	ldr	r3, [r7, #8]
 8001b04:	f403 53f0 	and.w	r3, r3, #7680	; 0x1e00
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d004      	beq.n	8001b16 <HAL_FDCAN_ActivateNotification+0x7a>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 8001b0c:	693b      	ldr	r3, [r7, #16]
 8001b0e:	f003 0308 	and.w	r3, r3, #8
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d01d      	beq.n	8001b52 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U)
 8001b16:	68bb      	ldr	r3, [r7, #8]
 8001b18:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d004      	beq.n	8001b2a <HAL_FDCAN_ActivateNotification+0x8e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 8001b20:	693b      	ldr	r3, [r7, #16]
 8001b22:	f003 0310 	and.w	r3, r3, #16
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d013      	beq.n	8001b52 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U)
 8001b2a:	68bb      	ldr	r3, [r7, #8]
 8001b2c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d004      	beq.n	8001b3e <HAL_FDCAN_ActivateNotification+0xa2>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 8001b34:	693b      	ldr	r3, [r7, #16]
 8001b36:	f003 0320 	and.w	r3, r3, #32
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d009      	beq.n	8001b52 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U)
 8001b3e:	68bb      	ldr	r3, [r7, #8]
 8001b40:	f403 037c 	and.w	r3, r3, #16515072	; 0xfc0000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d00c      	beq.n	8001b62 <HAL_FDCAN_ActivateNotification+0xc6>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) == 0U)))
 8001b48:	693b      	ldr	r3, [r7, #16]
 8001b4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d107      	bne.n	8001b62 <HAL_FDCAN_ActivateNotification+0xc6>
    {
      /* Enable Interrupt line 0 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	f042 0201 	orr.w	r2, r2, #1
 8001b60:	65da      	str	r2, [r3, #92]	; 0x5c
    }
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0)       != 0U)
 8001b62:	68bb      	ldr	r3, [r7, #8]
 8001b64:	f003 0307 	and.w	r3, r3, #7
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d004      	beq.n	8001b76 <HAL_FDCAN_ActivateNotification+0xda>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 8001b6c:	693b      	ldr	r3, [r7, #16]
 8001b6e:	f003 0301 	and.w	r3, r3, #1
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d13b      	bne.n	8001bee <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U)
 8001b76:	68bb      	ldr	r3, [r7, #8]
 8001b78:	f003 0338 	and.w	r3, r3, #56	; 0x38
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d004      	beq.n	8001b8a <HAL_FDCAN_ActivateNotification+0xee>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 8001b80:	693b      	ldr	r3, [r7, #16]
 8001b82:	f003 0302 	and.w	r3, r3, #2
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d131      	bne.n	8001bee <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U)
 8001b8a:	68bb      	ldr	r3, [r7, #8]
 8001b8c:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d004      	beq.n	8001b9e <HAL_FDCAN_ActivateNotification+0x102>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 8001b94:	693b      	ldr	r3, [r7, #16]
 8001b96:	f003 0304 	and.w	r3, r3, #4
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d127      	bne.n	8001bee <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U)
 8001b9e:	68bb      	ldr	r3, [r7, #8]
 8001ba0:	f403 53f0 	and.w	r3, r3, #7680	; 0x1e00
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d004      	beq.n	8001bb2 <HAL_FDCAN_ActivateNotification+0x116>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 8001ba8:	693b      	ldr	r3, [r7, #16]
 8001baa:	f003 0308 	and.w	r3, r3, #8
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d11d      	bne.n	8001bee <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U)
 8001bb2:	68bb      	ldr	r3, [r7, #8]
 8001bb4:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d004      	beq.n	8001bc6 <HAL_FDCAN_ActivateNotification+0x12a>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 8001bbc:	693b      	ldr	r3, [r7, #16]
 8001bbe:	f003 0310 	and.w	r3, r3, #16
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d113      	bne.n	8001bee <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U)
 8001bc6:	68bb      	ldr	r3, [r7, #8]
 8001bc8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d004      	beq.n	8001bda <HAL_FDCAN_ActivateNotification+0x13e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 8001bd0:	693b      	ldr	r3, [r7, #16]
 8001bd2:	f003 0320 	and.w	r3, r3, #32
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d109      	bne.n	8001bee <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U)
 8001bda:	68bb      	ldr	r3, [r7, #8]
 8001bdc:	f403 037c 	and.w	r3, r3, #16515072	; 0xfc0000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d00c      	beq.n	8001bfe <HAL_FDCAN_ActivateNotification+0x162>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) != 0U)))
 8001be4:	693b      	ldr	r3, [r7, #16]
 8001be6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d007      	beq.n	8001bfe <HAL_FDCAN_ActivateNotification+0x162>
    {
      /* Enable Interrupt line 1 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	f042 0202 	orr.w	r2, r2, #2
 8001bfc:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 8001bfe:	68bb      	ldr	r3, [r7, #8]
 8001c00:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d009      	beq.n	8001c1c <HAL_FDCAN_ActivateNotification+0x180>
    {
      /* Enable Tx Buffer Transmission Interrupt to set TC flag in IR register,
         but interrupt will only occur if TC is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	f8d3 10dc 	ldr.w	r1, [r3, #220]	; 0xdc
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	687a      	ldr	r2, [r7, #4]
 8001c16:	430a      	orrs	r2, r1
 8001c18:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
    }

    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 8001c1c:	68bb      	ldr	r3, [r7, #8]
 8001c1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d009      	beq.n	8001c3a <HAL_FDCAN_ActivateNotification+0x19e>
    {
      /* Enable Tx Buffer Cancellation Finished Interrupt to set TCF flag in IR register,
         but interrupt will only occur if TCF is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	f8d3 10e0 	ldr.w	r1, [r3, #224]	; 0xe0
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	687a      	ldr	r2, [r7, #4]
 8001c34:	430a      	orrs	r2, r1
 8001c36:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    }

    /* Enable the selected interrupts */
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	68ba      	ldr	r2, [r7, #8]
 8001c46:	430a      	orrs	r2, r1
 8001c48:	655a      	str	r2, [r3, #84]	; 0x54

    /* Return function status */
    return HAL_OK;
 8001c4a:	2300      	movs	r3, #0
 8001c4c:	e006      	b.n	8001c5c <HAL_FDCAN_ActivateNotification+0x1c0>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c52:	f043 0202 	orr.w	r2, r3, #2
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8001c5a:	2301      	movs	r3, #1
  }
}
 8001c5c:	4618      	mov	r0, r3
 8001c5e:	371c      	adds	r7, #28
 8001c60:	46bd      	mov	sp, r7
 8001c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c66:	4770      	bx	lr

08001c68 <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	b08a      	sub	sp, #40	; 0x28
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	6078      	str	r0, [r7, #4]
  uint32_t Errors;
  uint32_t ErrorStatusITs;
  uint32_t TransmittedBuffers;
  uint32_t AbortedBuffers;

  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001c76:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 8001c7a:	627b      	str	r3, [r7, #36]	; 0x24
  TxEventFifoITs &= hfdcan->Instance->IE;
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c82:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c84:	4013      	ands	r3, r2
 8001c86:	627b      	str	r3, [r7, #36]	; 0x24
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001c8e:	f003 0307 	and.w	r3, r3, #7
 8001c92:	623b      	str	r3, [r7, #32]
  RxFifo0ITs &= hfdcan->Instance->IE;
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c9a:	6a3a      	ldr	r2, [r7, #32]
 8001c9c:	4013      	ands	r3, r2
 8001c9e:	623b      	str	r3, [r7, #32]
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001ca6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001caa:	61fb      	str	r3, [r7, #28]
  RxFifo1ITs &= hfdcan->Instance->IE;
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001cb2:	69fa      	ldr	r2, [r7, #28]
 8001cb4:	4013      	ands	r3, r2
 8001cb6:	61fb      	str	r3, [r7, #28]
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001cbe:	f403 0371 	and.w	r3, r3, #15794176	; 0xf10000
 8001cc2:	61bb      	str	r3, [r7, #24]
  Errors &= hfdcan->Instance->IE;
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001cca:	69ba      	ldr	r2, [r7, #24]
 8001ccc:	4013      	ands	r3, r2
 8001cce:	61bb      	str	r3, [r7, #24]
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001cd6:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8001cda:	617b      	str	r3, [r7, #20]
  ErrorStatusITs &= hfdcan->Instance->IE;
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ce2:	697a      	ldr	r2, [r7, #20]
 8001ce4:	4013      	ands	r3, r2
 8001ce6:	617b      	str	r3, [r7, #20]

  /* High Priority Message interrupt management *******************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != 0U)
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001cee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d00d      	beq.n	8001d12 <HAL_FDCAN_IRQHandler+0xaa>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != 0U)
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001cfc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d006      	beq.n	8001d12 <HAL_FDCAN_IRQHandler+0xaa>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	2240      	movs	r2, #64	; 0x40
 8001d0a:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 8001d0c:	6878      	ldr	r0, [r7, #4]
 8001d0e:	f000 f923 	bl	8001f58 <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE) != 0U)
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001d18:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d01b      	beq.n	8001d58 <HAL_FDCAN_IRQHandler+0xf0>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d014      	beq.n	8001d58 <HAL_FDCAN_IRQHandler+0xf0>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001d36:	613b      	str	r3, [r7, #16]
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d40:	693a      	ldr	r2, [r7, #16]
 8001d42:	4013      	ands	r3, r2
 8001d44:	613b      	str	r3, [r7, #16]

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001d4e:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 8001d50:	6939      	ldr	r1, [r7, #16]
 8001d52:	6878      	ldr	r0, [r7, #4]
 8001d54:	f000 f8e1 	bl	8001f1a <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 8001d58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d007      	beq.n	8001d6e <HAL_FDCAN_IRQHandler+0x106>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d64:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 8001d66:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001d68:	6878      	ldr	r0, [r7, #4]
 8001d6a:	f000 f8b6 	bl	8001eda <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 8001d6e:	6a3b      	ldr	r3, [r7, #32]
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d007      	beq.n	8001d84 <HAL_FDCAN_IRQHandler+0x11c>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	6a3a      	ldr	r2, [r7, #32]
 8001d7a:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 8001d7c:	6a39      	ldr	r1, [r7, #32]
 8001d7e:	6878      	ldr	r0, [r7, #4]
 8001d80:	f7fe fc48 	bl	8000614 <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 8001d84:	69fb      	ldr	r3, [r7, #28]
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d007      	beq.n	8001d9a <HAL_FDCAN_IRQHandler+0x132>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	69fa      	ldr	r2, [r7, #28]
 8001d90:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 8001d92:	69f9      	ldr	r1, [r7, #28]
 8001d94:	6878      	ldr	r0, [r7, #4]
 8001d96:	f7fe fca1 	bl	80006dc <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY) != 0U)
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001da0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d00e      	beq.n	8001dc6 <HAL_FDCAN_IRQHandler+0x15e>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_FIFO_EMPTY) != 0U)
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001dae:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d007      	beq.n	8001dc6 <HAL_FDCAN_IRQHandler+0x15e>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001dbe:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 8001dc0:	6878      	ldr	r0, [r7, #4]
 8001dc2:	f000 f895 	bl	8001ef0 <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE) != 0U)
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001dcc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d01a      	beq.n	8001e0a <HAL_FDCAN_IRQHandler+0x1a2>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_COMPLETE) != 0U)
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001dda:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d013      	beq.n	8001e0a <HAL_FDCAN_IRQHandler+0x1a2>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8001dea:	60fb      	str	r3, [r7, #12]
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8001df4:	68fa      	ldr	r2, [r7, #12]
 8001df6:	4013      	ands	r3, r2
 8001df8:	60fb      	str	r3, [r7, #12]

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	2280      	movs	r2, #128	; 0x80
 8001e00:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 8001e02:	68f9      	ldr	r1, [r7, #12]
 8001e04:	6878      	ldr	r0, [r7, #4]
 8001e06:	f000 f87d 	bl	8001f04 <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != 0U)
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001e10:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d00e      	beq.n	8001e36 <HAL_FDCAN_IRQHandler+0x1ce>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TIMESTAMP_WRAPAROUND) != 0U)
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e1e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d007      	beq.n	8001e36 <HAL_FDCAN_IRQHandler+0x1ce>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001e2e:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 8001e30:	6878      	ldr	r0, [r7, #4]
 8001e32:	f000 f87d 	bl	8001f30 <HAL_FDCAN_TimestampWraparoundCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED) != 0U)
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001e3c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d00e      	beq.n	8001e62 <HAL_FDCAN_IRQHandler+0x1fa>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TIMEOUT_OCCURRED) != 0U)
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e4a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d007      	beq.n	8001e62 <HAL_FDCAN_IRQHandler+0x1fa>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001e5a:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 8001e5c:	6878      	ldr	r0, [r7, #4]
 8001e5e:	f000 f871 	bl	8001f44 <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE) != 0U)
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001e68:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d011      	beq.n	8001e94 <HAL_FDCAN_IRQHandler+0x22c>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_RAM_ACCESS_FAILURE) != 0U)
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e76:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d00a      	beq.n	8001e94 <HAL_FDCAN_IRQHandler+0x22c>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001e86:	651a      	str	r2, [r3, #80]	; 0x50

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e8c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	661a      	str	r2, [r3, #96]	; 0x60
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 8001e94:	697b      	ldr	r3, [r7, #20]
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d007      	beq.n	8001eaa <HAL_FDCAN_IRQHandler+0x242>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	697a      	ldr	r2, [r7, #20]
 8001ea0:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 8001ea2:	6979      	ldr	r1, [r7, #20]
 8001ea4:	6878      	ldr	r0, [r7, #4]
 8001ea6:	f000 f86b 	bl	8001f80 <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 8001eaa:	69bb      	ldr	r3, [r7, #24]
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d009      	beq.n	8001ec4 <HAL_FDCAN_IRQHandler+0x25c>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	69ba      	ldr	r2, [r7, #24]
 8001eb6:	651a      	str	r2, [r3, #80]	; 0x50

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001ebc:	69bb      	ldr	r3, [r7, #24]
 8001ebe:	431a      	orrs	r2, r3
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	661a      	str	r2, [r3, #96]	; 0x60
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d002      	beq.n	8001ed2 <HAL_FDCAN_IRQHandler+0x26a>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 8001ecc:	6878      	ldr	r0, [r7, #4]
 8001ece:	f000 f84d 	bl	8001f6c <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 8001ed2:	bf00      	nop
 8001ed4:	3728      	adds	r7, #40	; 0x28
 8001ed6:	46bd      	mov	sp, r7
 8001ed8:	bd80      	pop	{r7, pc}

08001eda <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signalled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 8001eda:	b480      	push	{r7}
 8001edc:	b083      	sub	sp, #12
 8001ede:	af00      	add	r7, sp, #0
 8001ee0:	6078      	str	r0, [r7, #4]
 8001ee2:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 8001ee4:	bf00      	nop
 8001ee6:	370c      	adds	r7, #12
 8001ee8:	46bd      	mov	sp, r7
 8001eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eee:	4770      	bx	lr

08001ef0 <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8001ef0:	b480      	push	{r7}
 8001ef2:	b083      	sub	sp, #12
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 8001ef8:	bf00      	nop
 8001efa:	370c      	adds	r7, #12
 8001efc:	46bd      	mov	sp, r7
 8001efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f02:	4770      	bx	lr

08001f04 <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8001f04:	b480      	push	{r7}
 8001f06:	b083      	sub	sp, #12
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	6078      	str	r0, [r7, #4]
 8001f0c:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 8001f0e:	bf00      	nop
 8001f10:	370c      	adds	r7, #12
 8001f12:	46bd      	mov	sp, r7
 8001f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f18:	4770      	bx	lr

08001f1a <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8001f1a:	b480      	push	{r7}
 8001f1c:	b083      	sub	sp, #12
 8001f1e:	af00      	add	r7, sp, #0
 8001f20:	6078      	str	r0, [r7, #4]
 8001f22:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 8001f24:	bf00      	nop
 8001f26:	370c      	adds	r7, #12
 8001f28:	46bd      	mov	sp, r7
 8001f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f2e:	4770      	bx	lr

08001f30 <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8001f30:	b480      	push	{r7}
 8001f32:	b083      	sub	sp, #12
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 8001f38:	bf00      	nop
 8001f3a:	370c      	adds	r7, #12
 8001f3c:	46bd      	mov	sp, r7
 8001f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f42:	4770      	bx	lr

08001f44 <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8001f44:	b480      	push	{r7}
 8001f46:	b083      	sub	sp, #12
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 8001f4c:	bf00      	nop
 8001f4e:	370c      	adds	r7, #12
 8001f50:	46bd      	mov	sp, r7
 8001f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f56:	4770      	bx	lr

08001f58 <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8001f58:	b480      	push	{r7}
 8001f5a:	b083      	sub	sp, #12
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 8001f60:	bf00      	nop
 8001f62:	370c      	adds	r7, #12
 8001f64:	46bd      	mov	sp, r7
 8001f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f6a:	4770      	bx	lr

08001f6c <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8001f6c:	b480      	push	{r7}
 8001f6e:	b083      	sub	sp, #12
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 8001f74:	bf00      	nop
 8001f76:	370c      	adds	r7, #12
 8001f78:	46bd      	mov	sp, r7
 8001f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f7e:	4770      	bx	lr

08001f80 <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 8001f80:	b480      	push	{r7}
 8001f82:	b083      	sub	sp, #12
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	6078      	str	r0, [r7, #4]
 8001f88:	6039      	str	r1, [r7, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 8001f8a:	bf00      	nop
 8001f8c:	370c      	adds	r7, #12
 8001f8e:	46bd      	mov	sp, r7
 8001f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f94:	4770      	bx	lr
	...

08001f98 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8001f98:	b480      	push	{r7}
 8001f9a:	b085      	sub	sp, #20
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 8001fa0:	4b30      	ldr	r3, [pc, #192]	; (8002064 <FDCAN_CalcultateRamBlockAddresses+0xcc>)
 8001fa2:	60bb      	str	r3, [r7, #8]
#if defined(FDCAN2)

  if (hfdcan->Instance == FDCAN2)
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	4a2f      	ldr	r2, [pc, #188]	; (8002068 <FDCAN_CalcultateRamBlockAddresses+0xd0>)
 8001faa:	4293      	cmp	r3, r2
 8001fac:	d103      	bne.n	8001fb6 <FDCAN_CalcultateRamBlockAddresses+0x1e>
  {
    SramCanInstanceBase += SRAMCAN_SIZE;
 8001fae:	68bb      	ldr	r3, [r7, #8]
 8001fb0:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8001fb4:	60bb      	str	r3, [r7, #8]
  }
#endif /* FDCAN2 */
#if defined(FDCAN3)
  if (hfdcan->Instance == FDCAN3)
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	4a2c      	ldr	r2, [pc, #176]	; (800206c <FDCAN_CalcultateRamBlockAddresses+0xd4>)
 8001fbc:	4293      	cmp	r3, r2
 8001fbe:	d103      	bne.n	8001fc8 <FDCAN_CalcultateRamBlockAddresses+0x30>
  {
    SramCanInstanceBase += SRAMCAN_SIZE * 2U;
 8001fc0:	68bb      	ldr	r3, [r7, #8]
 8001fc2:	f503 63d4 	add.w	r3, r3, #1696	; 0x6a0
 8001fc6:	60bb      	str	r3, [r7, #8]
  }
#endif /* FDCAN3 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	68ba      	ldr	r2, [r7, #8]
 8001fcc:	641a      	str	r2, [r3, #64]	; 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001fd6:	f423 11f8 	bic.w	r1, r3, #2031616	; 0x1f0000
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001fde:	041a      	lsls	r2, r3, #16
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	430a      	orrs	r2, r1
 8001fe6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 8001fea:	68bb      	ldr	r3, [r7, #8]
 8001fec:	f103 0270 	add.w	r2, r3, #112	; 0x70
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	645a      	str	r2, [r3, #68]	; 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001ffc:	f023 6170 	bic.w	r1, r3, #251658240	; 0xf000000
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002004:	061a      	lsls	r2, r3, #24
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	430a      	orrs	r2, r1
 800200c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 8002010:	68bb      	ldr	r3, [r7, #8]
 8002012:	f103 02b0 	add.w	r2, r3, #176	; 0xb0
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	649a      	str	r2, [r3, #72]	; 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 800201a:	68bb      	ldr	r3, [r7, #8]
 800201c:	f503 72c4 	add.w	r2, r3, #392	; 0x188
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 8002024:	68bb      	ldr	r3, [r7, #8]
 8002026:	f503 7218 	add.w	r2, r3, #608	; 0x260
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	651a      	str	r2, [r3, #80]	; 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 800202e:	68bb      	ldr	r3, [r7, #8]
 8002030:	f503 721e 	add.w	r2, r3, #632	; 0x278
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	655a      	str	r2, [r3, #84]	; 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8002038:	68bb      	ldr	r3, [r7, #8]
 800203a:	60fb      	str	r3, [r7, #12]
 800203c:	e005      	b.n	800204a <FDCAN_CalcultateRamBlockAddresses+0xb2>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	2200      	movs	r2, #0
 8002042:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	3304      	adds	r3, #4
 8002048:	60fb      	str	r3, [r7, #12]
 800204a:	68bb      	ldr	r3, [r7, #8]
 800204c:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8002050:	68fa      	ldr	r2, [r7, #12]
 8002052:	429a      	cmp	r2, r3
 8002054:	d3f3      	bcc.n	800203e <FDCAN_CalcultateRamBlockAddresses+0xa6>
  }
}
 8002056:	bf00      	nop
 8002058:	bf00      	nop
 800205a:	3714      	adds	r7, #20
 800205c:	46bd      	mov	sp, r7
 800205e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002062:	4770      	bx	lr
 8002064:	4000a400 	.word	0x4000a400
 8002068:	40006800 	.word	0x40006800
 800206c:	40006c00 	.word	0x40006c00

08002070 <FDCAN_CopyMessageToRAM>:
  * @param  BufferIndex index of the buffer to be configured.
  * @retval none
 */
static void FDCAN_CopyMessageToRAM(FDCAN_HandleTypeDef *hfdcan, FDCAN_TxHeaderTypeDef *pTxHeader, uint8_t *pTxData,
                                   uint32_t BufferIndex)
{
 8002070:	b480      	push	{r7}
 8002072:	b089      	sub	sp, #36	; 0x24
 8002074:	af00      	add	r7, sp, #0
 8002076:	60f8      	str	r0, [r7, #12]
 8002078:	60b9      	str	r1, [r7, #8]
 800207a:	607a      	str	r2, [r7, #4]
 800207c:	603b      	str	r3, [r7, #0]
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 800207e:	68bb      	ldr	r3, [r7, #8]
 8002080:	685b      	ldr	r3, [r3, #4]
 8002082:	2b00      	cmp	r3, #0
 8002084:	d10a      	bne.n	800209c <FDCAN_CopyMessageToRAM+0x2c>
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8002086:	68bb      	ldr	r3, [r7, #8]
 8002088:	691a      	ldr	r2, [r3, #16]
                   FDCAN_STANDARD_ID |
                   pTxHeader->TxFrameType |
 800208a:	68bb      	ldr	r3, [r7, #8]
 800208c:	689b      	ldr	r3, [r3, #8]
                   FDCAN_STANDARD_ID |
 800208e:	431a      	orrs	r2, r3
                   (pTxHeader->Identifier << 18U));
 8002090:	68bb      	ldr	r3, [r7, #8]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	049b      	lsls	r3, r3, #18
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8002096:	4313      	orrs	r3, r2
 8002098:	61fb      	str	r3, [r7, #28]
 800209a:	e00a      	b.n	80020b2 <FDCAN_CopyMessageToRAM+0x42>
  }
  else /* pTxHeader->IdType == FDCAN_EXTENDED_ID */
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 800209c:	68bb      	ldr	r3, [r7, #8]
 800209e:	691a      	ldr	r2, [r3, #16]
                   FDCAN_EXTENDED_ID |
                   pTxHeader->TxFrameType |
 80020a0:	68bb      	ldr	r3, [r7, #8]
 80020a2:	689b      	ldr	r3, [r3, #8]
                   FDCAN_EXTENDED_ID |
 80020a4:	431a      	orrs	r2, r3
                   pTxHeader->Identifier);
 80020a6:	68bb      	ldr	r3, [r7, #8]
 80020a8:	681b      	ldr	r3, [r3, #0]
                   pTxHeader->TxFrameType |
 80020aa:	4313      	orrs	r3, r2
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 80020ac:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80020b0:	61fb      	str	r3, [r7, #28]
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 80020b2:	68bb      	ldr	r3, [r7, #8]
 80020b4:	6a1b      	ldr	r3, [r3, #32]
 80020b6:	061a      	lsls	r2, r3, #24
                 pTxHeader->TxEventFifoControl |
 80020b8:	68bb      	ldr	r3, [r7, #8]
 80020ba:	69db      	ldr	r3, [r3, #28]
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 80020bc:	431a      	orrs	r2, r3
                 pTxHeader->FDFormat |
 80020be:	68bb      	ldr	r3, [r7, #8]
 80020c0:	699b      	ldr	r3, [r3, #24]
                 pTxHeader->TxEventFifoControl |
 80020c2:	431a      	orrs	r2, r3
                 pTxHeader->BitRateSwitch |
 80020c4:	68bb      	ldr	r3, [r7, #8]
 80020c6:	695b      	ldr	r3, [r3, #20]
                 pTxHeader->FDFormat |
 80020c8:	431a      	orrs	r2, r3
                 pTxHeader->DataLength);
 80020ca:	68bb      	ldr	r3, [r7, #8]
 80020cc:	68db      	ldr	r3, [r3, #12]
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 80020ce:	4313      	orrs	r3, r2
 80020d0:	613b      	str	r3, [r7, #16]

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxFIFOQSA + (BufferIndex * SRAMCAN_TFQ_SIZE));
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80020d6:	683a      	ldr	r2, [r7, #0]
 80020d8:	4613      	mov	r3, r2
 80020da:	00db      	lsls	r3, r3, #3
 80020dc:	4413      	add	r3, r2
 80020de:	00db      	lsls	r3, r3, #3
 80020e0:	440b      	add	r3, r1
 80020e2:	61bb      	str	r3, [r7, #24]

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 80020e4:	69bb      	ldr	r3, [r7, #24]
 80020e6:	69fa      	ldr	r2, [r7, #28]
 80020e8:	601a      	str	r2, [r3, #0]
  TxAddress++;
 80020ea:	69bb      	ldr	r3, [r7, #24]
 80020ec:	3304      	adds	r3, #4
 80020ee:	61bb      	str	r3, [r7, #24]
  *TxAddress = TxElementW2;
 80020f0:	69bb      	ldr	r3, [r7, #24]
 80020f2:	693a      	ldr	r2, [r7, #16]
 80020f4:	601a      	str	r2, [r3, #0]
  TxAddress++;
 80020f6:	69bb      	ldr	r3, [r7, #24]
 80020f8:	3304      	adds	r3, #4
 80020fa:	61bb      	str	r3, [r7, #24]

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength >> 16U]; ByteCounter += 4U)
 80020fc:	2300      	movs	r3, #0
 80020fe:	617b      	str	r3, [r7, #20]
 8002100:	e020      	b.n	8002144 <FDCAN_CopyMessageToRAM+0xd4>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8002102:	697b      	ldr	r3, [r7, #20]
 8002104:	3303      	adds	r3, #3
 8002106:	687a      	ldr	r2, [r7, #4]
 8002108:	4413      	add	r3, r2
 800210a:	781b      	ldrb	r3, [r3, #0]
 800210c:	061a      	lsls	r2, r3, #24
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 800210e:	697b      	ldr	r3, [r7, #20]
 8002110:	3302      	adds	r3, #2
 8002112:	6879      	ldr	r1, [r7, #4]
 8002114:	440b      	add	r3, r1
 8002116:	781b      	ldrb	r3, [r3, #0]
 8002118:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 800211a:	431a      	orrs	r2, r3
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 800211c:	697b      	ldr	r3, [r7, #20]
 800211e:	3301      	adds	r3, #1
 8002120:	6879      	ldr	r1, [r7, #4]
 8002122:	440b      	add	r3, r1
 8002124:	781b      	ldrb	r3, [r3, #0]
 8002126:	021b      	lsls	r3, r3, #8
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 8002128:	4313      	orrs	r3, r2
                  (uint32_t)pTxData[ByteCounter]);
 800212a:	6879      	ldr	r1, [r7, #4]
 800212c:	697a      	ldr	r2, [r7, #20]
 800212e:	440a      	add	r2, r1
 8002130:	7812      	ldrb	r2, [r2, #0]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 8002132:	431a      	orrs	r2, r3
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8002134:	69bb      	ldr	r3, [r7, #24]
 8002136:	601a      	str	r2, [r3, #0]
    TxAddress++;
 8002138:	69bb      	ldr	r3, [r7, #24]
 800213a:	3304      	adds	r3, #4
 800213c:	61bb      	str	r3, [r7, #24]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength >> 16U]; ByteCounter += 4U)
 800213e:	697b      	ldr	r3, [r7, #20]
 8002140:	3304      	adds	r3, #4
 8002142:	617b      	str	r3, [r7, #20]
 8002144:	68bb      	ldr	r3, [r7, #8]
 8002146:	68db      	ldr	r3, [r3, #12]
 8002148:	0c1b      	lsrs	r3, r3, #16
 800214a:	4a06      	ldr	r2, [pc, #24]	; (8002164 <FDCAN_CopyMessageToRAM+0xf4>)
 800214c:	5cd3      	ldrb	r3, [r2, r3]
 800214e:	461a      	mov	r2, r3
 8002150:	697b      	ldr	r3, [r7, #20]
 8002152:	4293      	cmp	r3, r2
 8002154:	d3d5      	bcc.n	8002102 <FDCAN_CopyMessageToRAM+0x92>
  }
}
 8002156:	bf00      	nop
 8002158:	bf00      	nop
 800215a:	3724      	adds	r7, #36	; 0x24
 800215c:	46bd      	mov	sp, r7
 800215e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002162:	4770      	bx	lr
 8002164:	08005260 	.word	0x08005260

08002168 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002168:	b480      	push	{r7}
 800216a:	b087      	sub	sp, #28
 800216c:	af00      	add	r7, sp, #0
 800216e:	6078      	str	r0, [r7, #4]
 8002170:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002172:	2300      	movs	r3, #0
 8002174:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002176:	e15a      	b.n	800242e <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002178:	683b      	ldr	r3, [r7, #0]
 800217a:	681a      	ldr	r2, [r3, #0]
 800217c:	2101      	movs	r1, #1
 800217e:	697b      	ldr	r3, [r7, #20]
 8002180:	fa01 f303 	lsl.w	r3, r1, r3
 8002184:	4013      	ands	r3, r2
 8002186:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	2b00      	cmp	r3, #0
 800218c:	f000 814c 	beq.w	8002428 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002190:	683b      	ldr	r3, [r7, #0]
 8002192:	685b      	ldr	r3, [r3, #4]
 8002194:	f003 0303 	and.w	r3, r3, #3
 8002198:	2b01      	cmp	r3, #1
 800219a:	d005      	beq.n	80021a8 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800219c:	683b      	ldr	r3, [r7, #0]
 800219e:	685b      	ldr	r3, [r3, #4]
 80021a0:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80021a4:	2b02      	cmp	r3, #2
 80021a6:	d130      	bne.n	800220a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	689b      	ldr	r3, [r3, #8]
 80021ac:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80021ae:	697b      	ldr	r3, [r7, #20]
 80021b0:	005b      	lsls	r3, r3, #1
 80021b2:	2203      	movs	r2, #3
 80021b4:	fa02 f303 	lsl.w	r3, r2, r3
 80021b8:	43db      	mvns	r3, r3
 80021ba:	693a      	ldr	r2, [r7, #16]
 80021bc:	4013      	ands	r3, r2
 80021be:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80021c0:	683b      	ldr	r3, [r7, #0]
 80021c2:	68da      	ldr	r2, [r3, #12]
 80021c4:	697b      	ldr	r3, [r7, #20]
 80021c6:	005b      	lsls	r3, r3, #1
 80021c8:	fa02 f303 	lsl.w	r3, r2, r3
 80021cc:	693a      	ldr	r2, [r7, #16]
 80021ce:	4313      	orrs	r3, r2
 80021d0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	693a      	ldr	r2, [r7, #16]
 80021d6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	685b      	ldr	r3, [r3, #4]
 80021dc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80021de:	2201      	movs	r2, #1
 80021e0:	697b      	ldr	r3, [r7, #20]
 80021e2:	fa02 f303 	lsl.w	r3, r2, r3
 80021e6:	43db      	mvns	r3, r3
 80021e8:	693a      	ldr	r2, [r7, #16]
 80021ea:	4013      	ands	r3, r2
 80021ec:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80021ee:	683b      	ldr	r3, [r7, #0]
 80021f0:	685b      	ldr	r3, [r3, #4]
 80021f2:	091b      	lsrs	r3, r3, #4
 80021f4:	f003 0201 	and.w	r2, r3, #1
 80021f8:	697b      	ldr	r3, [r7, #20]
 80021fa:	fa02 f303 	lsl.w	r3, r2, r3
 80021fe:	693a      	ldr	r2, [r7, #16]
 8002200:	4313      	orrs	r3, r2
 8002202:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	693a      	ldr	r2, [r7, #16]
 8002208:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800220a:	683b      	ldr	r3, [r7, #0]
 800220c:	685b      	ldr	r3, [r3, #4]
 800220e:	f003 0303 	and.w	r3, r3, #3
 8002212:	2b03      	cmp	r3, #3
 8002214:	d017      	beq.n	8002246 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	68db      	ldr	r3, [r3, #12]
 800221a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800221c:	697b      	ldr	r3, [r7, #20]
 800221e:	005b      	lsls	r3, r3, #1
 8002220:	2203      	movs	r2, #3
 8002222:	fa02 f303 	lsl.w	r3, r2, r3
 8002226:	43db      	mvns	r3, r3
 8002228:	693a      	ldr	r2, [r7, #16]
 800222a:	4013      	ands	r3, r2
 800222c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800222e:	683b      	ldr	r3, [r7, #0]
 8002230:	689a      	ldr	r2, [r3, #8]
 8002232:	697b      	ldr	r3, [r7, #20]
 8002234:	005b      	lsls	r3, r3, #1
 8002236:	fa02 f303 	lsl.w	r3, r2, r3
 800223a:	693a      	ldr	r2, [r7, #16]
 800223c:	4313      	orrs	r3, r2
 800223e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	693a      	ldr	r2, [r7, #16]
 8002244:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002246:	683b      	ldr	r3, [r7, #0]
 8002248:	685b      	ldr	r3, [r3, #4]
 800224a:	f003 0303 	and.w	r3, r3, #3
 800224e:	2b02      	cmp	r3, #2
 8002250:	d123      	bne.n	800229a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002252:	697b      	ldr	r3, [r7, #20]
 8002254:	08da      	lsrs	r2, r3, #3
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	3208      	adds	r2, #8
 800225a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800225e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002260:	697b      	ldr	r3, [r7, #20]
 8002262:	f003 0307 	and.w	r3, r3, #7
 8002266:	009b      	lsls	r3, r3, #2
 8002268:	220f      	movs	r2, #15
 800226a:	fa02 f303 	lsl.w	r3, r2, r3
 800226e:	43db      	mvns	r3, r3
 8002270:	693a      	ldr	r2, [r7, #16]
 8002272:	4013      	ands	r3, r2
 8002274:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002276:	683b      	ldr	r3, [r7, #0]
 8002278:	691a      	ldr	r2, [r3, #16]
 800227a:	697b      	ldr	r3, [r7, #20]
 800227c:	f003 0307 	and.w	r3, r3, #7
 8002280:	009b      	lsls	r3, r3, #2
 8002282:	fa02 f303 	lsl.w	r3, r2, r3
 8002286:	693a      	ldr	r2, [r7, #16]
 8002288:	4313      	orrs	r3, r2
 800228a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 800228c:	697b      	ldr	r3, [r7, #20]
 800228e:	08da      	lsrs	r2, r3, #3
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	3208      	adds	r2, #8
 8002294:	6939      	ldr	r1, [r7, #16]
 8002296:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80022a0:	697b      	ldr	r3, [r7, #20]
 80022a2:	005b      	lsls	r3, r3, #1
 80022a4:	2203      	movs	r2, #3
 80022a6:	fa02 f303 	lsl.w	r3, r2, r3
 80022aa:	43db      	mvns	r3, r3
 80022ac:	693a      	ldr	r2, [r7, #16]
 80022ae:	4013      	ands	r3, r2
 80022b0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80022b2:	683b      	ldr	r3, [r7, #0]
 80022b4:	685b      	ldr	r3, [r3, #4]
 80022b6:	f003 0203 	and.w	r2, r3, #3
 80022ba:	697b      	ldr	r3, [r7, #20]
 80022bc:	005b      	lsls	r3, r3, #1
 80022be:	fa02 f303 	lsl.w	r3, r2, r3
 80022c2:	693a      	ldr	r2, [r7, #16]
 80022c4:	4313      	orrs	r3, r2
 80022c6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	693a      	ldr	r2, [r7, #16]
 80022cc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80022ce:	683b      	ldr	r3, [r7, #0]
 80022d0:	685b      	ldr	r3, [r3, #4]
 80022d2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	f000 80a6 	beq.w	8002428 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80022dc:	4b5b      	ldr	r3, [pc, #364]	; (800244c <HAL_GPIO_Init+0x2e4>)
 80022de:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80022e0:	4a5a      	ldr	r2, [pc, #360]	; (800244c <HAL_GPIO_Init+0x2e4>)
 80022e2:	f043 0301 	orr.w	r3, r3, #1
 80022e6:	6613      	str	r3, [r2, #96]	; 0x60
 80022e8:	4b58      	ldr	r3, [pc, #352]	; (800244c <HAL_GPIO_Init+0x2e4>)
 80022ea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80022ec:	f003 0301 	and.w	r3, r3, #1
 80022f0:	60bb      	str	r3, [r7, #8]
 80022f2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80022f4:	4a56      	ldr	r2, [pc, #344]	; (8002450 <HAL_GPIO_Init+0x2e8>)
 80022f6:	697b      	ldr	r3, [r7, #20]
 80022f8:	089b      	lsrs	r3, r3, #2
 80022fa:	3302      	adds	r3, #2
 80022fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002300:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002302:	697b      	ldr	r3, [r7, #20]
 8002304:	f003 0303 	and.w	r3, r3, #3
 8002308:	009b      	lsls	r3, r3, #2
 800230a:	220f      	movs	r2, #15
 800230c:	fa02 f303 	lsl.w	r3, r2, r3
 8002310:	43db      	mvns	r3, r3
 8002312:	693a      	ldr	r2, [r7, #16]
 8002314:	4013      	ands	r3, r2
 8002316:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800231e:	d01f      	beq.n	8002360 <HAL_GPIO_Init+0x1f8>
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	4a4c      	ldr	r2, [pc, #304]	; (8002454 <HAL_GPIO_Init+0x2ec>)
 8002324:	4293      	cmp	r3, r2
 8002326:	d019      	beq.n	800235c <HAL_GPIO_Init+0x1f4>
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	4a4b      	ldr	r2, [pc, #300]	; (8002458 <HAL_GPIO_Init+0x2f0>)
 800232c:	4293      	cmp	r3, r2
 800232e:	d013      	beq.n	8002358 <HAL_GPIO_Init+0x1f0>
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	4a4a      	ldr	r2, [pc, #296]	; (800245c <HAL_GPIO_Init+0x2f4>)
 8002334:	4293      	cmp	r3, r2
 8002336:	d00d      	beq.n	8002354 <HAL_GPIO_Init+0x1ec>
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	4a49      	ldr	r2, [pc, #292]	; (8002460 <HAL_GPIO_Init+0x2f8>)
 800233c:	4293      	cmp	r3, r2
 800233e:	d007      	beq.n	8002350 <HAL_GPIO_Init+0x1e8>
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	4a48      	ldr	r2, [pc, #288]	; (8002464 <HAL_GPIO_Init+0x2fc>)
 8002344:	4293      	cmp	r3, r2
 8002346:	d101      	bne.n	800234c <HAL_GPIO_Init+0x1e4>
 8002348:	2305      	movs	r3, #5
 800234a:	e00a      	b.n	8002362 <HAL_GPIO_Init+0x1fa>
 800234c:	2306      	movs	r3, #6
 800234e:	e008      	b.n	8002362 <HAL_GPIO_Init+0x1fa>
 8002350:	2304      	movs	r3, #4
 8002352:	e006      	b.n	8002362 <HAL_GPIO_Init+0x1fa>
 8002354:	2303      	movs	r3, #3
 8002356:	e004      	b.n	8002362 <HAL_GPIO_Init+0x1fa>
 8002358:	2302      	movs	r3, #2
 800235a:	e002      	b.n	8002362 <HAL_GPIO_Init+0x1fa>
 800235c:	2301      	movs	r3, #1
 800235e:	e000      	b.n	8002362 <HAL_GPIO_Init+0x1fa>
 8002360:	2300      	movs	r3, #0
 8002362:	697a      	ldr	r2, [r7, #20]
 8002364:	f002 0203 	and.w	r2, r2, #3
 8002368:	0092      	lsls	r2, r2, #2
 800236a:	4093      	lsls	r3, r2
 800236c:	693a      	ldr	r2, [r7, #16]
 800236e:	4313      	orrs	r3, r2
 8002370:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002372:	4937      	ldr	r1, [pc, #220]	; (8002450 <HAL_GPIO_Init+0x2e8>)
 8002374:	697b      	ldr	r3, [r7, #20]
 8002376:	089b      	lsrs	r3, r3, #2
 8002378:	3302      	adds	r3, #2
 800237a:	693a      	ldr	r2, [r7, #16]
 800237c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002380:	4b39      	ldr	r3, [pc, #228]	; (8002468 <HAL_GPIO_Init+0x300>)
 8002382:	689b      	ldr	r3, [r3, #8]
 8002384:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	43db      	mvns	r3, r3
 800238a:	693a      	ldr	r2, [r7, #16]
 800238c:	4013      	ands	r3, r2
 800238e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002390:	683b      	ldr	r3, [r7, #0]
 8002392:	685b      	ldr	r3, [r3, #4]
 8002394:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002398:	2b00      	cmp	r3, #0
 800239a:	d003      	beq.n	80023a4 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 800239c:	693a      	ldr	r2, [r7, #16]
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	4313      	orrs	r3, r2
 80023a2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80023a4:	4a30      	ldr	r2, [pc, #192]	; (8002468 <HAL_GPIO_Init+0x300>)
 80023a6:	693b      	ldr	r3, [r7, #16]
 80023a8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80023aa:	4b2f      	ldr	r3, [pc, #188]	; (8002468 <HAL_GPIO_Init+0x300>)
 80023ac:	68db      	ldr	r3, [r3, #12]
 80023ae:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	43db      	mvns	r3, r3
 80023b4:	693a      	ldr	r2, [r7, #16]
 80023b6:	4013      	ands	r3, r2
 80023b8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80023ba:	683b      	ldr	r3, [r7, #0]
 80023bc:	685b      	ldr	r3, [r3, #4]
 80023be:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d003      	beq.n	80023ce <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80023c6:	693a      	ldr	r2, [r7, #16]
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	4313      	orrs	r3, r2
 80023cc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80023ce:	4a26      	ldr	r2, [pc, #152]	; (8002468 <HAL_GPIO_Init+0x300>)
 80023d0:	693b      	ldr	r3, [r7, #16]
 80023d2:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 80023d4:	4b24      	ldr	r3, [pc, #144]	; (8002468 <HAL_GPIO_Init+0x300>)
 80023d6:	685b      	ldr	r3, [r3, #4]
 80023d8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	43db      	mvns	r3, r3
 80023de:	693a      	ldr	r2, [r7, #16]
 80023e0:	4013      	ands	r3, r2
 80023e2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80023e4:	683b      	ldr	r3, [r7, #0]
 80023e6:	685b      	ldr	r3, [r3, #4]
 80023e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d003      	beq.n	80023f8 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80023f0:	693a      	ldr	r2, [r7, #16]
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	4313      	orrs	r3, r2
 80023f6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80023f8:	4a1b      	ldr	r2, [pc, #108]	; (8002468 <HAL_GPIO_Init+0x300>)
 80023fa:	693b      	ldr	r3, [r7, #16]
 80023fc:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80023fe:	4b1a      	ldr	r3, [pc, #104]	; (8002468 <HAL_GPIO_Init+0x300>)
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	43db      	mvns	r3, r3
 8002408:	693a      	ldr	r2, [r7, #16]
 800240a:	4013      	ands	r3, r2
 800240c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800240e:	683b      	ldr	r3, [r7, #0]
 8002410:	685b      	ldr	r3, [r3, #4]
 8002412:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002416:	2b00      	cmp	r3, #0
 8002418:	d003      	beq.n	8002422 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800241a:	693a      	ldr	r2, [r7, #16]
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	4313      	orrs	r3, r2
 8002420:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002422:	4a11      	ldr	r2, [pc, #68]	; (8002468 <HAL_GPIO_Init+0x300>)
 8002424:	693b      	ldr	r3, [r7, #16]
 8002426:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002428:	697b      	ldr	r3, [r7, #20]
 800242a:	3301      	adds	r3, #1
 800242c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800242e:	683b      	ldr	r3, [r7, #0]
 8002430:	681a      	ldr	r2, [r3, #0]
 8002432:	697b      	ldr	r3, [r7, #20]
 8002434:	fa22 f303 	lsr.w	r3, r2, r3
 8002438:	2b00      	cmp	r3, #0
 800243a:	f47f ae9d 	bne.w	8002178 <HAL_GPIO_Init+0x10>
  }
}
 800243e:	bf00      	nop
 8002440:	bf00      	nop
 8002442:	371c      	adds	r7, #28
 8002444:	46bd      	mov	sp, r7
 8002446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800244a:	4770      	bx	lr
 800244c:	40021000 	.word	0x40021000
 8002450:	40010000 	.word	0x40010000
 8002454:	48000400 	.word	0x48000400
 8002458:	48000800 	.word	0x48000800
 800245c:	48000c00 	.word	0x48000c00
 8002460:	48001000 	.word	0x48001000
 8002464:	48001400 	.word	0x48001400
 8002468:	40010400 	.word	0x40010400

0800246c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800246c:	b480      	push	{r7}
 800246e:	b083      	sub	sp, #12
 8002470:	af00      	add	r7, sp, #0
 8002472:	6078      	str	r0, [r7, #4]
 8002474:	460b      	mov	r3, r1
 8002476:	807b      	strh	r3, [r7, #2]
 8002478:	4613      	mov	r3, r2
 800247a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800247c:	787b      	ldrb	r3, [r7, #1]
 800247e:	2b00      	cmp	r3, #0
 8002480:	d003      	beq.n	800248a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002482:	887a      	ldrh	r2, [r7, #2]
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002488:	e002      	b.n	8002490 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800248a:	887a      	ldrh	r2, [r7, #2]
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002490:	bf00      	nop
 8002492:	370c      	adds	r7, #12
 8002494:	46bd      	mov	sp, r7
 8002496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800249a:	4770      	bx	lr

0800249c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800249c:	b580      	push	{r7, lr}
 800249e:	b082      	sub	sp, #8
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	4603      	mov	r3, r0
 80024a4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80024a6:	4b08      	ldr	r3, [pc, #32]	; (80024c8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80024a8:	695a      	ldr	r2, [r3, #20]
 80024aa:	88fb      	ldrh	r3, [r7, #6]
 80024ac:	4013      	ands	r3, r2
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d006      	beq.n	80024c0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80024b2:	4a05      	ldr	r2, [pc, #20]	; (80024c8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80024b4:	88fb      	ldrh	r3, [r7, #6]
 80024b6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80024b8:	88fb      	ldrh	r3, [r7, #6]
 80024ba:	4618      	mov	r0, r3
 80024bc:	f000 f806 	bl	80024cc <HAL_GPIO_EXTI_Callback>
  }
}
 80024c0:	bf00      	nop
 80024c2:	3708      	adds	r7, #8
 80024c4:	46bd      	mov	sp, r7
 80024c6:	bd80      	pop	{r7, pc}
 80024c8:	40010400 	.word	0x40010400

080024cc <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80024cc:	b480      	push	{r7}
 80024ce:	b083      	sub	sp, #12
 80024d0:	af00      	add	r7, sp, #0
 80024d2:	4603      	mov	r3, r0
 80024d4:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80024d6:	bf00      	nop
 80024d8:	370c      	adds	r7, #12
 80024da:	46bd      	mov	sp, r7
 80024dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e0:	4770      	bx	lr
	...

080024e4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80024e4:	b480      	push	{r7}
 80024e6:	b085      	sub	sp, #20
 80024e8:	af00      	add	r7, sp, #0
 80024ea:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d141      	bne.n	8002576 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80024f2:	4b4b      	ldr	r3, [pc, #300]	; (8002620 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80024fa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80024fe:	d131      	bne.n	8002564 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002500:	4b47      	ldr	r3, [pc, #284]	; (8002620 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002502:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002506:	4a46      	ldr	r2, [pc, #280]	; (8002620 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002508:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800250c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002510:	4b43      	ldr	r3, [pc, #268]	; (8002620 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002518:	4a41      	ldr	r2, [pc, #260]	; (8002620 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800251a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800251e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002520:	4b40      	ldr	r3, [pc, #256]	; (8002624 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	2232      	movs	r2, #50	; 0x32
 8002526:	fb02 f303 	mul.w	r3, r2, r3
 800252a:	4a3f      	ldr	r2, [pc, #252]	; (8002628 <HAL_PWREx_ControlVoltageScaling+0x144>)
 800252c:	fba2 2303 	umull	r2, r3, r2, r3
 8002530:	0c9b      	lsrs	r3, r3, #18
 8002532:	3301      	adds	r3, #1
 8002534:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002536:	e002      	b.n	800253e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	3b01      	subs	r3, #1
 800253c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800253e:	4b38      	ldr	r3, [pc, #224]	; (8002620 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002540:	695b      	ldr	r3, [r3, #20]
 8002542:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002546:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800254a:	d102      	bne.n	8002552 <HAL_PWREx_ControlVoltageScaling+0x6e>
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	2b00      	cmp	r3, #0
 8002550:	d1f2      	bne.n	8002538 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002552:	4b33      	ldr	r3, [pc, #204]	; (8002620 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002554:	695b      	ldr	r3, [r3, #20]
 8002556:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800255a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800255e:	d158      	bne.n	8002612 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002560:	2303      	movs	r3, #3
 8002562:	e057      	b.n	8002614 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002564:	4b2e      	ldr	r3, [pc, #184]	; (8002620 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002566:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800256a:	4a2d      	ldr	r2, [pc, #180]	; (8002620 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800256c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002570:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8002574:	e04d      	b.n	8002612 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800257c:	d141      	bne.n	8002602 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800257e:	4b28      	ldr	r3, [pc, #160]	; (8002620 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002586:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800258a:	d131      	bne.n	80025f0 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800258c:	4b24      	ldr	r3, [pc, #144]	; (8002620 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800258e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002592:	4a23      	ldr	r2, [pc, #140]	; (8002620 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002594:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002598:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800259c:	4b20      	ldr	r3, [pc, #128]	; (8002620 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80025a4:	4a1e      	ldr	r2, [pc, #120]	; (8002620 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80025a6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80025aa:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80025ac:	4b1d      	ldr	r3, [pc, #116]	; (8002624 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	2232      	movs	r2, #50	; 0x32
 80025b2:	fb02 f303 	mul.w	r3, r2, r3
 80025b6:	4a1c      	ldr	r2, [pc, #112]	; (8002628 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80025b8:	fba2 2303 	umull	r2, r3, r2, r3
 80025bc:	0c9b      	lsrs	r3, r3, #18
 80025be:	3301      	adds	r3, #1
 80025c0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80025c2:	e002      	b.n	80025ca <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	3b01      	subs	r3, #1
 80025c8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80025ca:	4b15      	ldr	r3, [pc, #84]	; (8002620 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80025cc:	695b      	ldr	r3, [r3, #20]
 80025ce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80025d2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80025d6:	d102      	bne.n	80025de <HAL_PWREx_ControlVoltageScaling+0xfa>
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d1f2      	bne.n	80025c4 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80025de:	4b10      	ldr	r3, [pc, #64]	; (8002620 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80025e0:	695b      	ldr	r3, [r3, #20]
 80025e2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80025e6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80025ea:	d112      	bne.n	8002612 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80025ec:	2303      	movs	r3, #3
 80025ee:	e011      	b.n	8002614 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80025f0:	4b0b      	ldr	r3, [pc, #44]	; (8002620 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80025f2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80025f6:	4a0a      	ldr	r2, [pc, #40]	; (8002620 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80025f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80025fc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8002600:	e007      	b.n	8002612 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002602:	4b07      	ldr	r3, [pc, #28]	; (8002620 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800260a:	4a05      	ldr	r2, [pc, #20]	; (8002620 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800260c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002610:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8002612:	2300      	movs	r3, #0
}
 8002614:	4618      	mov	r0, r3
 8002616:	3714      	adds	r7, #20
 8002618:	46bd      	mov	sp, r7
 800261a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800261e:	4770      	bx	lr
 8002620:	40007000 	.word	0x40007000
 8002624:	20000004 	.word	0x20000004
 8002628:	431bde83 	.word	0x431bde83

0800262c <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 800262c:	b480      	push	{r7}
 800262e:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8002630:	4b05      	ldr	r3, [pc, #20]	; (8002648 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8002632:	689b      	ldr	r3, [r3, #8]
 8002634:	4a04      	ldr	r2, [pc, #16]	; (8002648 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8002636:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800263a:	6093      	str	r3, [r2, #8]
}
 800263c:	bf00      	nop
 800263e:	46bd      	mov	sp, r7
 8002640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002644:	4770      	bx	lr
 8002646:	bf00      	nop
 8002648:	40007000 	.word	0x40007000

0800264c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800264c:	b580      	push	{r7, lr}
 800264e:	b088      	sub	sp, #32
 8002650:	af00      	add	r7, sp, #0
 8002652:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	2b00      	cmp	r3, #0
 8002658:	d101      	bne.n	800265e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800265a:	2301      	movs	r3, #1
 800265c:	e306      	b.n	8002c6c <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	f003 0301 	and.w	r3, r3, #1
 8002666:	2b00      	cmp	r3, #0
 8002668:	d075      	beq.n	8002756 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800266a:	4b97      	ldr	r3, [pc, #604]	; (80028c8 <HAL_RCC_OscConfig+0x27c>)
 800266c:	689b      	ldr	r3, [r3, #8]
 800266e:	f003 030c 	and.w	r3, r3, #12
 8002672:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002674:	4b94      	ldr	r3, [pc, #592]	; (80028c8 <HAL_RCC_OscConfig+0x27c>)
 8002676:	68db      	ldr	r3, [r3, #12]
 8002678:	f003 0303 	and.w	r3, r3, #3
 800267c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800267e:	69bb      	ldr	r3, [r7, #24]
 8002680:	2b0c      	cmp	r3, #12
 8002682:	d102      	bne.n	800268a <HAL_RCC_OscConfig+0x3e>
 8002684:	697b      	ldr	r3, [r7, #20]
 8002686:	2b03      	cmp	r3, #3
 8002688:	d002      	beq.n	8002690 <HAL_RCC_OscConfig+0x44>
 800268a:	69bb      	ldr	r3, [r7, #24]
 800268c:	2b08      	cmp	r3, #8
 800268e:	d10b      	bne.n	80026a8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002690:	4b8d      	ldr	r3, [pc, #564]	; (80028c8 <HAL_RCC_OscConfig+0x27c>)
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002698:	2b00      	cmp	r3, #0
 800269a:	d05b      	beq.n	8002754 <HAL_RCC_OscConfig+0x108>
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	685b      	ldr	r3, [r3, #4]
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d157      	bne.n	8002754 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80026a4:	2301      	movs	r3, #1
 80026a6:	e2e1      	b.n	8002c6c <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	685b      	ldr	r3, [r3, #4]
 80026ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80026b0:	d106      	bne.n	80026c0 <HAL_RCC_OscConfig+0x74>
 80026b2:	4b85      	ldr	r3, [pc, #532]	; (80028c8 <HAL_RCC_OscConfig+0x27c>)
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	4a84      	ldr	r2, [pc, #528]	; (80028c8 <HAL_RCC_OscConfig+0x27c>)
 80026b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80026bc:	6013      	str	r3, [r2, #0]
 80026be:	e01d      	b.n	80026fc <HAL_RCC_OscConfig+0xb0>
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	685b      	ldr	r3, [r3, #4]
 80026c4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80026c8:	d10c      	bne.n	80026e4 <HAL_RCC_OscConfig+0x98>
 80026ca:	4b7f      	ldr	r3, [pc, #508]	; (80028c8 <HAL_RCC_OscConfig+0x27c>)
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	4a7e      	ldr	r2, [pc, #504]	; (80028c8 <HAL_RCC_OscConfig+0x27c>)
 80026d0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80026d4:	6013      	str	r3, [r2, #0]
 80026d6:	4b7c      	ldr	r3, [pc, #496]	; (80028c8 <HAL_RCC_OscConfig+0x27c>)
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	4a7b      	ldr	r2, [pc, #492]	; (80028c8 <HAL_RCC_OscConfig+0x27c>)
 80026dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80026e0:	6013      	str	r3, [r2, #0]
 80026e2:	e00b      	b.n	80026fc <HAL_RCC_OscConfig+0xb0>
 80026e4:	4b78      	ldr	r3, [pc, #480]	; (80028c8 <HAL_RCC_OscConfig+0x27c>)
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	4a77      	ldr	r2, [pc, #476]	; (80028c8 <HAL_RCC_OscConfig+0x27c>)
 80026ea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80026ee:	6013      	str	r3, [r2, #0]
 80026f0:	4b75      	ldr	r3, [pc, #468]	; (80028c8 <HAL_RCC_OscConfig+0x27c>)
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	4a74      	ldr	r2, [pc, #464]	; (80028c8 <HAL_RCC_OscConfig+0x27c>)
 80026f6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80026fa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	685b      	ldr	r3, [r3, #4]
 8002700:	2b00      	cmp	r3, #0
 8002702:	d013      	beq.n	800272c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002704:	f7fe fd92 	bl	800122c <HAL_GetTick>
 8002708:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800270a:	e008      	b.n	800271e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800270c:	f7fe fd8e 	bl	800122c <HAL_GetTick>
 8002710:	4602      	mov	r2, r0
 8002712:	693b      	ldr	r3, [r7, #16]
 8002714:	1ad3      	subs	r3, r2, r3
 8002716:	2b64      	cmp	r3, #100	; 0x64
 8002718:	d901      	bls.n	800271e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800271a:	2303      	movs	r3, #3
 800271c:	e2a6      	b.n	8002c6c <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800271e:	4b6a      	ldr	r3, [pc, #424]	; (80028c8 <HAL_RCC_OscConfig+0x27c>)
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002726:	2b00      	cmp	r3, #0
 8002728:	d0f0      	beq.n	800270c <HAL_RCC_OscConfig+0xc0>
 800272a:	e014      	b.n	8002756 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800272c:	f7fe fd7e 	bl	800122c <HAL_GetTick>
 8002730:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002732:	e008      	b.n	8002746 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002734:	f7fe fd7a 	bl	800122c <HAL_GetTick>
 8002738:	4602      	mov	r2, r0
 800273a:	693b      	ldr	r3, [r7, #16]
 800273c:	1ad3      	subs	r3, r2, r3
 800273e:	2b64      	cmp	r3, #100	; 0x64
 8002740:	d901      	bls.n	8002746 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002742:	2303      	movs	r3, #3
 8002744:	e292      	b.n	8002c6c <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002746:	4b60      	ldr	r3, [pc, #384]	; (80028c8 <HAL_RCC_OscConfig+0x27c>)
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800274e:	2b00      	cmp	r3, #0
 8002750:	d1f0      	bne.n	8002734 <HAL_RCC_OscConfig+0xe8>
 8002752:	e000      	b.n	8002756 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002754:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	f003 0302 	and.w	r3, r3, #2
 800275e:	2b00      	cmp	r3, #0
 8002760:	d075      	beq.n	800284e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002762:	4b59      	ldr	r3, [pc, #356]	; (80028c8 <HAL_RCC_OscConfig+0x27c>)
 8002764:	689b      	ldr	r3, [r3, #8]
 8002766:	f003 030c 	and.w	r3, r3, #12
 800276a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800276c:	4b56      	ldr	r3, [pc, #344]	; (80028c8 <HAL_RCC_OscConfig+0x27c>)
 800276e:	68db      	ldr	r3, [r3, #12]
 8002770:	f003 0303 	and.w	r3, r3, #3
 8002774:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8002776:	69bb      	ldr	r3, [r7, #24]
 8002778:	2b0c      	cmp	r3, #12
 800277a:	d102      	bne.n	8002782 <HAL_RCC_OscConfig+0x136>
 800277c:	697b      	ldr	r3, [r7, #20]
 800277e:	2b02      	cmp	r3, #2
 8002780:	d002      	beq.n	8002788 <HAL_RCC_OscConfig+0x13c>
 8002782:	69bb      	ldr	r3, [r7, #24]
 8002784:	2b04      	cmp	r3, #4
 8002786:	d11f      	bne.n	80027c8 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002788:	4b4f      	ldr	r3, [pc, #316]	; (80028c8 <HAL_RCC_OscConfig+0x27c>)
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002790:	2b00      	cmp	r3, #0
 8002792:	d005      	beq.n	80027a0 <HAL_RCC_OscConfig+0x154>
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	68db      	ldr	r3, [r3, #12]
 8002798:	2b00      	cmp	r3, #0
 800279a:	d101      	bne.n	80027a0 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 800279c:	2301      	movs	r3, #1
 800279e:	e265      	b.n	8002c6c <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80027a0:	4b49      	ldr	r3, [pc, #292]	; (80028c8 <HAL_RCC_OscConfig+0x27c>)
 80027a2:	685b      	ldr	r3, [r3, #4]
 80027a4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	691b      	ldr	r3, [r3, #16]
 80027ac:	061b      	lsls	r3, r3, #24
 80027ae:	4946      	ldr	r1, [pc, #280]	; (80028c8 <HAL_RCC_OscConfig+0x27c>)
 80027b0:	4313      	orrs	r3, r2
 80027b2:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80027b4:	4b45      	ldr	r3, [pc, #276]	; (80028cc <HAL_RCC_OscConfig+0x280>)
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	4618      	mov	r0, r3
 80027ba:	f7fe fceb 	bl	8001194 <HAL_InitTick>
 80027be:	4603      	mov	r3, r0
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d043      	beq.n	800284c <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80027c4:	2301      	movs	r3, #1
 80027c6:	e251      	b.n	8002c6c <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	68db      	ldr	r3, [r3, #12]
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d023      	beq.n	8002818 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80027d0:	4b3d      	ldr	r3, [pc, #244]	; (80028c8 <HAL_RCC_OscConfig+0x27c>)
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	4a3c      	ldr	r2, [pc, #240]	; (80028c8 <HAL_RCC_OscConfig+0x27c>)
 80027d6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80027da:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027dc:	f7fe fd26 	bl	800122c <HAL_GetTick>
 80027e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80027e2:	e008      	b.n	80027f6 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80027e4:	f7fe fd22 	bl	800122c <HAL_GetTick>
 80027e8:	4602      	mov	r2, r0
 80027ea:	693b      	ldr	r3, [r7, #16]
 80027ec:	1ad3      	subs	r3, r2, r3
 80027ee:	2b02      	cmp	r3, #2
 80027f0:	d901      	bls.n	80027f6 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80027f2:	2303      	movs	r3, #3
 80027f4:	e23a      	b.n	8002c6c <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80027f6:	4b34      	ldr	r3, [pc, #208]	; (80028c8 <HAL_RCC_OscConfig+0x27c>)
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d0f0      	beq.n	80027e4 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002802:	4b31      	ldr	r3, [pc, #196]	; (80028c8 <HAL_RCC_OscConfig+0x27c>)
 8002804:	685b      	ldr	r3, [r3, #4]
 8002806:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	691b      	ldr	r3, [r3, #16]
 800280e:	061b      	lsls	r3, r3, #24
 8002810:	492d      	ldr	r1, [pc, #180]	; (80028c8 <HAL_RCC_OscConfig+0x27c>)
 8002812:	4313      	orrs	r3, r2
 8002814:	604b      	str	r3, [r1, #4]
 8002816:	e01a      	b.n	800284e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002818:	4b2b      	ldr	r3, [pc, #172]	; (80028c8 <HAL_RCC_OscConfig+0x27c>)
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	4a2a      	ldr	r2, [pc, #168]	; (80028c8 <HAL_RCC_OscConfig+0x27c>)
 800281e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002822:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002824:	f7fe fd02 	bl	800122c <HAL_GetTick>
 8002828:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800282a:	e008      	b.n	800283e <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800282c:	f7fe fcfe 	bl	800122c <HAL_GetTick>
 8002830:	4602      	mov	r2, r0
 8002832:	693b      	ldr	r3, [r7, #16]
 8002834:	1ad3      	subs	r3, r2, r3
 8002836:	2b02      	cmp	r3, #2
 8002838:	d901      	bls.n	800283e <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800283a:	2303      	movs	r3, #3
 800283c:	e216      	b.n	8002c6c <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800283e:	4b22      	ldr	r3, [pc, #136]	; (80028c8 <HAL_RCC_OscConfig+0x27c>)
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002846:	2b00      	cmp	r3, #0
 8002848:	d1f0      	bne.n	800282c <HAL_RCC_OscConfig+0x1e0>
 800284a:	e000      	b.n	800284e <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800284c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	f003 0308 	and.w	r3, r3, #8
 8002856:	2b00      	cmp	r3, #0
 8002858:	d041      	beq.n	80028de <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	695b      	ldr	r3, [r3, #20]
 800285e:	2b00      	cmp	r3, #0
 8002860:	d01c      	beq.n	800289c <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002862:	4b19      	ldr	r3, [pc, #100]	; (80028c8 <HAL_RCC_OscConfig+0x27c>)
 8002864:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002868:	4a17      	ldr	r2, [pc, #92]	; (80028c8 <HAL_RCC_OscConfig+0x27c>)
 800286a:	f043 0301 	orr.w	r3, r3, #1
 800286e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002872:	f7fe fcdb 	bl	800122c <HAL_GetTick>
 8002876:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002878:	e008      	b.n	800288c <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800287a:	f7fe fcd7 	bl	800122c <HAL_GetTick>
 800287e:	4602      	mov	r2, r0
 8002880:	693b      	ldr	r3, [r7, #16]
 8002882:	1ad3      	subs	r3, r2, r3
 8002884:	2b02      	cmp	r3, #2
 8002886:	d901      	bls.n	800288c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002888:	2303      	movs	r3, #3
 800288a:	e1ef      	b.n	8002c6c <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800288c:	4b0e      	ldr	r3, [pc, #56]	; (80028c8 <HAL_RCC_OscConfig+0x27c>)
 800288e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002892:	f003 0302 	and.w	r3, r3, #2
 8002896:	2b00      	cmp	r3, #0
 8002898:	d0ef      	beq.n	800287a <HAL_RCC_OscConfig+0x22e>
 800289a:	e020      	b.n	80028de <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800289c:	4b0a      	ldr	r3, [pc, #40]	; (80028c8 <HAL_RCC_OscConfig+0x27c>)
 800289e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80028a2:	4a09      	ldr	r2, [pc, #36]	; (80028c8 <HAL_RCC_OscConfig+0x27c>)
 80028a4:	f023 0301 	bic.w	r3, r3, #1
 80028a8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028ac:	f7fe fcbe 	bl	800122c <HAL_GetTick>
 80028b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80028b2:	e00d      	b.n	80028d0 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80028b4:	f7fe fcba 	bl	800122c <HAL_GetTick>
 80028b8:	4602      	mov	r2, r0
 80028ba:	693b      	ldr	r3, [r7, #16]
 80028bc:	1ad3      	subs	r3, r2, r3
 80028be:	2b02      	cmp	r3, #2
 80028c0:	d906      	bls.n	80028d0 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80028c2:	2303      	movs	r3, #3
 80028c4:	e1d2      	b.n	8002c6c <HAL_RCC_OscConfig+0x620>
 80028c6:	bf00      	nop
 80028c8:	40021000 	.word	0x40021000
 80028cc:	20000008 	.word	0x20000008
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80028d0:	4b8c      	ldr	r3, [pc, #560]	; (8002b04 <HAL_RCC_OscConfig+0x4b8>)
 80028d2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80028d6:	f003 0302 	and.w	r3, r3, #2
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d1ea      	bne.n	80028b4 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	f003 0304 	and.w	r3, r3, #4
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	f000 80a6 	beq.w	8002a38 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80028ec:	2300      	movs	r3, #0
 80028ee:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80028f0:	4b84      	ldr	r3, [pc, #528]	; (8002b04 <HAL_RCC_OscConfig+0x4b8>)
 80028f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d101      	bne.n	8002900 <HAL_RCC_OscConfig+0x2b4>
 80028fc:	2301      	movs	r3, #1
 80028fe:	e000      	b.n	8002902 <HAL_RCC_OscConfig+0x2b6>
 8002900:	2300      	movs	r3, #0
 8002902:	2b00      	cmp	r3, #0
 8002904:	d00d      	beq.n	8002922 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002906:	4b7f      	ldr	r3, [pc, #508]	; (8002b04 <HAL_RCC_OscConfig+0x4b8>)
 8002908:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800290a:	4a7e      	ldr	r2, [pc, #504]	; (8002b04 <HAL_RCC_OscConfig+0x4b8>)
 800290c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002910:	6593      	str	r3, [r2, #88]	; 0x58
 8002912:	4b7c      	ldr	r3, [pc, #496]	; (8002b04 <HAL_RCC_OscConfig+0x4b8>)
 8002914:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002916:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800291a:	60fb      	str	r3, [r7, #12]
 800291c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800291e:	2301      	movs	r3, #1
 8002920:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002922:	4b79      	ldr	r3, [pc, #484]	; (8002b08 <HAL_RCC_OscConfig+0x4bc>)
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800292a:	2b00      	cmp	r3, #0
 800292c:	d118      	bne.n	8002960 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800292e:	4b76      	ldr	r3, [pc, #472]	; (8002b08 <HAL_RCC_OscConfig+0x4bc>)
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	4a75      	ldr	r2, [pc, #468]	; (8002b08 <HAL_RCC_OscConfig+0x4bc>)
 8002934:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002938:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800293a:	f7fe fc77 	bl	800122c <HAL_GetTick>
 800293e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002940:	e008      	b.n	8002954 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002942:	f7fe fc73 	bl	800122c <HAL_GetTick>
 8002946:	4602      	mov	r2, r0
 8002948:	693b      	ldr	r3, [r7, #16]
 800294a:	1ad3      	subs	r3, r2, r3
 800294c:	2b02      	cmp	r3, #2
 800294e:	d901      	bls.n	8002954 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8002950:	2303      	movs	r3, #3
 8002952:	e18b      	b.n	8002c6c <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002954:	4b6c      	ldr	r3, [pc, #432]	; (8002b08 <HAL_RCC_OscConfig+0x4bc>)
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800295c:	2b00      	cmp	r3, #0
 800295e:	d0f0      	beq.n	8002942 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	689b      	ldr	r3, [r3, #8]
 8002964:	2b01      	cmp	r3, #1
 8002966:	d108      	bne.n	800297a <HAL_RCC_OscConfig+0x32e>
 8002968:	4b66      	ldr	r3, [pc, #408]	; (8002b04 <HAL_RCC_OscConfig+0x4b8>)
 800296a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800296e:	4a65      	ldr	r2, [pc, #404]	; (8002b04 <HAL_RCC_OscConfig+0x4b8>)
 8002970:	f043 0301 	orr.w	r3, r3, #1
 8002974:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002978:	e024      	b.n	80029c4 <HAL_RCC_OscConfig+0x378>
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	689b      	ldr	r3, [r3, #8]
 800297e:	2b05      	cmp	r3, #5
 8002980:	d110      	bne.n	80029a4 <HAL_RCC_OscConfig+0x358>
 8002982:	4b60      	ldr	r3, [pc, #384]	; (8002b04 <HAL_RCC_OscConfig+0x4b8>)
 8002984:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002988:	4a5e      	ldr	r2, [pc, #376]	; (8002b04 <HAL_RCC_OscConfig+0x4b8>)
 800298a:	f043 0304 	orr.w	r3, r3, #4
 800298e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002992:	4b5c      	ldr	r3, [pc, #368]	; (8002b04 <HAL_RCC_OscConfig+0x4b8>)
 8002994:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002998:	4a5a      	ldr	r2, [pc, #360]	; (8002b04 <HAL_RCC_OscConfig+0x4b8>)
 800299a:	f043 0301 	orr.w	r3, r3, #1
 800299e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80029a2:	e00f      	b.n	80029c4 <HAL_RCC_OscConfig+0x378>
 80029a4:	4b57      	ldr	r3, [pc, #348]	; (8002b04 <HAL_RCC_OscConfig+0x4b8>)
 80029a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029aa:	4a56      	ldr	r2, [pc, #344]	; (8002b04 <HAL_RCC_OscConfig+0x4b8>)
 80029ac:	f023 0301 	bic.w	r3, r3, #1
 80029b0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80029b4:	4b53      	ldr	r3, [pc, #332]	; (8002b04 <HAL_RCC_OscConfig+0x4b8>)
 80029b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029ba:	4a52      	ldr	r2, [pc, #328]	; (8002b04 <HAL_RCC_OscConfig+0x4b8>)
 80029bc:	f023 0304 	bic.w	r3, r3, #4
 80029c0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	689b      	ldr	r3, [r3, #8]
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d016      	beq.n	80029fa <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029cc:	f7fe fc2e 	bl	800122c <HAL_GetTick>
 80029d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80029d2:	e00a      	b.n	80029ea <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80029d4:	f7fe fc2a 	bl	800122c <HAL_GetTick>
 80029d8:	4602      	mov	r2, r0
 80029da:	693b      	ldr	r3, [r7, #16]
 80029dc:	1ad3      	subs	r3, r2, r3
 80029de:	f241 3288 	movw	r2, #5000	; 0x1388
 80029e2:	4293      	cmp	r3, r2
 80029e4:	d901      	bls.n	80029ea <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80029e6:	2303      	movs	r3, #3
 80029e8:	e140      	b.n	8002c6c <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80029ea:	4b46      	ldr	r3, [pc, #280]	; (8002b04 <HAL_RCC_OscConfig+0x4b8>)
 80029ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029f0:	f003 0302 	and.w	r3, r3, #2
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d0ed      	beq.n	80029d4 <HAL_RCC_OscConfig+0x388>
 80029f8:	e015      	b.n	8002a26 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029fa:	f7fe fc17 	bl	800122c <HAL_GetTick>
 80029fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002a00:	e00a      	b.n	8002a18 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a02:	f7fe fc13 	bl	800122c <HAL_GetTick>
 8002a06:	4602      	mov	r2, r0
 8002a08:	693b      	ldr	r3, [r7, #16]
 8002a0a:	1ad3      	subs	r3, r2, r3
 8002a0c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a10:	4293      	cmp	r3, r2
 8002a12:	d901      	bls.n	8002a18 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8002a14:	2303      	movs	r3, #3
 8002a16:	e129      	b.n	8002c6c <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002a18:	4b3a      	ldr	r3, [pc, #232]	; (8002b04 <HAL_RCC_OscConfig+0x4b8>)
 8002a1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a1e:	f003 0302 	and.w	r3, r3, #2
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d1ed      	bne.n	8002a02 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002a26:	7ffb      	ldrb	r3, [r7, #31]
 8002a28:	2b01      	cmp	r3, #1
 8002a2a:	d105      	bne.n	8002a38 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002a2c:	4b35      	ldr	r3, [pc, #212]	; (8002b04 <HAL_RCC_OscConfig+0x4b8>)
 8002a2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a30:	4a34      	ldr	r2, [pc, #208]	; (8002b04 <HAL_RCC_OscConfig+0x4b8>)
 8002a32:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002a36:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	f003 0320 	and.w	r3, r3, #32
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d03c      	beq.n	8002abe <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	699b      	ldr	r3, [r3, #24]
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d01c      	beq.n	8002a86 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002a4c:	4b2d      	ldr	r3, [pc, #180]	; (8002b04 <HAL_RCC_OscConfig+0x4b8>)
 8002a4e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002a52:	4a2c      	ldr	r2, [pc, #176]	; (8002b04 <HAL_RCC_OscConfig+0x4b8>)
 8002a54:	f043 0301 	orr.w	r3, r3, #1
 8002a58:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a5c:	f7fe fbe6 	bl	800122c <HAL_GetTick>
 8002a60:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002a62:	e008      	b.n	8002a76 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002a64:	f7fe fbe2 	bl	800122c <HAL_GetTick>
 8002a68:	4602      	mov	r2, r0
 8002a6a:	693b      	ldr	r3, [r7, #16]
 8002a6c:	1ad3      	subs	r3, r2, r3
 8002a6e:	2b02      	cmp	r3, #2
 8002a70:	d901      	bls.n	8002a76 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8002a72:	2303      	movs	r3, #3
 8002a74:	e0fa      	b.n	8002c6c <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002a76:	4b23      	ldr	r3, [pc, #140]	; (8002b04 <HAL_RCC_OscConfig+0x4b8>)
 8002a78:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002a7c:	f003 0302 	and.w	r3, r3, #2
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d0ef      	beq.n	8002a64 <HAL_RCC_OscConfig+0x418>
 8002a84:	e01b      	b.n	8002abe <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002a86:	4b1f      	ldr	r3, [pc, #124]	; (8002b04 <HAL_RCC_OscConfig+0x4b8>)
 8002a88:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002a8c:	4a1d      	ldr	r2, [pc, #116]	; (8002b04 <HAL_RCC_OscConfig+0x4b8>)
 8002a8e:	f023 0301 	bic.w	r3, r3, #1
 8002a92:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a96:	f7fe fbc9 	bl	800122c <HAL_GetTick>
 8002a9a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002a9c:	e008      	b.n	8002ab0 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002a9e:	f7fe fbc5 	bl	800122c <HAL_GetTick>
 8002aa2:	4602      	mov	r2, r0
 8002aa4:	693b      	ldr	r3, [r7, #16]
 8002aa6:	1ad3      	subs	r3, r2, r3
 8002aa8:	2b02      	cmp	r3, #2
 8002aaa:	d901      	bls.n	8002ab0 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8002aac:	2303      	movs	r3, #3
 8002aae:	e0dd      	b.n	8002c6c <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002ab0:	4b14      	ldr	r3, [pc, #80]	; (8002b04 <HAL_RCC_OscConfig+0x4b8>)
 8002ab2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002ab6:	f003 0302 	and.w	r3, r3, #2
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d1ef      	bne.n	8002a9e <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	69db      	ldr	r3, [r3, #28]
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	f000 80d1 	beq.w	8002c6a <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002ac8:	4b0e      	ldr	r3, [pc, #56]	; (8002b04 <HAL_RCC_OscConfig+0x4b8>)
 8002aca:	689b      	ldr	r3, [r3, #8]
 8002acc:	f003 030c 	and.w	r3, r3, #12
 8002ad0:	2b0c      	cmp	r3, #12
 8002ad2:	f000 808b 	beq.w	8002bec <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	69db      	ldr	r3, [r3, #28]
 8002ada:	2b02      	cmp	r3, #2
 8002adc:	d15e      	bne.n	8002b9c <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ade:	4b09      	ldr	r3, [pc, #36]	; (8002b04 <HAL_RCC_OscConfig+0x4b8>)
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	4a08      	ldr	r2, [pc, #32]	; (8002b04 <HAL_RCC_OscConfig+0x4b8>)
 8002ae4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002ae8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002aea:	f7fe fb9f 	bl	800122c <HAL_GetTick>
 8002aee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002af0:	e00c      	b.n	8002b0c <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002af2:	f7fe fb9b 	bl	800122c <HAL_GetTick>
 8002af6:	4602      	mov	r2, r0
 8002af8:	693b      	ldr	r3, [r7, #16]
 8002afa:	1ad3      	subs	r3, r2, r3
 8002afc:	2b02      	cmp	r3, #2
 8002afe:	d905      	bls.n	8002b0c <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8002b00:	2303      	movs	r3, #3
 8002b02:	e0b3      	b.n	8002c6c <HAL_RCC_OscConfig+0x620>
 8002b04:	40021000 	.word	0x40021000
 8002b08:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002b0c:	4b59      	ldr	r3, [pc, #356]	; (8002c74 <HAL_RCC_OscConfig+0x628>)
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d1ec      	bne.n	8002af2 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002b18:	4b56      	ldr	r3, [pc, #344]	; (8002c74 <HAL_RCC_OscConfig+0x628>)
 8002b1a:	68da      	ldr	r2, [r3, #12]
 8002b1c:	4b56      	ldr	r3, [pc, #344]	; (8002c78 <HAL_RCC_OscConfig+0x62c>)
 8002b1e:	4013      	ands	r3, r2
 8002b20:	687a      	ldr	r2, [r7, #4]
 8002b22:	6a11      	ldr	r1, [r2, #32]
 8002b24:	687a      	ldr	r2, [r7, #4]
 8002b26:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002b28:	3a01      	subs	r2, #1
 8002b2a:	0112      	lsls	r2, r2, #4
 8002b2c:	4311      	orrs	r1, r2
 8002b2e:	687a      	ldr	r2, [r7, #4]
 8002b30:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8002b32:	0212      	lsls	r2, r2, #8
 8002b34:	4311      	orrs	r1, r2
 8002b36:	687a      	ldr	r2, [r7, #4]
 8002b38:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002b3a:	0852      	lsrs	r2, r2, #1
 8002b3c:	3a01      	subs	r2, #1
 8002b3e:	0552      	lsls	r2, r2, #21
 8002b40:	4311      	orrs	r1, r2
 8002b42:	687a      	ldr	r2, [r7, #4]
 8002b44:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002b46:	0852      	lsrs	r2, r2, #1
 8002b48:	3a01      	subs	r2, #1
 8002b4a:	0652      	lsls	r2, r2, #25
 8002b4c:	4311      	orrs	r1, r2
 8002b4e:	687a      	ldr	r2, [r7, #4]
 8002b50:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002b52:	06d2      	lsls	r2, r2, #27
 8002b54:	430a      	orrs	r2, r1
 8002b56:	4947      	ldr	r1, [pc, #284]	; (8002c74 <HAL_RCC_OscConfig+0x628>)
 8002b58:	4313      	orrs	r3, r2
 8002b5a:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002b5c:	4b45      	ldr	r3, [pc, #276]	; (8002c74 <HAL_RCC_OscConfig+0x628>)
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	4a44      	ldr	r2, [pc, #272]	; (8002c74 <HAL_RCC_OscConfig+0x628>)
 8002b62:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002b66:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002b68:	4b42      	ldr	r3, [pc, #264]	; (8002c74 <HAL_RCC_OscConfig+0x628>)
 8002b6a:	68db      	ldr	r3, [r3, #12]
 8002b6c:	4a41      	ldr	r2, [pc, #260]	; (8002c74 <HAL_RCC_OscConfig+0x628>)
 8002b6e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002b72:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b74:	f7fe fb5a 	bl	800122c <HAL_GetTick>
 8002b78:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002b7a:	e008      	b.n	8002b8e <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b7c:	f7fe fb56 	bl	800122c <HAL_GetTick>
 8002b80:	4602      	mov	r2, r0
 8002b82:	693b      	ldr	r3, [r7, #16]
 8002b84:	1ad3      	subs	r3, r2, r3
 8002b86:	2b02      	cmp	r3, #2
 8002b88:	d901      	bls.n	8002b8e <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8002b8a:	2303      	movs	r3, #3
 8002b8c:	e06e      	b.n	8002c6c <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002b8e:	4b39      	ldr	r3, [pc, #228]	; (8002c74 <HAL_RCC_OscConfig+0x628>)
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d0f0      	beq.n	8002b7c <HAL_RCC_OscConfig+0x530>
 8002b9a:	e066      	b.n	8002c6a <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b9c:	4b35      	ldr	r3, [pc, #212]	; (8002c74 <HAL_RCC_OscConfig+0x628>)
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	4a34      	ldr	r2, [pc, #208]	; (8002c74 <HAL_RCC_OscConfig+0x628>)
 8002ba2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002ba6:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8002ba8:	4b32      	ldr	r3, [pc, #200]	; (8002c74 <HAL_RCC_OscConfig+0x628>)
 8002baa:	68db      	ldr	r3, [r3, #12]
 8002bac:	4a31      	ldr	r2, [pc, #196]	; (8002c74 <HAL_RCC_OscConfig+0x628>)
 8002bae:	f023 0303 	bic.w	r3, r3, #3
 8002bb2:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8002bb4:	4b2f      	ldr	r3, [pc, #188]	; (8002c74 <HAL_RCC_OscConfig+0x628>)
 8002bb6:	68db      	ldr	r3, [r3, #12]
 8002bb8:	4a2e      	ldr	r2, [pc, #184]	; (8002c74 <HAL_RCC_OscConfig+0x628>)
 8002bba:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8002bbe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002bc2:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bc4:	f7fe fb32 	bl	800122c <HAL_GetTick>
 8002bc8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002bca:	e008      	b.n	8002bde <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002bcc:	f7fe fb2e 	bl	800122c <HAL_GetTick>
 8002bd0:	4602      	mov	r2, r0
 8002bd2:	693b      	ldr	r3, [r7, #16]
 8002bd4:	1ad3      	subs	r3, r2, r3
 8002bd6:	2b02      	cmp	r3, #2
 8002bd8:	d901      	bls.n	8002bde <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 8002bda:	2303      	movs	r3, #3
 8002bdc:	e046      	b.n	8002c6c <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002bde:	4b25      	ldr	r3, [pc, #148]	; (8002c74 <HAL_RCC_OscConfig+0x628>)
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d1f0      	bne.n	8002bcc <HAL_RCC_OscConfig+0x580>
 8002bea:	e03e      	b.n	8002c6a <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	69db      	ldr	r3, [r3, #28]
 8002bf0:	2b01      	cmp	r3, #1
 8002bf2:	d101      	bne.n	8002bf8 <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 8002bf4:	2301      	movs	r3, #1
 8002bf6:	e039      	b.n	8002c6c <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8002bf8:	4b1e      	ldr	r3, [pc, #120]	; (8002c74 <HAL_RCC_OscConfig+0x628>)
 8002bfa:	68db      	ldr	r3, [r3, #12]
 8002bfc:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002bfe:	697b      	ldr	r3, [r7, #20]
 8002c00:	f003 0203 	and.w	r2, r3, #3
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	6a1b      	ldr	r3, [r3, #32]
 8002c08:	429a      	cmp	r2, r3
 8002c0a:	d12c      	bne.n	8002c66 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002c0c:	697b      	ldr	r3, [r7, #20]
 8002c0e:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c16:	3b01      	subs	r3, #1
 8002c18:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c1a:	429a      	cmp	r2, r3
 8002c1c:	d123      	bne.n	8002c66 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8002c1e:	697b      	ldr	r3, [r7, #20]
 8002c20:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c28:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002c2a:	429a      	cmp	r2, r3
 8002c2c:	d11b      	bne.n	8002c66 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002c2e:	697b      	ldr	r3, [r7, #20]
 8002c30:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c38:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8002c3a:	429a      	cmp	r2, r3
 8002c3c:	d113      	bne.n	8002c66 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002c3e:	697b      	ldr	r3, [r7, #20]
 8002c40:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c48:	085b      	lsrs	r3, r3, #1
 8002c4a:	3b01      	subs	r3, #1
 8002c4c:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002c4e:	429a      	cmp	r2, r3
 8002c50:	d109      	bne.n	8002c66 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002c52:	697b      	ldr	r3, [r7, #20]
 8002c54:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c5c:	085b      	lsrs	r3, r3, #1
 8002c5e:	3b01      	subs	r3, #1
 8002c60:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002c62:	429a      	cmp	r2, r3
 8002c64:	d001      	beq.n	8002c6a <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 8002c66:	2301      	movs	r3, #1
 8002c68:	e000      	b.n	8002c6c <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 8002c6a:	2300      	movs	r3, #0
}
 8002c6c:	4618      	mov	r0, r3
 8002c6e:	3720      	adds	r7, #32
 8002c70:	46bd      	mov	sp, r7
 8002c72:	bd80      	pop	{r7, pc}
 8002c74:	40021000 	.word	0x40021000
 8002c78:	019f800c 	.word	0x019f800c

08002c7c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002c7c:	b580      	push	{r7, lr}
 8002c7e:	b086      	sub	sp, #24
 8002c80:	af00      	add	r7, sp, #0
 8002c82:	6078      	str	r0, [r7, #4]
 8002c84:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8002c86:	2300      	movs	r3, #0
 8002c88:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d101      	bne.n	8002c94 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002c90:	2301      	movs	r3, #1
 8002c92:	e11e      	b.n	8002ed2 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002c94:	4b91      	ldr	r3, [pc, #580]	; (8002edc <HAL_RCC_ClockConfig+0x260>)
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	f003 030f 	and.w	r3, r3, #15
 8002c9c:	683a      	ldr	r2, [r7, #0]
 8002c9e:	429a      	cmp	r2, r3
 8002ca0:	d910      	bls.n	8002cc4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ca2:	4b8e      	ldr	r3, [pc, #568]	; (8002edc <HAL_RCC_ClockConfig+0x260>)
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	f023 020f 	bic.w	r2, r3, #15
 8002caa:	498c      	ldr	r1, [pc, #560]	; (8002edc <HAL_RCC_ClockConfig+0x260>)
 8002cac:	683b      	ldr	r3, [r7, #0]
 8002cae:	4313      	orrs	r3, r2
 8002cb0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002cb2:	4b8a      	ldr	r3, [pc, #552]	; (8002edc <HAL_RCC_ClockConfig+0x260>)
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	f003 030f 	and.w	r3, r3, #15
 8002cba:	683a      	ldr	r2, [r7, #0]
 8002cbc:	429a      	cmp	r2, r3
 8002cbe:	d001      	beq.n	8002cc4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002cc0:	2301      	movs	r3, #1
 8002cc2:	e106      	b.n	8002ed2 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	f003 0301 	and.w	r3, r3, #1
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d073      	beq.n	8002db8 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	685b      	ldr	r3, [r3, #4]
 8002cd4:	2b03      	cmp	r3, #3
 8002cd6:	d129      	bne.n	8002d2c <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002cd8:	4b81      	ldr	r3, [pc, #516]	; (8002ee0 <HAL_RCC_ClockConfig+0x264>)
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d101      	bne.n	8002ce8 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8002ce4:	2301      	movs	r3, #1
 8002ce6:	e0f4      	b.n	8002ed2 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8002ce8:	f000 f99e 	bl	8003028 <RCC_GetSysClockFreqFromPLLSource>
 8002cec:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8002cee:	693b      	ldr	r3, [r7, #16]
 8002cf0:	4a7c      	ldr	r2, [pc, #496]	; (8002ee4 <HAL_RCC_ClockConfig+0x268>)
 8002cf2:	4293      	cmp	r3, r2
 8002cf4:	d93f      	bls.n	8002d76 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8002cf6:	4b7a      	ldr	r3, [pc, #488]	; (8002ee0 <HAL_RCC_ClockConfig+0x264>)
 8002cf8:	689b      	ldr	r3, [r3, #8]
 8002cfa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d009      	beq.n	8002d16 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d033      	beq.n	8002d76 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d12f      	bne.n	8002d76 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002d16:	4b72      	ldr	r3, [pc, #456]	; (8002ee0 <HAL_RCC_ClockConfig+0x264>)
 8002d18:	689b      	ldr	r3, [r3, #8]
 8002d1a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002d1e:	4a70      	ldr	r2, [pc, #448]	; (8002ee0 <HAL_RCC_ClockConfig+0x264>)
 8002d20:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002d24:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8002d26:	2380      	movs	r3, #128	; 0x80
 8002d28:	617b      	str	r3, [r7, #20]
 8002d2a:	e024      	b.n	8002d76 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	685b      	ldr	r3, [r3, #4]
 8002d30:	2b02      	cmp	r3, #2
 8002d32:	d107      	bne.n	8002d44 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002d34:	4b6a      	ldr	r3, [pc, #424]	; (8002ee0 <HAL_RCC_ClockConfig+0x264>)
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d109      	bne.n	8002d54 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002d40:	2301      	movs	r3, #1
 8002d42:	e0c6      	b.n	8002ed2 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002d44:	4b66      	ldr	r3, [pc, #408]	; (8002ee0 <HAL_RCC_ClockConfig+0x264>)
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d101      	bne.n	8002d54 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002d50:	2301      	movs	r3, #1
 8002d52:	e0be      	b.n	8002ed2 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8002d54:	f000 f8ce 	bl	8002ef4 <HAL_RCC_GetSysClockFreq>
 8002d58:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8002d5a:	693b      	ldr	r3, [r7, #16]
 8002d5c:	4a61      	ldr	r2, [pc, #388]	; (8002ee4 <HAL_RCC_ClockConfig+0x268>)
 8002d5e:	4293      	cmp	r3, r2
 8002d60:	d909      	bls.n	8002d76 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002d62:	4b5f      	ldr	r3, [pc, #380]	; (8002ee0 <HAL_RCC_ClockConfig+0x264>)
 8002d64:	689b      	ldr	r3, [r3, #8]
 8002d66:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002d6a:	4a5d      	ldr	r2, [pc, #372]	; (8002ee0 <HAL_RCC_ClockConfig+0x264>)
 8002d6c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002d70:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8002d72:	2380      	movs	r3, #128	; 0x80
 8002d74:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002d76:	4b5a      	ldr	r3, [pc, #360]	; (8002ee0 <HAL_RCC_ClockConfig+0x264>)
 8002d78:	689b      	ldr	r3, [r3, #8]
 8002d7a:	f023 0203 	bic.w	r2, r3, #3
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	685b      	ldr	r3, [r3, #4]
 8002d82:	4957      	ldr	r1, [pc, #348]	; (8002ee0 <HAL_RCC_ClockConfig+0x264>)
 8002d84:	4313      	orrs	r3, r2
 8002d86:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002d88:	f7fe fa50 	bl	800122c <HAL_GetTick>
 8002d8c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d8e:	e00a      	b.n	8002da6 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d90:	f7fe fa4c 	bl	800122c <HAL_GetTick>
 8002d94:	4602      	mov	r2, r0
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	1ad3      	subs	r3, r2, r3
 8002d9a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d9e:	4293      	cmp	r3, r2
 8002da0:	d901      	bls.n	8002da6 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8002da2:	2303      	movs	r3, #3
 8002da4:	e095      	b.n	8002ed2 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002da6:	4b4e      	ldr	r3, [pc, #312]	; (8002ee0 <HAL_RCC_ClockConfig+0x264>)
 8002da8:	689b      	ldr	r3, [r3, #8]
 8002daa:	f003 020c 	and.w	r2, r3, #12
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	685b      	ldr	r3, [r3, #4]
 8002db2:	009b      	lsls	r3, r3, #2
 8002db4:	429a      	cmp	r2, r3
 8002db6:	d1eb      	bne.n	8002d90 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	f003 0302 	and.w	r3, r3, #2
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d023      	beq.n	8002e0c <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	f003 0304 	and.w	r3, r3, #4
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d005      	beq.n	8002ddc <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002dd0:	4b43      	ldr	r3, [pc, #268]	; (8002ee0 <HAL_RCC_ClockConfig+0x264>)
 8002dd2:	689b      	ldr	r3, [r3, #8]
 8002dd4:	4a42      	ldr	r2, [pc, #264]	; (8002ee0 <HAL_RCC_ClockConfig+0x264>)
 8002dd6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002dda:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	f003 0308 	and.w	r3, r3, #8
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d007      	beq.n	8002df8 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8002de8:	4b3d      	ldr	r3, [pc, #244]	; (8002ee0 <HAL_RCC_ClockConfig+0x264>)
 8002dea:	689b      	ldr	r3, [r3, #8]
 8002dec:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8002df0:	4a3b      	ldr	r2, [pc, #236]	; (8002ee0 <HAL_RCC_ClockConfig+0x264>)
 8002df2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002df6:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002df8:	4b39      	ldr	r3, [pc, #228]	; (8002ee0 <HAL_RCC_ClockConfig+0x264>)
 8002dfa:	689b      	ldr	r3, [r3, #8]
 8002dfc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	689b      	ldr	r3, [r3, #8]
 8002e04:	4936      	ldr	r1, [pc, #216]	; (8002ee0 <HAL_RCC_ClockConfig+0x264>)
 8002e06:	4313      	orrs	r3, r2
 8002e08:	608b      	str	r3, [r1, #8]
 8002e0a:	e008      	b.n	8002e1e <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8002e0c:	697b      	ldr	r3, [r7, #20]
 8002e0e:	2b80      	cmp	r3, #128	; 0x80
 8002e10:	d105      	bne.n	8002e1e <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8002e12:	4b33      	ldr	r3, [pc, #204]	; (8002ee0 <HAL_RCC_ClockConfig+0x264>)
 8002e14:	689b      	ldr	r3, [r3, #8]
 8002e16:	4a32      	ldr	r2, [pc, #200]	; (8002ee0 <HAL_RCC_ClockConfig+0x264>)
 8002e18:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002e1c:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002e1e:	4b2f      	ldr	r3, [pc, #188]	; (8002edc <HAL_RCC_ClockConfig+0x260>)
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	f003 030f 	and.w	r3, r3, #15
 8002e26:	683a      	ldr	r2, [r7, #0]
 8002e28:	429a      	cmp	r2, r3
 8002e2a:	d21d      	bcs.n	8002e68 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e2c:	4b2b      	ldr	r3, [pc, #172]	; (8002edc <HAL_RCC_ClockConfig+0x260>)
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	f023 020f 	bic.w	r2, r3, #15
 8002e34:	4929      	ldr	r1, [pc, #164]	; (8002edc <HAL_RCC_ClockConfig+0x260>)
 8002e36:	683b      	ldr	r3, [r7, #0]
 8002e38:	4313      	orrs	r3, r2
 8002e3a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002e3c:	f7fe f9f6 	bl	800122c <HAL_GetTick>
 8002e40:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e42:	e00a      	b.n	8002e5a <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002e44:	f7fe f9f2 	bl	800122c <HAL_GetTick>
 8002e48:	4602      	mov	r2, r0
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	1ad3      	subs	r3, r2, r3
 8002e4e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e52:	4293      	cmp	r3, r2
 8002e54:	d901      	bls.n	8002e5a <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8002e56:	2303      	movs	r3, #3
 8002e58:	e03b      	b.n	8002ed2 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e5a:	4b20      	ldr	r3, [pc, #128]	; (8002edc <HAL_RCC_ClockConfig+0x260>)
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	f003 030f 	and.w	r3, r3, #15
 8002e62:	683a      	ldr	r2, [r7, #0]
 8002e64:	429a      	cmp	r2, r3
 8002e66:	d1ed      	bne.n	8002e44 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	f003 0304 	and.w	r3, r3, #4
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d008      	beq.n	8002e86 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002e74:	4b1a      	ldr	r3, [pc, #104]	; (8002ee0 <HAL_RCC_ClockConfig+0x264>)
 8002e76:	689b      	ldr	r3, [r3, #8]
 8002e78:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	68db      	ldr	r3, [r3, #12]
 8002e80:	4917      	ldr	r1, [pc, #92]	; (8002ee0 <HAL_RCC_ClockConfig+0x264>)
 8002e82:	4313      	orrs	r3, r2
 8002e84:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	f003 0308 	and.w	r3, r3, #8
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d009      	beq.n	8002ea6 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002e92:	4b13      	ldr	r3, [pc, #76]	; (8002ee0 <HAL_RCC_ClockConfig+0x264>)
 8002e94:	689b      	ldr	r3, [r3, #8]
 8002e96:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	691b      	ldr	r3, [r3, #16]
 8002e9e:	00db      	lsls	r3, r3, #3
 8002ea0:	490f      	ldr	r1, [pc, #60]	; (8002ee0 <HAL_RCC_ClockConfig+0x264>)
 8002ea2:	4313      	orrs	r3, r2
 8002ea4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002ea6:	f000 f825 	bl	8002ef4 <HAL_RCC_GetSysClockFreq>
 8002eaa:	4602      	mov	r2, r0
 8002eac:	4b0c      	ldr	r3, [pc, #48]	; (8002ee0 <HAL_RCC_ClockConfig+0x264>)
 8002eae:	689b      	ldr	r3, [r3, #8]
 8002eb0:	091b      	lsrs	r3, r3, #4
 8002eb2:	f003 030f 	and.w	r3, r3, #15
 8002eb6:	490c      	ldr	r1, [pc, #48]	; (8002ee8 <HAL_RCC_ClockConfig+0x26c>)
 8002eb8:	5ccb      	ldrb	r3, [r1, r3]
 8002eba:	f003 031f 	and.w	r3, r3, #31
 8002ebe:	fa22 f303 	lsr.w	r3, r2, r3
 8002ec2:	4a0a      	ldr	r2, [pc, #40]	; (8002eec <HAL_RCC_ClockConfig+0x270>)
 8002ec4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8002ec6:	4b0a      	ldr	r3, [pc, #40]	; (8002ef0 <HAL_RCC_ClockConfig+0x274>)
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	4618      	mov	r0, r3
 8002ecc:	f7fe f962 	bl	8001194 <HAL_InitTick>
 8002ed0:	4603      	mov	r3, r0
}
 8002ed2:	4618      	mov	r0, r3
 8002ed4:	3718      	adds	r7, #24
 8002ed6:	46bd      	mov	sp, r7
 8002ed8:	bd80      	pop	{r7, pc}
 8002eda:	bf00      	nop
 8002edc:	40022000 	.word	0x40022000
 8002ee0:	40021000 	.word	0x40021000
 8002ee4:	04c4b400 	.word	0x04c4b400
 8002ee8:	08005248 	.word	0x08005248
 8002eec:	20000004 	.word	0x20000004
 8002ef0:	20000008 	.word	0x20000008

08002ef4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002ef4:	b480      	push	{r7}
 8002ef6:	b087      	sub	sp, #28
 8002ef8:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8002efa:	4b2c      	ldr	r3, [pc, #176]	; (8002fac <HAL_RCC_GetSysClockFreq+0xb8>)
 8002efc:	689b      	ldr	r3, [r3, #8]
 8002efe:	f003 030c 	and.w	r3, r3, #12
 8002f02:	2b04      	cmp	r3, #4
 8002f04:	d102      	bne.n	8002f0c <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002f06:	4b2a      	ldr	r3, [pc, #168]	; (8002fb0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002f08:	613b      	str	r3, [r7, #16]
 8002f0a:	e047      	b.n	8002f9c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8002f0c:	4b27      	ldr	r3, [pc, #156]	; (8002fac <HAL_RCC_GetSysClockFreq+0xb8>)
 8002f0e:	689b      	ldr	r3, [r3, #8]
 8002f10:	f003 030c 	and.w	r3, r3, #12
 8002f14:	2b08      	cmp	r3, #8
 8002f16:	d102      	bne.n	8002f1e <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002f18:	4b26      	ldr	r3, [pc, #152]	; (8002fb4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002f1a:	613b      	str	r3, [r7, #16]
 8002f1c:	e03e      	b.n	8002f9c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8002f1e:	4b23      	ldr	r3, [pc, #140]	; (8002fac <HAL_RCC_GetSysClockFreq+0xb8>)
 8002f20:	689b      	ldr	r3, [r3, #8]
 8002f22:	f003 030c 	and.w	r3, r3, #12
 8002f26:	2b0c      	cmp	r3, #12
 8002f28:	d136      	bne.n	8002f98 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002f2a:	4b20      	ldr	r3, [pc, #128]	; (8002fac <HAL_RCC_GetSysClockFreq+0xb8>)
 8002f2c:	68db      	ldr	r3, [r3, #12]
 8002f2e:	f003 0303 	and.w	r3, r3, #3
 8002f32:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002f34:	4b1d      	ldr	r3, [pc, #116]	; (8002fac <HAL_RCC_GetSysClockFreq+0xb8>)
 8002f36:	68db      	ldr	r3, [r3, #12]
 8002f38:	091b      	lsrs	r3, r3, #4
 8002f3a:	f003 030f 	and.w	r3, r3, #15
 8002f3e:	3301      	adds	r3, #1
 8002f40:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	2b03      	cmp	r3, #3
 8002f46:	d10c      	bne.n	8002f62 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002f48:	4a1a      	ldr	r2, [pc, #104]	; (8002fb4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002f4a:	68bb      	ldr	r3, [r7, #8]
 8002f4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f50:	4a16      	ldr	r2, [pc, #88]	; (8002fac <HAL_RCC_GetSysClockFreq+0xb8>)
 8002f52:	68d2      	ldr	r2, [r2, #12]
 8002f54:	0a12      	lsrs	r2, r2, #8
 8002f56:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002f5a:	fb02 f303 	mul.w	r3, r2, r3
 8002f5e:	617b      	str	r3, [r7, #20]
      break;
 8002f60:	e00c      	b.n	8002f7c <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002f62:	4a13      	ldr	r2, [pc, #76]	; (8002fb0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002f64:	68bb      	ldr	r3, [r7, #8]
 8002f66:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f6a:	4a10      	ldr	r2, [pc, #64]	; (8002fac <HAL_RCC_GetSysClockFreq+0xb8>)
 8002f6c:	68d2      	ldr	r2, [r2, #12]
 8002f6e:	0a12      	lsrs	r2, r2, #8
 8002f70:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002f74:	fb02 f303 	mul.w	r3, r2, r3
 8002f78:	617b      	str	r3, [r7, #20]
      break;
 8002f7a:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002f7c:	4b0b      	ldr	r3, [pc, #44]	; (8002fac <HAL_RCC_GetSysClockFreq+0xb8>)
 8002f7e:	68db      	ldr	r3, [r3, #12]
 8002f80:	0e5b      	lsrs	r3, r3, #25
 8002f82:	f003 0303 	and.w	r3, r3, #3
 8002f86:	3301      	adds	r3, #1
 8002f88:	005b      	lsls	r3, r3, #1
 8002f8a:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8002f8c:	697a      	ldr	r2, [r7, #20]
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f94:	613b      	str	r3, [r7, #16]
 8002f96:	e001      	b.n	8002f9c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8002f98:	2300      	movs	r3, #0
 8002f9a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8002f9c:	693b      	ldr	r3, [r7, #16]
}
 8002f9e:	4618      	mov	r0, r3
 8002fa0:	371c      	adds	r7, #28
 8002fa2:	46bd      	mov	sp, r7
 8002fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa8:	4770      	bx	lr
 8002faa:	bf00      	nop
 8002fac:	40021000 	.word	0x40021000
 8002fb0:	00f42400 	.word	0x00f42400
 8002fb4:	016e3600 	.word	0x016e3600

08002fb8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002fb8:	b480      	push	{r7}
 8002fba:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002fbc:	4b03      	ldr	r3, [pc, #12]	; (8002fcc <HAL_RCC_GetHCLKFreq+0x14>)
 8002fbe:	681b      	ldr	r3, [r3, #0]
}
 8002fc0:	4618      	mov	r0, r3
 8002fc2:	46bd      	mov	sp, r7
 8002fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc8:	4770      	bx	lr
 8002fca:	bf00      	nop
 8002fcc:	20000004 	.word	0x20000004

08002fd0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002fd0:	b580      	push	{r7, lr}
 8002fd2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002fd4:	f7ff fff0 	bl	8002fb8 <HAL_RCC_GetHCLKFreq>
 8002fd8:	4602      	mov	r2, r0
 8002fda:	4b06      	ldr	r3, [pc, #24]	; (8002ff4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002fdc:	689b      	ldr	r3, [r3, #8]
 8002fde:	0a1b      	lsrs	r3, r3, #8
 8002fe0:	f003 0307 	and.w	r3, r3, #7
 8002fe4:	4904      	ldr	r1, [pc, #16]	; (8002ff8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002fe6:	5ccb      	ldrb	r3, [r1, r3]
 8002fe8:	f003 031f 	and.w	r3, r3, #31
 8002fec:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002ff0:	4618      	mov	r0, r3
 8002ff2:	bd80      	pop	{r7, pc}
 8002ff4:	40021000 	.word	0x40021000
 8002ff8:	08005258 	.word	0x08005258

08002ffc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002ffc:	b580      	push	{r7, lr}
 8002ffe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003000:	f7ff ffda 	bl	8002fb8 <HAL_RCC_GetHCLKFreq>
 8003004:	4602      	mov	r2, r0
 8003006:	4b06      	ldr	r3, [pc, #24]	; (8003020 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003008:	689b      	ldr	r3, [r3, #8]
 800300a:	0adb      	lsrs	r3, r3, #11
 800300c:	f003 0307 	and.w	r3, r3, #7
 8003010:	4904      	ldr	r1, [pc, #16]	; (8003024 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003012:	5ccb      	ldrb	r3, [r1, r3]
 8003014:	f003 031f 	and.w	r3, r3, #31
 8003018:	fa22 f303 	lsr.w	r3, r2, r3
}
 800301c:	4618      	mov	r0, r3
 800301e:	bd80      	pop	{r7, pc}
 8003020:	40021000 	.word	0x40021000
 8003024:	08005258 	.word	0x08005258

08003028 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8003028:	b480      	push	{r7}
 800302a:	b087      	sub	sp, #28
 800302c:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800302e:	4b1e      	ldr	r3, [pc, #120]	; (80030a8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003030:	68db      	ldr	r3, [r3, #12]
 8003032:	f003 0303 	and.w	r3, r3, #3
 8003036:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003038:	4b1b      	ldr	r3, [pc, #108]	; (80030a8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800303a:	68db      	ldr	r3, [r3, #12]
 800303c:	091b      	lsrs	r3, r3, #4
 800303e:	f003 030f 	and.w	r3, r3, #15
 8003042:	3301      	adds	r3, #1
 8003044:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8003046:	693b      	ldr	r3, [r7, #16]
 8003048:	2b03      	cmp	r3, #3
 800304a:	d10c      	bne.n	8003066 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800304c:	4a17      	ldr	r2, [pc, #92]	; (80030ac <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	fbb2 f3f3 	udiv	r3, r2, r3
 8003054:	4a14      	ldr	r2, [pc, #80]	; (80030a8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003056:	68d2      	ldr	r2, [r2, #12]
 8003058:	0a12      	lsrs	r2, r2, #8
 800305a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800305e:	fb02 f303 	mul.w	r3, r2, r3
 8003062:	617b      	str	r3, [r7, #20]
    break;
 8003064:	e00c      	b.n	8003080 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003066:	4a12      	ldr	r2, [pc, #72]	; (80030b0 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	fbb2 f3f3 	udiv	r3, r2, r3
 800306e:	4a0e      	ldr	r2, [pc, #56]	; (80030a8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003070:	68d2      	ldr	r2, [r2, #12]
 8003072:	0a12      	lsrs	r2, r2, #8
 8003074:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003078:	fb02 f303 	mul.w	r3, r2, r3
 800307c:	617b      	str	r3, [r7, #20]
    break;
 800307e:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003080:	4b09      	ldr	r3, [pc, #36]	; (80030a8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003082:	68db      	ldr	r3, [r3, #12]
 8003084:	0e5b      	lsrs	r3, r3, #25
 8003086:	f003 0303 	and.w	r3, r3, #3
 800308a:	3301      	adds	r3, #1
 800308c:	005b      	lsls	r3, r3, #1
 800308e:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8003090:	697a      	ldr	r2, [r7, #20]
 8003092:	68bb      	ldr	r3, [r7, #8]
 8003094:	fbb2 f3f3 	udiv	r3, r2, r3
 8003098:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800309a:	687b      	ldr	r3, [r7, #4]
}
 800309c:	4618      	mov	r0, r3
 800309e:	371c      	adds	r7, #28
 80030a0:	46bd      	mov	sp, r7
 80030a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a6:	4770      	bx	lr
 80030a8:	40021000 	.word	0x40021000
 80030ac:	016e3600 	.word	0x016e3600
 80030b0:	00f42400 	.word	0x00f42400

080030b4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80030b4:	b580      	push	{r7, lr}
 80030b6:	b086      	sub	sp, #24
 80030b8:	af00      	add	r7, sp, #0
 80030ba:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80030bc:	2300      	movs	r3, #0
 80030be:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80030c0:	2300      	movs	r3, #0
 80030c2:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	f000 8098 	beq.w	8003202 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80030d2:	2300      	movs	r3, #0
 80030d4:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80030d6:	4b43      	ldr	r3, [pc, #268]	; (80031e4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80030d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d10d      	bne.n	80030fe <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80030e2:	4b40      	ldr	r3, [pc, #256]	; (80031e4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80030e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030e6:	4a3f      	ldr	r2, [pc, #252]	; (80031e4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80030e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80030ec:	6593      	str	r3, [r2, #88]	; 0x58
 80030ee:	4b3d      	ldr	r3, [pc, #244]	; (80031e4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80030f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030f6:	60bb      	str	r3, [r7, #8]
 80030f8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80030fa:	2301      	movs	r3, #1
 80030fc:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80030fe:	4b3a      	ldr	r3, [pc, #232]	; (80031e8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	4a39      	ldr	r2, [pc, #228]	; (80031e8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003104:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003108:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800310a:	f7fe f88f 	bl	800122c <HAL_GetTick>
 800310e:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003110:	e009      	b.n	8003126 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003112:	f7fe f88b 	bl	800122c <HAL_GetTick>
 8003116:	4602      	mov	r2, r0
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	1ad3      	subs	r3, r2, r3
 800311c:	2b02      	cmp	r3, #2
 800311e:	d902      	bls.n	8003126 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8003120:	2303      	movs	r3, #3
 8003122:	74fb      	strb	r3, [r7, #19]
        break;
 8003124:	e005      	b.n	8003132 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003126:	4b30      	ldr	r3, [pc, #192]	; (80031e8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800312e:	2b00      	cmp	r3, #0
 8003130:	d0ef      	beq.n	8003112 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8003132:	7cfb      	ldrb	r3, [r7, #19]
 8003134:	2b00      	cmp	r3, #0
 8003136:	d159      	bne.n	80031ec <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003138:	4b2a      	ldr	r3, [pc, #168]	; (80031e4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800313a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800313e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003142:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003144:	697b      	ldr	r3, [r7, #20]
 8003146:	2b00      	cmp	r3, #0
 8003148:	d01e      	beq.n	8003188 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800314e:	697a      	ldr	r2, [r7, #20]
 8003150:	429a      	cmp	r2, r3
 8003152:	d019      	beq.n	8003188 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003154:	4b23      	ldr	r3, [pc, #140]	; (80031e4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003156:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800315a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800315e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003160:	4b20      	ldr	r3, [pc, #128]	; (80031e4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003162:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003166:	4a1f      	ldr	r2, [pc, #124]	; (80031e4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003168:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800316c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003170:	4b1c      	ldr	r3, [pc, #112]	; (80031e4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003172:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003176:	4a1b      	ldr	r2, [pc, #108]	; (80031e4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003178:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800317c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003180:	4a18      	ldr	r2, [pc, #96]	; (80031e4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003182:	697b      	ldr	r3, [r7, #20]
 8003184:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003188:	697b      	ldr	r3, [r7, #20]
 800318a:	f003 0301 	and.w	r3, r3, #1
 800318e:	2b00      	cmp	r3, #0
 8003190:	d016      	beq.n	80031c0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003192:	f7fe f84b 	bl	800122c <HAL_GetTick>
 8003196:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003198:	e00b      	b.n	80031b2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800319a:	f7fe f847 	bl	800122c <HAL_GetTick>
 800319e:	4602      	mov	r2, r0
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	1ad3      	subs	r3, r2, r3
 80031a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80031a8:	4293      	cmp	r3, r2
 80031aa:	d902      	bls.n	80031b2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 80031ac:	2303      	movs	r3, #3
 80031ae:	74fb      	strb	r3, [r7, #19]
            break;
 80031b0:	e006      	b.n	80031c0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80031b2:	4b0c      	ldr	r3, [pc, #48]	; (80031e4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80031b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031b8:	f003 0302 	and.w	r3, r3, #2
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d0ec      	beq.n	800319a <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 80031c0:	7cfb      	ldrb	r3, [r7, #19]
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d10b      	bne.n	80031de <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80031c6:	4b07      	ldr	r3, [pc, #28]	; (80031e4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80031c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031cc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80031d4:	4903      	ldr	r1, [pc, #12]	; (80031e4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80031d6:	4313      	orrs	r3, r2
 80031d8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80031dc:	e008      	b.n	80031f0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80031de:	7cfb      	ldrb	r3, [r7, #19]
 80031e0:	74bb      	strb	r3, [r7, #18]
 80031e2:	e005      	b.n	80031f0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80031e4:	40021000 	.word	0x40021000
 80031e8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80031ec:	7cfb      	ldrb	r3, [r7, #19]
 80031ee:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80031f0:	7c7b      	ldrb	r3, [r7, #17]
 80031f2:	2b01      	cmp	r3, #1
 80031f4:	d105      	bne.n	8003202 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80031f6:	4ba7      	ldr	r3, [pc, #668]	; (8003494 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80031f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031fa:	4aa6      	ldr	r2, [pc, #664]	; (8003494 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80031fc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003200:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	f003 0301 	and.w	r3, r3, #1
 800320a:	2b00      	cmp	r3, #0
 800320c:	d00a      	beq.n	8003224 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800320e:	4ba1      	ldr	r3, [pc, #644]	; (8003494 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003210:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003214:	f023 0203 	bic.w	r2, r3, #3
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	685b      	ldr	r3, [r3, #4]
 800321c:	499d      	ldr	r1, [pc, #628]	; (8003494 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800321e:	4313      	orrs	r3, r2
 8003220:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	f003 0302 	and.w	r3, r3, #2
 800322c:	2b00      	cmp	r3, #0
 800322e:	d00a      	beq.n	8003246 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003230:	4b98      	ldr	r3, [pc, #608]	; (8003494 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003232:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003236:	f023 020c 	bic.w	r2, r3, #12
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	689b      	ldr	r3, [r3, #8]
 800323e:	4995      	ldr	r1, [pc, #596]	; (8003494 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003240:	4313      	orrs	r3, r2
 8003242:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	f003 0304 	and.w	r3, r3, #4
 800324e:	2b00      	cmp	r3, #0
 8003250:	d00a      	beq.n	8003268 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003252:	4b90      	ldr	r3, [pc, #576]	; (8003494 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003254:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003258:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	68db      	ldr	r3, [r3, #12]
 8003260:	498c      	ldr	r1, [pc, #560]	; (8003494 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003262:	4313      	orrs	r3, r2
 8003264:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	f003 0308 	and.w	r3, r3, #8
 8003270:	2b00      	cmp	r3, #0
 8003272:	d00a      	beq.n	800328a <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003274:	4b87      	ldr	r3, [pc, #540]	; (8003494 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003276:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800327a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	691b      	ldr	r3, [r3, #16]
 8003282:	4984      	ldr	r1, [pc, #528]	; (8003494 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003284:	4313      	orrs	r3, r2
 8003286:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	f003 0310 	and.w	r3, r3, #16
 8003292:	2b00      	cmp	r3, #0
 8003294:	d00a      	beq.n	80032ac <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003296:	4b7f      	ldr	r3, [pc, #508]	; (8003494 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003298:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800329c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	695b      	ldr	r3, [r3, #20]
 80032a4:	497b      	ldr	r1, [pc, #492]	; (8003494 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80032a6:	4313      	orrs	r3, r2
 80032a8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	f003 0320 	and.w	r3, r3, #32
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d00a      	beq.n	80032ce <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80032b8:	4b76      	ldr	r3, [pc, #472]	; (8003494 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80032ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032be:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	699b      	ldr	r3, [r3, #24]
 80032c6:	4973      	ldr	r1, [pc, #460]	; (8003494 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80032c8:	4313      	orrs	r3, r2
 80032ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d00a      	beq.n	80032f0 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80032da:	4b6e      	ldr	r3, [pc, #440]	; (8003494 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80032dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032e0:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	69db      	ldr	r3, [r3, #28]
 80032e8:	496a      	ldr	r1, [pc, #424]	; (8003494 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80032ea:	4313      	orrs	r3, r2
 80032ec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d00a      	beq.n	8003312 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80032fc:	4b65      	ldr	r3, [pc, #404]	; (8003494 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80032fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003302:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	6a1b      	ldr	r3, [r3, #32]
 800330a:	4962      	ldr	r1, [pc, #392]	; (8003494 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800330c:	4313      	orrs	r3, r2
 800330e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800331a:	2b00      	cmp	r3, #0
 800331c:	d00a      	beq.n	8003334 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800331e:	4b5d      	ldr	r3, [pc, #372]	; (8003494 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003320:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003324:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800332c:	4959      	ldr	r1, [pc, #356]	; (8003494 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800332e:	4313      	orrs	r3, r2
 8003330:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800333c:	2b00      	cmp	r3, #0
 800333e:	d00a      	beq.n	8003356 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003340:	4b54      	ldr	r3, [pc, #336]	; (8003494 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003342:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003346:	f023 0203 	bic.w	r2, r3, #3
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800334e:	4951      	ldr	r1, [pc, #324]	; (8003494 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003350:	4313      	orrs	r3, r2
 8003352:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800335e:	2b00      	cmp	r3, #0
 8003360:	d00a      	beq.n	8003378 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003362:	4b4c      	ldr	r3, [pc, #304]	; (8003494 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003364:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003368:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003370:	4948      	ldr	r1, [pc, #288]	; (8003494 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003372:	4313      	orrs	r3, r2
 8003374:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003380:	2b00      	cmp	r3, #0
 8003382:	d015      	beq.n	80033b0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003384:	4b43      	ldr	r3, [pc, #268]	; (8003494 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003386:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800338a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003392:	4940      	ldr	r1, [pc, #256]	; (8003494 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003394:	4313      	orrs	r3, r2
 8003396:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800339e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80033a2:	d105      	bne.n	80033b0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80033a4:	4b3b      	ldr	r3, [pc, #236]	; (8003494 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80033a6:	68db      	ldr	r3, [r3, #12]
 80033a8:	4a3a      	ldr	r2, [pc, #232]	; (8003494 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80033aa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80033ae:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d015      	beq.n	80033e8 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80033bc:	4b35      	ldr	r3, [pc, #212]	; (8003494 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80033be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033c2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80033ca:	4932      	ldr	r1, [pc, #200]	; (8003494 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80033cc:	4313      	orrs	r3, r2
 80033ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80033d6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80033da:	d105      	bne.n	80033e8 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80033dc:	4b2d      	ldr	r3, [pc, #180]	; (8003494 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80033de:	68db      	ldr	r3, [r3, #12]
 80033e0:	4a2c      	ldr	r2, [pc, #176]	; (8003494 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80033e2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80033e6:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d015      	beq.n	8003420 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80033f4:	4b27      	ldr	r3, [pc, #156]	; (8003494 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80033f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033fa:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003402:	4924      	ldr	r1, [pc, #144]	; (8003494 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003404:	4313      	orrs	r3, r2
 8003406:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800340e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003412:	d105      	bne.n	8003420 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003414:	4b1f      	ldr	r3, [pc, #124]	; (8003494 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003416:	68db      	ldr	r3, [r3, #12]
 8003418:	4a1e      	ldr	r2, [pc, #120]	; (8003494 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800341a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800341e:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003428:	2b00      	cmp	r3, #0
 800342a:	d015      	beq.n	8003458 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800342c:	4b19      	ldr	r3, [pc, #100]	; (8003494 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800342e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003432:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800343a:	4916      	ldr	r1, [pc, #88]	; (8003494 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800343c:	4313      	orrs	r3, r2
 800343e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003446:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800344a:	d105      	bne.n	8003458 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800344c:	4b11      	ldr	r3, [pc, #68]	; (8003494 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800344e:	68db      	ldr	r3, [r3, #12]
 8003450:	4a10      	ldr	r2, [pc, #64]	; (8003494 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003452:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003456:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003460:	2b00      	cmp	r3, #0
 8003462:	d019      	beq.n	8003498 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003464:	4b0b      	ldr	r3, [pc, #44]	; (8003494 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003466:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800346a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003472:	4908      	ldr	r1, [pc, #32]	; (8003494 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003474:	4313      	orrs	r3, r2
 8003476:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800347e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003482:	d109      	bne.n	8003498 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003484:	4b03      	ldr	r3, [pc, #12]	; (8003494 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003486:	68db      	ldr	r3, [r3, #12]
 8003488:	4a02      	ldr	r2, [pc, #8]	; (8003494 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800348a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800348e:	60d3      	str	r3, [r2, #12]
 8003490:	e002      	b.n	8003498 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8003492:	bf00      	nop
 8003494:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d015      	beq.n	80034d0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80034a4:	4b29      	ldr	r3, [pc, #164]	; (800354c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80034a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034aa:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034b2:	4926      	ldr	r1, [pc, #152]	; (800354c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80034b4:	4313      	orrs	r3, r2
 80034b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034be:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80034c2:	d105      	bne.n	80034d0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80034c4:	4b21      	ldr	r3, [pc, #132]	; (800354c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80034c6:	68db      	ldr	r3, [r3, #12]
 80034c8:	4a20      	ldr	r2, [pc, #128]	; (800354c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80034ca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80034ce:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d015      	beq.n	8003508 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 80034dc:	4b1b      	ldr	r3, [pc, #108]	; (800354c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80034de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034e2:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80034ea:	4918      	ldr	r1, [pc, #96]	; (800354c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80034ec:	4313      	orrs	r3, r2
 80034ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80034f6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80034fa:	d105      	bne.n	8003508 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80034fc:	4b13      	ldr	r3, [pc, #76]	; (800354c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80034fe:	68db      	ldr	r3, [r3, #12]
 8003500:	4a12      	ldr	r2, [pc, #72]	; (800354c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003502:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003506:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003510:	2b00      	cmp	r3, #0
 8003512:	d015      	beq.n	8003540 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8003514:	4b0d      	ldr	r3, [pc, #52]	; (800354c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003516:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800351a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003522:	490a      	ldr	r1, [pc, #40]	; (800354c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003524:	4313      	orrs	r3, r2
 8003526:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800352e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003532:	d105      	bne.n	8003540 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003534:	4b05      	ldr	r3, [pc, #20]	; (800354c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003536:	68db      	ldr	r3, [r3, #12]
 8003538:	4a04      	ldr	r2, [pc, #16]	; (800354c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800353a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800353e:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8003540:	7cbb      	ldrb	r3, [r7, #18]
}
 8003542:	4618      	mov	r0, r3
 8003544:	3718      	adds	r7, #24
 8003546:	46bd      	mov	sp, r7
 8003548:	bd80      	pop	{r7, pc}
 800354a:	bf00      	nop
 800354c:	40021000 	.word	0x40021000

08003550 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003550:	b580      	push	{r7, lr}
 8003552:	b082      	sub	sp, #8
 8003554:	af00      	add	r7, sp, #0
 8003556:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	2b00      	cmp	r3, #0
 800355c:	d101      	bne.n	8003562 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800355e:	2301      	movs	r3, #1
 8003560:	e042      	b.n	80035e8 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003568:	2b00      	cmp	r3, #0
 800356a:	d106      	bne.n	800357a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	2200      	movs	r2, #0
 8003570:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003574:	6878      	ldr	r0, [r7, #4]
 8003576:	f7fd fc77 	bl	8000e68 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	2224      	movs	r2, #36	; 0x24
 800357e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	681a      	ldr	r2, [r3, #0]
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	f022 0201 	bic.w	r2, r2, #1
 8003590:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003592:	6878      	ldr	r0, [r7, #4]
 8003594:	f000 f82c 	bl	80035f0 <UART_SetConfig>
 8003598:	4603      	mov	r3, r0
 800359a:	2b01      	cmp	r3, #1
 800359c:	d101      	bne.n	80035a2 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800359e:	2301      	movs	r3, #1
 80035a0:	e022      	b.n	80035e8 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d002      	beq.n	80035b0 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80035aa:	6878      	ldr	r0, [r7, #4]
 80035ac:	f000 fb1c 	bl	8003be8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	685a      	ldr	r2, [r3, #4]
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80035be:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	689a      	ldr	r2, [r3, #8]
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80035ce:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	681a      	ldr	r2, [r3, #0]
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	f042 0201 	orr.w	r2, r2, #1
 80035de:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80035e0:	6878      	ldr	r0, [r7, #4]
 80035e2:	f000 fba3 	bl	8003d2c <UART_CheckIdleState>
 80035e6:	4603      	mov	r3, r0
}
 80035e8:	4618      	mov	r0, r3
 80035ea:	3708      	adds	r7, #8
 80035ec:	46bd      	mov	sp, r7
 80035ee:	bd80      	pop	{r7, pc}

080035f0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80035f0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80035f4:	b08c      	sub	sp, #48	; 0x30
 80035f6:	af00      	add	r7, sp, #0
 80035f8:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80035fa:	2300      	movs	r3, #0
 80035fc:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003600:	697b      	ldr	r3, [r7, #20]
 8003602:	689a      	ldr	r2, [r3, #8]
 8003604:	697b      	ldr	r3, [r7, #20]
 8003606:	691b      	ldr	r3, [r3, #16]
 8003608:	431a      	orrs	r2, r3
 800360a:	697b      	ldr	r3, [r7, #20]
 800360c:	695b      	ldr	r3, [r3, #20]
 800360e:	431a      	orrs	r2, r3
 8003610:	697b      	ldr	r3, [r7, #20]
 8003612:	69db      	ldr	r3, [r3, #28]
 8003614:	4313      	orrs	r3, r2
 8003616:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003618:	697b      	ldr	r3, [r7, #20]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	681a      	ldr	r2, [r3, #0]
 800361e:	4baa      	ldr	r3, [pc, #680]	; (80038c8 <UART_SetConfig+0x2d8>)
 8003620:	4013      	ands	r3, r2
 8003622:	697a      	ldr	r2, [r7, #20]
 8003624:	6812      	ldr	r2, [r2, #0]
 8003626:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003628:	430b      	orrs	r3, r1
 800362a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800362c:	697b      	ldr	r3, [r7, #20]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	685b      	ldr	r3, [r3, #4]
 8003632:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003636:	697b      	ldr	r3, [r7, #20]
 8003638:	68da      	ldr	r2, [r3, #12]
 800363a:	697b      	ldr	r3, [r7, #20]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	430a      	orrs	r2, r1
 8003640:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003642:	697b      	ldr	r3, [r7, #20]
 8003644:	699b      	ldr	r3, [r3, #24]
 8003646:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003648:	697b      	ldr	r3, [r7, #20]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	4a9f      	ldr	r2, [pc, #636]	; (80038cc <UART_SetConfig+0x2dc>)
 800364e:	4293      	cmp	r3, r2
 8003650:	d004      	beq.n	800365c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003652:	697b      	ldr	r3, [r7, #20]
 8003654:	6a1b      	ldr	r3, [r3, #32]
 8003656:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003658:	4313      	orrs	r3, r2
 800365a:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800365c:	697b      	ldr	r3, [r7, #20]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	689b      	ldr	r3, [r3, #8]
 8003662:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8003666:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800366a:	697a      	ldr	r2, [r7, #20]
 800366c:	6812      	ldr	r2, [r2, #0]
 800366e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003670:	430b      	orrs	r3, r1
 8003672:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8003674:	697b      	ldr	r3, [r7, #20]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800367a:	f023 010f 	bic.w	r1, r3, #15
 800367e:	697b      	ldr	r3, [r7, #20]
 8003680:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003682:	697b      	ldr	r3, [r7, #20]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	430a      	orrs	r2, r1
 8003688:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800368a:	697b      	ldr	r3, [r7, #20]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	4a90      	ldr	r2, [pc, #576]	; (80038d0 <UART_SetConfig+0x2e0>)
 8003690:	4293      	cmp	r3, r2
 8003692:	d125      	bne.n	80036e0 <UART_SetConfig+0xf0>
 8003694:	4b8f      	ldr	r3, [pc, #572]	; (80038d4 <UART_SetConfig+0x2e4>)
 8003696:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800369a:	f003 0303 	and.w	r3, r3, #3
 800369e:	2b03      	cmp	r3, #3
 80036a0:	d81a      	bhi.n	80036d8 <UART_SetConfig+0xe8>
 80036a2:	a201      	add	r2, pc, #4	; (adr r2, 80036a8 <UART_SetConfig+0xb8>)
 80036a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036a8:	080036b9 	.word	0x080036b9
 80036ac:	080036c9 	.word	0x080036c9
 80036b0:	080036c1 	.word	0x080036c1
 80036b4:	080036d1 	.word	0x080036d1
 80036b8:	2301      	movs	r3, #1
 80036ba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80036be:	e116      	b.n	80038ee <UART_SetConfig+0x2fe>
 80036c0:	2302      	movs	r3, #2
 80036c2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80036c6:	e112      	b.n	80038ee <UART_SetConfig+0x2fe>
 80036c8:	2304      	movs	r3, #4
 80036ca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80036ce:	e10e      	b.n	80038ee <UART_SetConfig+0x2fe>
 80036d0:	2308      	movs	r3, #8
 80036d2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80036d6:	e10a      	b.n	80038ee <UART_SetConfig+0x2fe>
 80036d8:	2310      	movs	r3, #16
 80036da:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80036de:	e106      	b.n	80038ee <UART_SetConfig+0x2fe>
 80036e0:	697b      	ldr	r3, [r7, #20]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	4a7c      	ldr	r2, [pc, #496]	; (80038d8 <UART_SetConfig+0x2e8>)
 80036e6:	4293      	cmp	r3, r2
 80036e8:	d138      	bne.n	800375c <UART_SetConfig+0x16c>
 80036ea:	4b7a      	ldr	r3, [pc, #488]	; (80038d4 <UART_SetConfig+0x2e4>)
 80036ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036f0:	f003 030c 	and.w	r3, r3, #12
 80036f4:	2b0c      	cmp	r3, #12
 80036f6:	d82d      	bhi.n	8003754 <UART_SetConfig+0x164>
 80036f8:	a201      	add	r2, pc, #4	; (adr r2, 8003700 <UART_SetConfig+0x110>)
 80036fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036fe:	bf00      	nop
 8003700:	08003735 	.word	0x08003735
 8003704:	08003755 	.word	0x08003755
 8003708:	08003755 	.word	0x08003755
 800370c:	08003755 	.word	0x08003755
 8003710:	08003745 	.word	0x08003745
 8003714:	08003755 	.word	0x08003755
 8003718:	08003755 	.word	0x08003755
 800371c:	08003755 	.word	0x08003755
 8003720:	0800373d 	.word	0x0800373d
 8003724:	08003755 	.word	0x08003755
 8003728:	08003755 	.word	0x08003755
 800372c:	08003755 	.word	0x08003755
 8003730:	0800374d 	.word	0x0800374d
 8003734:	2300      	movs	r3, #0
 8003736:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800373a:	e0d8      	b.n	80038ee <UART_SetConfig+0x2fe>
 800373c:	2302      	movs	r3, #2
 800373e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003742:	e0d4      	b.n	80038ee <UART_SetConfig+0x2fe>
 8003744:	2304      	movs	r3, #4
 8003746:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800374a:	e0d0      	b.n	80038ee <UART_SetConfig+0x2fe>
 800374c:	2308      	movs	r3, #8
 800374e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003752:	e0cc      	b.n	80038ee <UART_SetConfig+0x2fe>
 8003754:	2310      	movs	r3, #16
 8003756:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800375a:	e0c8      	b.n	80038ee <UART_SetConfig+0x2fe>
 800375c:	697b      	ldr	r3, [r7, #20]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	4a5e      	ldr	r2, [pc, #376]	; (80038dc <UART_SetConfig+0x2ec>)
 8003762:	4293      	cmp	r3, r2
 8003764:	d125      	bne.n	80037b2 <UART_SetConfig+0x1c2>
 8003766:	4b5b      	ldr	r3, [pc, #364]	; (80038d4 <UART_SetConfig+0x2e4>)
 8003768:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800376c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003770:	2b30      	cmp	r3, #48	; 0x30
 8003772:	d016      	beq.n	80037a2 <UART_SetConfig+0x1b2>
 8003774:	2b30      	cmp	r3, #48	; 0x30
 8003776:	d818      	bhi.n	80037aa <UART_SetConfig+0x1ba>
 8003778:	2b20      	cmp	r3, #32
 800377a:	d00a      	beq.n	8003792 <UART_SetConfig+0x1a2>
 800377c:	2b20      	cmp	r3, #32
 800377e:	d814      	bhi.n	80037aa <UART_SetConfig+0x1ba>
 8003780:	2b00      	cmp	r3, #0
 8003782:	d002      	beq.n	800378a <UART_SetConfig+0x19a>
 8003784:	2b10      	cmp	r3, #16
 8003786:	d008      	beq.n	800379a <UART_SetConfig+0x1aa>
 8003788:	e00f      	b.n	80037aa <UART_SetConfig+0x1ba>
 800378a:	2300      	movs	r3, #0
 800378c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003790:	e0ad      	b.n	80038ee <UART_SetConfig+0x2fe>
 8003792:	2302      	movs	r3, #2
 8003794:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003798:	e0a9      	b.n	80038ee <UART_SetConfig+0x2fe>
 800379a:	2304      	movs	r3, #4
 800379c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80037a0:	e0a5      	b.n	80038ee <UART_SetConfig+0x2fe>
 80037a2:	2308      	movs	r3, #8
 80037a4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80037a8:	e0a1      	b.n	80038ee <UART_SetConfig+0x2fe>
 80037aa:	2310      	movs	r3, #16
 80037ac:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80037b0:	e09d      	b.n	80038ee <UART_SetConfig+0x2fe>
 80037b2:	697b      	ldr	r3, [r7, #20]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	4a4a      	ldr	r2, [pc, #296]	; (80038e0 <UART_SetConfig+0x2f0>)
 80037b8:	4293      	cmp	r3, r2
 80037ba:	d125      	bne.n	8003808 <UART_SetConfig+0x218>
 80037bc:	4b45      	ldr	r3, [pc, #276]	; (80038d4 <UART_SetConfig+0x2e4>)
 80037be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037c2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80037c6:	2bc0      	cmp	r3, #192	; 0xc0
 80037c8:	d016      	beq.n	80037f8 <UART_SetConfig+0x208>
 80037ca:	2bc0      	cmp	r3, #192	; 0xc0
 80037cc:	d818      	bhi.n	8003800 <UART_SetConfig+0x210>
 80037ce:	2b80      	cmp	r3, #128	; 0x80
 80037d0:	d00a      	beq.n	80037e8 <UART_SetConfig+0x1f8>
 80037d2:	2b80      	cmp	r3, #128	; 0x80
 80037d4:	d814      	bhi.n	8003800 <UART_SetConfig+0x210>
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d002      	beq.n	80037e0 <UART_SetConfig+0x1f0>
 80037da:	2b40      	cmp	r3, #64	; 0x40
 80037dc:	d008      	beq.n	80037f0 <UART_SetConfig+0x200>
 80037de:	e00f      	b.n	8003800 <UART_SetConfig+0x210>
 80037e0:	2300      	movs	r3, #0
 80037e2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80037e6:	e082      	b.n	80038ee <UART_SetConfig+0x2fe>
 80037e8:	2302      	movs	r3, #2
 80037ea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80037ee:	e07e      	b.n	80038ee <UART_SetConfig+0x2fe>
 80037f0:	2304      	movs	r3, #4
 80037f2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80037f6:	e07a      	b.n	80038ee <UART_SetConfig+0x2fe>
 80037f8:	2308      	movs	r3, #8
 80037fa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80037fe:	e076      	b.n	80038ee <UART_SetConfig+0x2fe>
 8003800:	2310      	movs	r3, #16
 8003802:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003806:	e072      	b.n	80038ee <UART_SetConfig+0x2fe>
 8003808:	697b      	ldr	r3, [r7, #20]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	4a35      	ldr	r2, [pc, #212]	; (80038e4 <UART_SetConfig+0x2f4>)
 800380e:	4293      	cmp	r3, r2
 8003810:	d12a      	bne.n	8003868 <UART_SetConfig+0x278>
 8003812:	4b30      	ldr	r3, [pc, #192]	; (80038d4 <UART_SetConfig+0x2e4>)
 8003814:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003818:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800381c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003820:	d01a      	beq.n	8003858 <UART_SetConfig+0x268>
 8003822:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003826:	d81b      	bhi.n	8003860 <UART_SetConfig+0x270>
 8003828:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800382c:	d00c      	beq.n	8003848 <UART_SetConfig+0x258>
 800382e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003832:	d815      	bhi.n	8003860 <UART_SetConfig+0x270>
 8003834:	2b00      	cmp	r3, #0
 8003836:	d003      	beq.n	8003840 <UART_SetConfig+0x250>
 8003838:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800383c:	d008      	beq.n	8003850 <UART_SetConfig+0x260>
 800383e:	e00f      	b.n	8003860 <UART_SetConfig+0x270>
 8003840:	2300      	movs	r3, #0
 8003842:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003846:	e052      	b.n	80038ee <UART_SetConfig+0x2fe>
 8003848:	2302      	movs	r3, #2
 800384a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800384e:	e04e      	b.n	80038ee <UART_SetConfig+0x2fe>
 8003850:	2304      	movs	r3, #4
 8003852:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003856:	e04a      	b.n	80038ee <UART_SetConfig+0x2fe>
 8003858:	2308      	movs	r3, #8
 800385a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800385e:	e046      	b.n	80038ee <UART_SetConfig+0x2fe>
 8003860:	2310      	movs	r3, #16
 8003862:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003866:	e042      	b.n	80038ee <UART_SetConfig+0x2fe>
 8003868:	697b      	ldr	r3, [r7, #20]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	4a17      	ldr	r2, [pc, #92]	; (80038cc <UART_SetConfig+0x2dc>)
 800386e:	4293      	cmp	r3, r2
 8003870:	d13a      	bne.n	80038e8 <UART_SetConfig+0x2f8>
 8003872:	4b18      	ldr	r3, [pc, #96]	; (80038d4 <UART_SetConfig+0x2e4>)
 8003874:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003878:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800387c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003880:	d01a      	beq.n	80038b8 <UART_SetConfig+0x2c8>
 8003882:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003886:	d81b      	bhi.n	80038c0 <UART_SetConfig+0x2d0>
 8003888:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800388c:	d00c      	beq.n	80038a8 <UART_SetConfig+0x2b8>
 800388e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003892:	d815      	bhi.n	80038c0 <UART_SetConfig+0x2d0>
 8003894:	2b00      	cmp	r3, #0
 8003896:	d003      	beq.n	80038a0 <UART_SetConfig+0x2b0>
 8003898:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800389c:	d008      	beq.n	80038b0 <UART_SetConfig+0x2c0>
 800389e:	e00f      	b.n	80038c0 <UART_SetConfig+0x2d0>
 80038a0:	2300      	movs	r3, #0
 80038a2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80038a6:	e022      	b.n	80038ee <UART_SetConfig+0x2fe>
 80038a8:	2302      	movs	r3, #2
 80038aa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80038ae:	e01e      	b.n	80038ee <UART_SetConfig+0x2fe>
 80038b0:	2304      	movs	r3, #4
 80038b2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80038b6:	e01a      	b.n	80038ee <UART_SetConfig+0x2fe>
 80038b8:	2308      	movs	r3, #8
 80038ba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80038be:	e016      	b.n	80038ee <UART_SetConfig+0x2fe>
 80038c0:	2310      	movs	r3, #16
 80038c2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80038c6:	e012      	b.n	80038ee <UART_SetConfig+0x2fe>
 80038c8:	cfff69f3 	.word	0xcfff69f3
 80038cc:	40008000 	.word	0x40008000
 80038d0:	40013800 	.word	0x40013800
 80038d4:	40021000 	.word	0x40021000
 80038d8:	40004400 	.word	0x40004400
 80038dc:	40004800 	.word	0x40004800
 80038e0:	40004c00 	.word	0x40004c00
 80038e4:	40005000 	.word	0x40005000
 80038e8:	2310      	movs	r3, #16
 80038ea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80038ee:	697b      	ldr	r3, [r7, #20]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	4aae      	ldr	r2, [pc, #696]	; (8003bac <UART_SetConfig+0x5bc>)
 80038f4:	4293      	cmp	r3, r2
 80038f6:	f040 8097 	bne.w	8003a28 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80038fa:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80038fe:	2b08      	cmp	r3, #8
 8003900:	d823      	bhi.n	800394a <UART_SetConfig+0x35a>
 8003902:	a201      	add	r2, pc, #4	; (adr r2, 8003908 <UART_SetConfig+0x318>)
 8003904:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003908:	0800392d 	.word	0x0800392d
 800390c:	0800394b 	.word	0x0800394b
 8003910:	08003935 	.word	0x08003935
 8003914:	0800394b 	.word	0x0800394b
 8003918:	0800393b 	.word	0x0800393b
 800391c:	0800394b 	.word	0x0800394b
 8003920:	0800394b 	.word	0x0800394b
 8003924:	0800394b 	.word	0x0800394b
 8003928:	08003943 	.word	0x08003943
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800392c:	f7ff fb50 	bl	8002fd0 <HAL_RCC_GetPCLK1Freq>
 8003930:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003932:	e010      	b.n	8003956 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003934:	4b9e      	ldr	r3, [pc, #632]	; (8003bb0 <UART_SetConfig+0x5c0>)
 8003936:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003938:	e00d      	b.n	8003956 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800393a:	f7ff fadb 	bl	8002ef4 <HAL_RCC_GetSysClockFreq>
 800393e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003940:	e009      	b.n	8003956 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003942:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003946:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003948:	e005      	b.n	8003956 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 800394a:	2300      	movs	r3, #0
 800394c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800394e:	2301      	movs	r3, #1
 8003950:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8003954:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003956:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003958:	2b00      	cmp	r3, #0
 800395a:	f000 8130 	beq.w	8003bbe <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800395e:	697b      	ldr	r3, [r7, #20]
 8003960:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003962:	4a94      	ldr	r2, [pc, #592]	; (8003bb4 <UART_SetConfig+0x5c4>)
 8003964:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003968:	461a      	mov	r2, r3
 800396a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800396c:	fbb3 f3f2 	udiv	r3, r3, r2
 8003970:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003972:	697b      	ldr	r3, [r7, #20]
 8003974:	685a      	ldr	r2, [r3, #4]
 8003976:	4613      	mov	r3, r2
 8003978:	005b      	lsls	r3, r3, #1
 800397a:	4413      	add	r3, r2
 800397c:	69ba      	ldr	r2, [r7, #24]
 800397e:	429a      	cmp	r2, r3
 8003980:	d305      	bcc.n	800398e <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8003982:	697b      	ldr	r3, [r7, #20]
 8003984:	685b      	ldr	r3, [r3, #4]
 8003986:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003988:	69ba      	ldr	r2, [r7, #24]
 800398a:	429a      	cmp	r2, r3
 800398c:	d903      	bls.n	8003996 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 800398e:	2301      	movs	r3, #1
 8003990:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8003994:	e113      	b.n	8003bbe <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003996:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003998:	2200      	movs	r2, #0
 800399a:	60bb      	str	r3, [r7, #8]
 800399c:	60fa      	str	r2, [r7, #12]
 800399e:	697b      	ldr	r3, [r7, #20]
 80039a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039a2:	4a84      	ldr	r2, [pc, #528]	; (8003bb4 <UART_SetConfig+0x5c4>)
 80039a4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80039a8:	b29b      	uxth	r3, r3
 80039aa:	2200      	movs	r2, #0
 80039ac:	603b      	str	r3, [r7, #0]
 80039ae:	607a      	str	r2, [r7, #4]
 80039b0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80039b4:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80039b8:	f7fc fc82 	bl	80002c0 <__aeabi_uldivmod>
 80039bc:	4602      	mov	r2, r0
 80039be:	460b      	mov	r3, r1
 80039c0:	4610      	mov	r0, r2
 80039c2:	4619      	mov	r1, r3
 80039c4:	f04f 0200 	mov.w	r2, #0
 80039c8:	f04f 0300 	mov.w	r3, #0
 80039cc:	020b      	lsls	r3, r1, #8
 80039ce:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80039d2:	0202      	lsls	r2, r0, #8
 80039d4:	6979      	ldr	r1, [r7, #20]
 80039d6:	6849      	ldr	r1, [r1, #4]
 80039d8:	0849      	lsrs	r1, r1, #1
 80039da:	2000      	movs	r0, #0
 80039dc:	460c      	mov	r4, r1
 80039de:	4605      	mov	r5, r0
 80039e0:	eb12 0804 	adds.w	r8, r2, r4
 80039e4:	eb43 0905 	adc.w	r9, r3, r5
 80039e8:	697b      	ldr	r3, [r7, #20]
 80039ea:	685b      	ldr	r3, [r3, #4]
 80039ec:	2200      	movs	r2, #0
 80039ee:	469a      	mov	sl, r3
 80039f0:	4693      	mov	fp, r2
 80039f2:	4652      	mov	r2, sl
 80039f4:	465b      	mov	r3, fp
 80039f6:	4640      	mov	r0, r8
 80039f8:	4649      	mov	r1, r9
 80039fa:	f7fc fc61 	bl	80002c0 <__aeabi_uldivmod>
 80039fe:	4602      	mov	r2, r0
 8003a00:	460b      	mov	r3, r1
 8003a02:	4613      	mov	r3, r2
 8003a04:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003a06:	6a3b      	ldr	r3, [r7, #32]
 8003a08:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003a0c:	d308      	bcc.n	8003a20 <UART_SetConfig+0x430>
 8003a0e:	6a3b      	ldr	r3, [r7, #32]
 8003a10:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003a14:	d204      	bcs.n	8003a20 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8003a16:	697b      	ldr	r3, [r7, #20]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	6a3a      	ldr	r2, [r7, #32]
 8003a1c:	60da      	str	r2, [r3, #12]
 8003a1e:	e0ce      	b.n	8003bbe <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8003a20:	2301      	movs	r3, #1
 8003a22:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8003a26:	e0ca      	b.n	8003bbe <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003a28:	697b      	ldr	r3, [r7, #20]
 8003a2a:	69db      	ldr	r3, [r3, #28]
 8003a2c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003a30:	d166      	bne.n	8003b00 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8003a32:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003a36:	2b08      	cmp	r3, #8
 8003a38:	d827      	bhi.n	8003a8a <UART_SetConfig+0x49a>
 8003a3a:	a201      	add	r2, pc, #4	; (adr r2, 8003a40 <UART_SetConfig+0x450>)
 8003a3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a40:	08003a65 	.word	0x08003a65
 8003a44:	08003a6d 	.word	0x08003a6d
 8003a48:	08003a75 	.word	0x08003a75
 8003a4c:	08003a8b 	.word	0x08003a8b
 8003a50:	08003a7b 	.word	0x08003a7b
 8003a54:	08003a8b 	.word	0x08003a8b
 8003a58:	08003a8b 	.word	0x08003a8b
 8003a5c:	08003a8b 	.word	0x08003a8b
 8003a60:	08003a83 	.word	0x08003a83
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003a64:	f7ff fab4 	bl	8002fd0 <HAL_RCC_GetPCLK1Freq>
 8003a68:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003a6a:	e014      	b.n	8003a96 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003a6c:	f7ff fac6 	bl	8002ffc <HAL_RCC_GetPCLK2Freq>
 8003a70:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003a72:	e010      	b.n	8003a96 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003a74:	4b4e      	ldr	r3, [pc, #312]	; (8003bb0 <UART_SetConfig+0x5c0>)
 8003a76:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003a78:	e00d      	b.n	8003a96 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003a7a:	f7ff fa3b 	bl	8002ef4 <HAL_RCC_GetSysClockFreq>
 8003a7e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003a80:	e009      	b.n	8003a96 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003a82:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003a86:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003a88:	e005      	b.n	8003a96 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8003a8a:	2300      	movs	r3, #0
 8003a8c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8003a8e:	2301      	movs	r3, #1
 8003a90:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8003a94:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003a96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	f000 8090 	beq.w	8003bbe <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003a9e:	697b      	ldr	r3, [r7, #20]
 8003aa0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003aa2:	4a44      	ldr	r2, [pc, #272]	; (8003bb4 <UART_SetConfig+0x5c4>)
 8003aa4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003aa8:	461a      	mov	r2, r3
 8003aaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003aac:	fbb3 f3f2 	udiv	r3, r3, r2
 8003ab0:	005a      	lsls	r2, r3, #1
 8003ab2:	697b      	ldr	r3, [r7, #20]
 8003ab4:	685b      	ldr	r3, [r3, #4]
 8003ab6:	085b      	lsrs	r3, r3, #1
 8003ab8:	441a      	add	r2, r3
 8003aba:	697b      	ldr	r3, [r7, #20]
 8003abc:	685b      	ldr	r3, [r3, #4]
 8003abe:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ac2:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003ac4:	6a3b      	ldr	r3, [r7, #32]
 8003ac6:	2b0f      	cmp	r3, #15
 8003ac8:	d916      	bls.n	8003af8 <UART_SetConfig+0x508>
 8003aca:	6a3b      	ldr	r3, [r7, #32]
 8003acc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003ad0:	d212      	bcs.n	8003af8 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003ad2:	6a3b      	ldr	r3, [r7, #32]
 8003ad4:	b29b      	uxth	r3, r3
 8003ad6:	f023 030f 	bic.w	r3, r3, #15
 8003ada:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003adc:	6a3b      	ldr	r3, [r7, #32]
 8003ade:	085b      	lsrs	r3, r3, #1
 8003ae0:	b29b      	uxth	r3, r3
 8003ae2:	f003 0307 	and.w	r3, r3, #7
 8003ae6:	b29a      	uxth	r2, r3
 8003ae8:	8bfb      	ldrh	r3, [r7, #30]
 8003aea:	4313      	orrs	r3, r2
 8003aec:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8003aee:	697b      	ldr	r3, [r7, #20]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	8bfa      	ldrh	r2, [r7, #30]
 8003af4:	60da      	str	r2, [r3, #12]
 8003af6:	e062      	b.n	8003bbe <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8003af8:	2301      	movs	r3, #1
 8003afa:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8003afe:	e05e      	b.n	8003bbe <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003b00:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003b04:	2b08      	cmp	r3, #8
 8003b06:	d828      	bhi.n	8003b5a <UART_SetConfig+0x56a>
 8003b08:	a201      	add	r2, pc, #4	; (adr r2, 8003b10 <UART_SetConfig+0x520>)
 8003b0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b0e:	bf00      	nop
 8003b10:	08003b35 	.word	0x08003b35
 8003b14:	08003b3d 	.word	0x08003b3d
 8003b18:	08003b45 	.word	0x08003b45
 8003b1c:	08003b5b 	.word	0x08003b5b
 8003b20:	08003b4b 	.word	0x08003b4b
 8003b24:	08003b5b 	.word	0x08003b5b
 8003b28:	08003b5b 	.word	0x08003b5b
 8003b2c:	08003b5b 	.word	0x08003b5b
 8003b30:	08003b53 	.word	0x08003b53
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003b34:	f7ff fa4c 	bl	8002fd0 <HAL_RCC_GetPCLK1Freq>
 8003b38:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003b3a:	e014      	b.n	8003b66 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003b3c:	f7ff fa5e 	bl	8002ffc <HAL_RCC_GetPCLK2Freq>
 8003b40:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003b42:	e010      	b.n	8003b66 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003b44:	4b1a      	ldr	r3, [pc, #104]	; (8003bb0 <UART_SetConfig+0x5c0>)
 8003b46:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003b48:	e00d      	b.n	8003b66 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003b4a:	f7ff f9d3 	bl	8002ef4 <HAL_RCC_GetSysClockFreq>
 8003b4e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003b50:	e009      	b.n	8003b66 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003b52:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003b56:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003b58:	e005      	b.n	8003b66 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8003b5a:	2300      	movs	r3, #0
 8003b5c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8003b5e:	2301      	movs	r3, #1
 8003b60:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8003b64:	bf00      	nop
    }

    if (pclk != 0U)
 8003b66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d028      	beq.n	8003bbe <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003b6c:	697b      	ldr	r3, [r7, #20]
 8003b6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b70:	4a10      	ldr	r2, [pc, #64]	; (8003bb4 <UART_SetConfig+0x5c4>)
 8003b72:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003b76:	461a      	mov	r2, r3
 8003b78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b7a:	fbb3 f2f2 	udiv	r2, r3, r2
 8003b7e:	697b      	ldr	r3, [r7, #20]
 8003b80:	685b      	ldr	r3, [r3, #4]
 8003b82:	085b      	lsrs	r3, r3, #1
 8003b84:	441a      	add	r2, r3
 8003b86:	697b      	ldr	r3, [r7, #20]
 8003b88:	685b      	ldr	r3, [r3, #4]
 8003b8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b8e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003b90:	6a3b      	ldr	r3, [r7, #32]
 8003b92:	2b0f      	cmp	r3, #15
 8003b94:	d910      	bls.n	8003bb8 <UART_SetConfig+0x5c8>
 8003b96:	6a3b      	ldr	r3, [r7, #32]
 8003b98:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003b9c:	d20c      	bcs.n	8003bb8 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003b9e:	6a3b      	ldr	r3, [r7, #32]
 8003ba0:	b29a      	uxth	r2, r3
 8003ba2:	697b      	ldr	r3, [r7, #20]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	60da      	str	r2, [r3, #12]
 8003ba8:	e009      	b.n	8003bbe <UART_SetConfig+0x5ce>
 8003baa:	bf00      	nop
 8003bac:	40008000 	.word	0x40008000
 8003bb0:	00f42400 	.word	0x00f42400
 8003bb4:	08005270 	.word	0x08005270
      }
      else
      {
        ret = HAL_ERROR;
 8003bb8:	2301      	movs	r3, #1
 8003bba:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8003bbe:	697b      	ldr	r3, [r7, #20]
 8003bc0:	2201      	movs	r2, #1
 8003bc2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8003bc6:	697b      	ldr	r3, [r7, #20]
 8003bc8:	2201      	movs	r2, #1
 8003bca:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003bce:	697b      	ldr	r3, [r7, #20]
 8003bd0:	2200      	movs	r2, #0
 8003bd2:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8003bd4:	697b      	ldr	r3, [r7, #20]
 8003bd6:	2200      	movs	r2, #0
 8003bd8:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8003bda:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8003bde:	4618      	mov	r0, r3
 8003be0:	3730      	adds	r7, #48	; 0x30
 8003be2:	46bd      	mov	sp, r7
 8003be4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08003be8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003be8:	b480      	push	{r7}
 8003bea:	b083      	sub	sp, #12
 8003bec:	af00      	add	r7, sp, #0
 8003bee:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bf4:	f003 0301 	and.w	r3, r3, #1
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d00a      	beq.n	8003c12 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	685b      	ldr	r3, [r3, #4]
 8003c02:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	430a      	orrs	r2, r1
 8003c10:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c16:	f003 0302 	and.w	r3, r3, #2
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d00a      	beq.n	8003c34 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	685b      	ldr	r3, [r3, #4]
 8003c24:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	430a      	orrs	r2, r1
 8003c32:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c38:	f003 0304 	and.w	r3, r3, #4
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d00a      	beq.n	8003c56 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	685b      	ldr	r3, [r3, #4]
 8003c46:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	430a      	orrs	r2, r1
 8003c54:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c5a:	f003 0308 	and.w	r3, r3, #8
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d00a      	beq.n	8003c78 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	685b      	ldr	r3, [r3, #4]
 8003c68:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	430a      	orrs	r2, r1
 8003c76:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c7c:	f003 0310 	and.w	r3, r3, #16
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d00a      	beq.n	8003c9a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	689b      	ldr	r3, [r3, #8]
 8003c8a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	430a      	orrs	r2, r1
 8003c98:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c9e:	f003 0320 	and.w	r3, r3, #32
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d00a      	beq.n	8003cbc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	689b      	ldr	r3, [r3, #8]
 8003cac:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	430a      	orrs	r2, r1
 8003cba:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cc0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d01a      	beq.n	8003cfe <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	685b      	ldr	r3, [r3, #4]
 8003cce:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	430a      	orrs	r2, r1
 8003cdc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ce2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003ce6:	d10a      	bne.n	8003cfe <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	685b      	ldr	r3, [r3, #4]
 8003cee:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	430a      	orrs	r2, r1
 8003cfc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d00a      	beq.n	8003d20 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	685b      	ldr	r3, [r3, #4]
 8003d10:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	430a      	orrs	r2, r1
 8003d1e:	605a      	str	r2, [r3, #4]
  }
}
 8003d20:	bf00      	nop
 8003d22:	370c      	adds	r7, #12
 8003d24:	46bd      	mov	sp, r7
 8003d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d2a:	4770      	bx	lr

08003d2c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003d2c:	b580      	push	{r7, lr}
 8003d2e:	b086      	sub	sp, #24
 8003d30:	af02      	add	r7, sp, #8
 8003d32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	2200      	movs	r2, #0
 8003d38:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003d3c:	f7fd fa76 	bl	800122c <HAL_GetTick>
 8003d40:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	f003 0308 	and.w	r3, r3, #8
 8003d4c:	2b08      	cmp	r3, #8
 8003d4e:	d10e      	bne.n	8003d6e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003d50:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003d54:	9300      	str	r3, [sp, #0]
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	2200      	movs	r2, #0
 8003d5a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003d5e:	6878      	ldr	r0, [r7, #4]
 8003d60:	f000 f82f 	bl	8003dc2 <UART_WaitOnFlagUntilTimeout>
 8003d64:	4603      	mov	r3, r0
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d001      	beq.n	8003d6e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003d6a:	2303      	movs	r3, #3
 8003d6c:	e025      	b.n	8003dba <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	f003 0304 	and.w	r3, r3, #4
 8003d78:	2b04      	cmp	r3, #4
 8003d7a:	d10e      	bne.n	8003d9a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003d7c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003d80:	9300      	str	r3, [sp, #0]
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	2200      	movs	r2, #0
 8003d86:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003d8a:	6878      	ldr	r0, [r7, #4]
 8003d8c:	f000 f819 	bl	8003dc2 <UART_WaitOnFlagUntilTimeout>
 8003d90:	4603      	mov	r3, r0
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d001      	beq.n	8003d9a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003d96:	2303      	movs	r3, #3
 8003d98:	e00f      	b.n	8003dba <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	2220      	movs	r2, #32
 8003d9e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	2220      	movs	r2, #32
 8003da6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	2200      	movs	r2, #0
 8003dae:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	2200      	movs	r2, #0
 8003db4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8003db8:	2300      	movs	r3, #0
}
 8003dba:	4618      	mov	r0, r3
 8003dbc:	3710      	adds	r7, #16
 8003dbe:	46bd      	mov	sp, r7
 8003dc0:	bd80      	pop	{r7, pc}

08003dc2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003dc2:	b580      	push	{r7, lr}
 8003dc4:	b09c      	sub	sp, #112	; 0x70
 8003dc6:	af00      	add	r7, sp, #0
 8003dc8:	60f8      	str	r0, [r7, #12]
 8003dca:	60b9      	str	r1, [r7, #8]
 8003dcc:	603b      	str	r3, [r7, #0]
 8003dce:	4613      	mov	r3, r2
 8003dd0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003dd2:	e0a9      	b.n	8003f28 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003dd4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003dd6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003dda:	f000 80a5 	beq.w	8003f28 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003dde:	f7fd fa25 	bl	800122c <HAL_GetTick>
 8003de2:	4602      	mov	r2, r0
 8003de4:	683b      	ldr	r3, [r7, #0]
 8003de6:	1ad3      	subs	r3, r2, r3
 8003de8:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8003dea:	429a      	cmp	r2, r3
 8003dec:	d302      	bcc.n	8003df4 <UART_WaitOnFlagUntilTimeout+0x32>
 8003dee:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d140      	bne.n	8003e76 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003dfa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003dfc:	e853 3f00 	ldrex	r3, [r3]
 8003e00:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8003e02:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003e04:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003e08:	667b      	str	r3, [r7, #100]	; 0x64
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	461a      	mov	r2, r3
 8003e10:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003e12:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003e14:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e16:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8003e18:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003e1a:	e841 2300 	strex	r3, r2, [r1]
 8003e1e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8003e20:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d1e6      	bne.n	8003df4 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	3308      	adds	r3, #8
 8003e2c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e2e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003e30:	e853 3f00 	ldrex	r3, [r3]
 8003e34:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003e36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e38:	f023 0301 	bic.w	r3, r3, #1
 8003e3c:	663b      	str	r3, [r7, #96]	; 0x60
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	3308      	adds	r3, #8
 8003e44:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003e46:	64ba      	str	r2, [r7, #72]	; 0x48
 8003e48:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e4a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003e4c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003e4e:	e841 2300 	strex	r3, r2, [r1]
 8003e52:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8003e54:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d1e5      	bne.n	8003e26 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	2220      	movs	r2, #32
 8003e5e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	2220      	movs	r2, #32
 8003e66:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	2200      	movs	r2, #0
 8003e6e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8003e72:	2303      	movs	r3, #3
 8003e74:	e069      	b.n	8003f4a <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	f003 0304 	and.w	r3, r3, #4
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d051      	beq.n	8003f28 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	69db      	ldr	r3, [r3, #28]
 8003e8a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003e8e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003e92:	d149      	bne.n	8003f28 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003e9c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ea4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ea6:	e853 3f00 	ldrex	r3, [r3]
 8003eaa:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003eac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eae:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003eb2:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	461a      	mov	r2, r3
 8003eba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003ebc:	637b      	str	r3, [r7, #52]	; 0x34
 8003ebe:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ec0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003ec2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003ec4:	e841 2300 	strex	r3, r2, [r1]
 8003ec8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003eca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d1e6      	bne.n	8003e9e <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	3308      	adds	r3, #8
 8003ed6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ed8:	697b      	ldr	r3, [r7, #20]
 8003eda:	e853 3f00 	ldrex	r3, [r3]
 8003ede:	613b      	str	r3, [r7, #16]
   return(result);
 8003ee0:	693b      	ldr	r3, [r7, #16]
 8003ee2:	f023 0301 	bic.w	r3, r3, #1
 8003ee6:	66bb      	str	r3, [r7, #104]	; 0x68
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	3308      	adds	r3, #8
 8003eee:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003ef0:	623a      	str	r2, [r7, #32]
 8003ef2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ef4:	69f9      	ldr	r1, [r7, #28]
 8003ef6:	6a3a      	ldr	r2, [r7, #32]
 8003ef8:	e841 2300 	strex	r3, r2, [r1]
 8003efc:	61bb      	str	r3, [r7, #24]
   return(result);
 8003efe:	69bb      	ldr	r3, [r7, #24]
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d1e5      	bne.n	8003ed0 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	2220      	movs	r2, #32
 8003f08:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	2220      	movs	r2, #32
 8003f10:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	2220      	movs	r2, #32
 8003f18:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	2200      	movs	r2, #0
 8003f20:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8003f24:	2303      	movs	r3, #3
 8003f26:	e010      	b.n	8003f4a <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	69da      	ldr	r2, [r3, #28]
 8003f2e:	68bb      	ldr	r3, [r7, #8]
 8003f30:	4013      	ands	r3, r2
 8003f32:	68ba      	ldr	r2, [r7, #8]
 8003f34:	429a      	cmp	r2, r3
 8003f36:	bf0c      	ite	eq
 8003f38:	2301      	moveq	r3, #1
 8003f3a:	2300      	movne	r3, #0
 8003f3c:	b2db      	uxtb	r3, r3
 8003f3e:	461a      	mov	r2, r3
 8003f40:	79fb      	ldrb	r3, [r7, #7]
 8003f42:	429a      	cmp	r2, r3
 8003f44:	f43f af46 	beq.w	8003dd4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003f48:	2300      	movs	r3, #0
}
 8003f4a:	4618      	mov	r0, r3
 8003f4c:	3770      	adds	r7, #112	; 0x70
 8003f4e:	46bd      	mov	sp, r7
 8003f50:	bd80      	pop	{r7, pc}

08003f52 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8003f52:	b480      	push	{r7}
 8003f54:	b085      	sub	sp, #20
 8003f56:	af00      	add	r7, sp, #0
 8003f58:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8003f60:	2b01      	cmp	r3, #1
 8003f62:	d101      	bne.n	8003f68 <HAL_UARTEx_DisableFifoMode+0x16>
 8003f64:	2302      	movs	r3, #2
 8003f66:	e027      	b.n	8003fb8 <HAL_UARTEx_DisableFifoMode+0x66>
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	2201      	movs	r2, #1
 8003f6c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	2224      	movs	r2, #36	; 0x24
 8003f74:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	681a      	ldr	r2, [r3, #0]
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	f022 0201 	bic.w	r2, r2, #1
 8003f8e:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8003f96:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	2200      	movs	r2, #0
 8003f9c:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	68fa      	ldr	r2, [r7, #12]
 8003fa4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	2220      	movs	r2, #32
 8003faa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	2200      	movs	r2, #0
 8003fb2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8003fb6:	2300      	movs	r3, #0
}
 8003fb8:	4618      	mov	r0, r3
 8003fba:	3714      	adds	r7, #20
 8003fbc:	46bd      	mov	sp, r7
 8003fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc2:	4770      	bx	lr

08003fc4 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8003fc4:	b580      	push	{r7, lr}
 8003fc6:	b084      	sub	sp, #16
 8003fc8:	af00      	add	r7, sp, #0
 8003fca:	6078      	str	r0, [r7, #4]
 8003fcc:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8003fd4:	2b01      	cmp	r3, #1
 8003fd6:	d101      	bne.n	8003fdc <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8003fd8:	2302      	movs	r3, #2
 8003fda:	e02d      	b.n	8004038 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	2201      	movs	r2, #1
 8003fe0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	2224      	movs	r2, #36	; 0x24
 8003fe8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	681a      	ldr	r2, [r3, #0]
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	f022 0201 	bic.w	r2, r2, #1
 8004002:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	689b      	ldr	r3, [r3, #8]
 800400a:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	683a      	ldr	r2, [r7, #0]
 8004014:	430a      	orrs	r2, r1
 8004016:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004018:	6878      	ldr	r0, [r7, #4]
 800401a:	f000 f84f 	bl	80040bc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	68fa      	ldr	r2, [r7, #12]
 8004024:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	2220      	movs	r2, #32
 800402a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	2200      	movs	r2, #0
 8004032:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8004036:	2300      	movs	r3, #0
}
 8004038:	4618      	mov	r0, r3
 800403a:	3710      	adds	r7, #16
 800403c:	46bd      	mov	sp, r7
 800403e:	bd80      	pop	{r7, pc}

08004040 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004040:	b580      	push	{r7, lr}
 8004042:	b084      	sub	sp, #16
 8004044:	af00      	add	r7, sp, #0
 8004046:	6078      	str	r0, [r7, #4]
 8004048:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8004050:	2b01      	cmp	r3, #1
 8004052:	d101      	bne.n	8004058 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8004054:	2302      	movs	r3, #2
 8004056:	e02d      	b.n	80040b4 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	2201      	movs	r2, #1
 800405c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	2224      	movs	r2, #36	; 0x24
 8004064:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	681a      	ldr	r2, [r3, #0]
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	f022 0201 	bic.w	r2, r2, #1
 800407e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	689b      	ldr	r3, [r3, #8]
 8004086:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	683a      	ldr	r2, [r7, #0]
 8004090:	430a      	orrs	r2, r1
 8004092:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004094:	6878      	ldr	r0, [r7, #4]
 8004096:	f000 f811 	bl	80040bc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	68fa      	ldr	r2, [r7, #12]
 80040a0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	2220      	movs	r2, #32
 80040a6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	2200      	movs	r2, #0
 80040ae:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80040b2:	2300      	movs	r3, #0
}
 80040b4:	4618      	mov	r0, r3
 80040b6:	3710      	adds	r7, #16
 80040b8:	46bd      	mov	sp, r7
 80040ba:	bd80      	pop	{r7, pc}

080040bc <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80040bc:	b480      	push	{r7}
 80040be:	b085      	sub	sp, #20
 80040c0:	af00      	add	r7, sp, #0
 80040c2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d108      	bne.n	80040de <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	2201      	movs	r2, #1
 80040d0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	2201      	movs	r2, #1
 80040d8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80040dc:	e031      	b.n	8004142 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80040de:	2308      	movs	r3, #8
 80040e0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80040e2:	2308      	movs	r3, #8
 80040e4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	689b      	ldr	r3, [r3, #8]
 80040ec:	0e5b      	lsrs	r3, r3, #25
 80040ee:	b2db      	uxtb	r3, r3
 80040f0:	f003 0307 	and.w	r3, r3, #7
 80040f4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	689b      	ldr	r3, [r3, #8]
 80040fc:	0f5b      	lsrs	r3, r3, #29
 80040fe:	b2db      	uxtb	r3, r3
 8004100:	f003 0307 	and.w	r3, r3, #7
 8004104:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004106:	7bbb      	ldrb	r3, [r7, #14]
 8004108:	7b3a      	ldrb	r2, [r7, #12]
 800410a:	4911      	ldr	r1, [pc, #68]	; (8004150 <UARTEx_SetNbDataToProcess+0x94>)
 800410c:	5c8a      	ldrb	r2, [r1, r2]
 800410e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8004112:	7b3a      	ldrb	r2, [r7, #12]
 8004114:	490f      	ldr	r1, [pc, #60]	; (8004154 <UARTEx_SetNbDataToProcess+0x98>)
 8004116:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004118:	fb93 f3f2 	sdiv	r3, r3, r2
 800411c:	b29a      	uxth	r2, r3
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004124:	7bfb      	ldrb	r3, [r7, #15]
 8004126:	7b7a      	ldrb	r2, [r7, #13]
 8004128:	4909      	ldr	r1, [pc, #36]	; (8004150 <UARTEx_SetNbDataToProcess+0x94>)
 800412a:	5c8a      	ldrb	r2, [r1, r2]
 800412c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8004130:	7b7a      	ldrb	r2, [r7, #13]
 8004132:	4908      	ldr	r1, [pc, #32]	; (8004154 <UARTEx_SetNbDataToProcess+0x98>)
 8004134:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004136:	fb93 f3f2 	sdiv	r3, r3, r2
 800413a:	b29a      	uxth	r2, r3
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8004142:	bf00      	nop
 8004144:	3714      	adds	r7, #20
 8004146:	46bd      	mov	sp, r7
 8004148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800414c:	4770      	bx	lr
 800414e:	bf00      	nop
 8004150:	08005288 	.word	0x08005288
 8004154:	08005290 	.word	0x08005290

08004158 <__errno>:
 8004158:	4b01      	ldr	r3, [pc, #4]	; (8004160 <__errno+0x8>)
 800415a:	6818      	ldr	r0, [r3, #0]
 800415c:	4770      	bx	lr
 800415e:	bf00      	nop
 8004160:	20000010 	.word	0x20000010

08004164 <__libc_init_array>:
 8004164:	b570      	push	{r4, r5, r6, lr}
 8004166:	4d0d      	ldr	r5, [pc, #52]	; (800419c <__libc_init_array+0x38>)
 8004168:	4c0d      	ldr	r4, [pc, #52]	; (80041a0 <__libc_init_array+0x3c>)
 800416a:	1b64      	subs	r4, r4, r5
 800416c:	10a4      	asrs	r4, r4, #2
 800416e:	2600      	movs	r6, #0
 8004170:	42a6      	cmp	r6, r4
 8004172:	d109      	bne.n	8004188 <__libc_init_array+0x24>
 8004174:	4d0b      	ldr	r5, [pc, #44]	; (80041a4 <__libc_init_array+0x40>)
 8004176:	4c0c      	ldr	r4, [pc, #48]	; (80041a8 <__libc_init_array+0x44>)
 8004178:	f001 f824 	bl	80051c4 <_init>
 800417c:	1b64      	subs	r4, r4, r5
 800417e:	10a4      	asrs	r4, r4, #2
 8004180:	2600      	movs	r6, #0
 8004182:	42a6      	cmp	r6, r4
 8004184:	d105      	bne.n	8004192 <__libc_init_array+0x2e>
 8004186:	bd70      	pop	{r4, r5, r6, pc}
 8004188:	f855 3b04 	ldr.w	r3, [r5], #4
 800418c:	4798      	blx	r3
 800418e:	3601      	adds	r6, #1
 8004190:	e7ee      	b.n	8004170 <__libc_init_array+0xc>
 8004192:	f855 3b04 	ldr.w	r3, [r5], #4
 8004196:	4798      	blx	r3
 8004198:	3601      	adds	r6, #1
 800419a:	e7f2      	b.n	8004182 <__libc_init_array+0x1e>
 800419c:	08005338 	.word	0x08005338
 80041a0:	08005338 	.word	0x08005338
 80041a4:	08005338 	.word	0x08005338
 80041a8:	0800533c 	.word	0x0800533c

080041ac <memset>:
 80041ac:	4402      	add	r2, r0
 80041ae:	4603      	mov	r3, r0
 80041b0:	4293      	cmp	r3, r2
 80041b2:	d100      	bne.n	80041b6 <memset+0xa>
 80041b4:	4770      	bx	lr
 80041b6:	f803 1b01 	strb.w	r1, [r3], #1
 80041ba:	e7f9      	b.n	80041b0 <memset+0x4>

080041bc <iprintf>:
 80041bc:	b40f      	push	{r0, r1, r2, r3}
 80041be:	4b0a      	ldr	r3, [pc, #40]	; (80041e8 <iprintf+0x2c>)
 80041c0:	b513      	push	{r0, r1, r4, lr}
 80041c2:	681c      	ldr	r4, [r3, #0]
 80041c4:	b124      	cbz	r4, 80041d0 <iprintf+0x14>
 80041c6:	69a3      	ldr	r3, [r4, #24]
 80041c8:	b913      	cbnz	r3, 80041d0 <iprintf+0x14>
 80041ca:	4620      	mov	r0, r4
 80041cc:	f000 fa5e 	bl	800468c <__sinit>
 80041d0:	ab05      	add	r3, sp, #20
 80041d2:	9a04      	ldr	r2, [sp, #16]
 80041d4:	68a1      	ldr	r1, [r4, #8]
 80041d6:	9301      	str	r3, [sp, #4]
 80041d8:	4620      	mov	r0, r4
 80041da:	f000 fc67 	bl	8004aac <_vfiprintf_r>
 80041de:	b002      	add	sp, #8
 80041e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80041e4:	b004      	add	sp, #16
 80041e6:	4770      	bx	lr
 80041e8:	20000010 	.word	0x20000010

080041ec <_puts_r>:
 80041ec:	b570      	push	{r4, r5, r6, lr}
 80041ee:	460e      	mov	r6, r1
 80041f0:	4605      	mov	r5, r0
 80041f2:	b118      	cbz	r0, 80041fc <_puts_r+0x10>
 80041f4:	6983      	ldr	r3, [r0, #24]
 80041f6:	b90b      	cbnz	r3, 80041fc <_puts_r+0x10>
 80041f8:	f000 fa48 	bl	800468c <__sinit>
 80041fc:	69ab      	ldr	r3, [r5, #24]
 80041fe:	68ac      	ldr	r4, [r5, #8]
 8004200:	b913      	cbnz	r3, 8004208 <_puts_r+0x1c>
 8004202:	4628      	mov	r0, r5
 8004204:	f000 fa42 	bl	800468c <__sinit>
 8004208:	4b2c      	ldr	r3, [pc, #176]	; (80042bc <_puts_r+0xd0>)
 800420a:	429c      	cmp	r4, r3
 800420c:	d120      	bne.n	8004250 <_puts_r+0x64>
 800420e:	686c      	ldr	r4, [r5, #4]
 8004210:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004212:	07db      	lsls	r3, r3, #31
 8004214:	d405      	bmi.n	8004222 <_puts_r+0x36>
 8004216:	89a3      	ldrh	r3, [r4, #12]
 8004218:	0598      	lsls	r0, r3, #22
 800421a:	d402      	bmi.n	8004222 <_puts_r+0x36>
 800421c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800421e:	f000 fad3 	bl	80047c8 <__retarget_lock_acquire_recursive>
 8004222:	89a3      	ldrh	r3, [r4, #12]
 8004224:	0719      	lsls	r1, r3, #28
 8004226:	d51d      	bpl.n	8004264 <_puts_r+0x78>
 8004228:	6923      	ldr	r3, [r4, #16]
 800422a:	b1db      	cbz	r3, 8004264 <_puts_r+0x78>
 800422c:	3e01      	subs	r6, #1
 800422e:	68a3      	ldr	r3, [r4, #8]
 8004230:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8004234:	3b01      	subs	r3, #1
 8004236:	60a3      	str	r3, [r4, #8]
 8004238:	bb39      	cbnz	r1, 800428a <_puts_r+0x9e>
 800423a:	2b00      	cmp	r3, #0
 800423c:	da38      	bge.n	80042b0 <_puts_r+0xc4>
 800423e:	4622      	mov	r2, r4
 8004240:	210a      	movs	r1, #10
 8004242:	4628      	mov	r0, r5
 8004244:	f000 f848 	bl	80042d8 <__swbuf_r>
 8004248:	3001      	adds	r0, #1
 800424a:	d011      	beq.n	8004270 <_puts_r+0x84>
 800424c:	250a      	movs	r5, #10
 800424e:	e011      	b.n	8004274 <_puts_r+0x88>
 8004250:	4b1b      	ldr	r3, [pc, #108]	; (80042c0 <_puts_r+0xd4>)
 8004252:	429c      	cmp	r4, r3
 8004254:	d101      	bne.n	800425a <_puts_r+0x6e>
 8004256:	68ac      	ldr	r4, [r5, #8]
 8004258:	e7da      	b.n	8004210 <_puts_r+0x24>
 800425a:	4b1a      	ldr	r3, [pc, #104]	; (80042c4 <_puts_r+0xd8>)
 800425c:	429c      	cmp	r4, r3
 800425e:	bf08      	it	eq
 8004260:	68ec      	ldreq	r4, [r5, #12]
 8004262:	e7d5      	b.n	8004210 <_puts_r+0x24>
 8004264:	4621      	mov	r1, r4
 8004266:	4628      	mov	r0, r5
 8004268:	f000 f888 	bl	800437c <__swsetup_r>
 800426c:	2800      	cmp	r0, #0
 800426e:	d0dd      	beq.n	800422c <_puts_r+0x40>
 8004270:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8004274:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004276:	07da      	lsls	r2, r3, #31
 8004278:	d405      	bmi.n	8004286 <_puts_r+0x9a>
 800427a:	89a3      	ldrh	r3, [r4, #12]
 800427c:	059b      	lsls	r3, r3, #22
 800427e:	d402      	bmi.n	8004286 <_puts_r+0x9a>
 8004280:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004282:	f000 faa2 	bl	80047ca <__retarget_lock_release_recursive>
 8004286:	4628      	mov	r0, r5
 8004288:	bd70      	pop	{r4, r5, r6, pc}
 800428a:	2b00      	cmp	r3, #0
 800428c:	da04      	bge.n	8004298 <_puts_r+0xac>
 800428e:	69a2      	ldr	r2, [r4, #24]
 8004290:	429a      	cmp	r2, r3
 8004292:	dc06      	bgt.n	80042a2 <_puts_r+0xb6>
 8004294:	290a      	cmp	r1, #10
 8004296:	d004      	beq.n	80042a2 <_puts_r+0xb6>
 8004298:	6823      	ldr	r3, [r4, #0]
 800429a:	1c5a      	adds	r2, r3, #1
 800429c:	6022      	str	r2, [r4, #0]
 800429e:	7019      	strb	r1, [r3, #0]
 80042a0:	e7c5      	b.n	800422e <_puts_r+0x42>
 80042a2:	4622      	mov	r2, r4
 80042a4:	4628      	mov	r0, r5
 80042a6:	f000 f817 	bl	80042d8 <__swbuf_r>
 80042aa:	3001      	adds	r0, #1
 80042ac:	d1bf      	bne.n	800422e <_puts_r+0x42>
 80042ae:	e7df      	b.n	8004270 <_puts_r+0x84>
 80042b0:	6823      	ldr	r3, [r4, #0]
 80042b2:	250a      	movs	r5, #10
 80042b4:	1c5a      	adds	r2, r3, #1
 80042b6:	6022      	str	r2, [r4, #0]
 80042b8:	701d      	strb	r5, [r3, #0]
 80042ba:	e7db      	b.n	8004274 <_puts_r+0x88>
 80042bc:	080052bc 	.word	0x080052bc
 80042c0:	080052dc 	.word	0x080052dc
 80042c4:	0800529c 	.word	0x0800529c

080042c8 <puts>:
 80042c8:	4b02      	ldr	r3, [pc, #8]	; (80042d4 <puts+0xc>)
 80042ca:	4601      	mov	r1, r0
 80042cc:	6818      	ldr	r0, [r3, #0]
 80042ce:	f7ff bf8d 	b.w	80041ec <_puts_r>
 80042d2:	bf00      	nop
 80042d4:	20000010 	.word	0x20000010

080042d8 <__swbuf_r>:
 80042d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80042da:	460e      	mov	r6, r1
 80042dc:	4614      	mov	r4, r2
 80042de:	4605      	mov	r5, r0
 80042e0:	b118      	cbz	r0, 80042ea <__swbuf_r+0x12>
 80042e2:	6983      	ldr	r3, [r0, #24]
 80042e4:	b90b      	cbnz	r3, 80042ea <__swbuf_r+0x12>
 80042e6:	f000 f9d1 	bl	800468c <__sinit>
 80042ea:	4b21      	ldr	r3, [pc, #132]	; (8004370 <__swbuf_r+0x98>)
 80042ec:	429c      	cmp	r4, r3
 80042ee:	d12b      	bne.n	8004348 <__swbuf_r+0x70>
 80042f0:	686c      	ldr	r4, [r5, #4]
 80042f2:	69a3      	ldr	r3, [r4, #24]
 80042f4:	60a3      	str	r3, [r4, #8]
 80042f6:	89a3      	ldrh	r3, [r4, #12]
 80042f8:	071a      	lsls	r2, r3, #28
 80042fa:	d52f      	bpl.n	800435c <__swbuf_r+0x84>
 80042fc:	6923      	ldr	r3, [r4, #16]
 80042fe:	b36b      	cbz	r3, 800435c <__swbuf_r+0x84>
 8004300:	6923      	ldr	r3, [r4, #16]
 8004302:	6820      	ldr	r0, [r4, #0]
 8004304:	1ac0      	subs	r0, r0, r3
 8004306:	6963      	ldr	r3, [r4, #20]
 8004308:	b2f6      	uxtb	r6, r6
 800430a:	4283      	cmp	r3, r0
 800430c:	4637      	mov	r7, r6
 800430e:	dc04      	bgt.n	800431a <__swbuf_r+0x42>
 8004310:	4621      	mov	r1, r4
 8004312:	4628      	mov	r0, r5
 8004314:	f000 f926 	bl	8004564 <_fflush_r>
 8004318:	bb30      	cbnz	r0, 8004368 <__swbuf_r+0x90>
 800431a:	68a3      	ldr	r3, [r4, #8]
 800431c:	3b01      	subs	r3, #1
 800431e:	60a3      	str	r3, [r4, #8]
 8004320:	6823      	ldr	r3, [r4, #0]
 8004322:	1c5a      	adds	r2, r3, #1
 8004324:	6022      	str	r2, [r4, #0]
 8004326:	701e      	strb	r6, [r3, #0]
 8004328:	6963      	ldr	r3, [r4, #20]
 800432a:	3001      	adds	r0, #1
 800432c:	4283      	cmp	r3, r0
 800432e:	d004      	beq.n	800433a <__swbuf_r+0x62>
 8004330:	89a3      	ldrh	r3, [r4, #12]
 8004332:	07db      	lsls	r3, r3, #31
 8004334:	d506      	bpl.n	8004344 <__swbuf_r+0x6c>
 8004336:	2e0a      	cmp	r6, #10
 8004338:	d104      	bne.n	8004344 <__swbuf_r+0x6c>
 800433a:	4621      	mov	r1, r4
 800433c:	4628      	mov	r0, r5
 800433e:	f000 f911 	bl	8004564 <_fflush_r>
 8004342:	b988      	cbnz	r0, 8004368 <__swbuf_r+0x90>
 8004344:	4638      	mov	r0, r7
 8004346:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004348:	4b0a      	ldr	r3, [pc, #40]	; (8004374 <__swbuf_r+0x9c>)
 800434a:	429c      	cmp	r4, r3
 800434c:	d101      	bne.n	8004352 <__swbuf_r+0x7a>
 800434e:	68ac      	ldr	r4, [r5, #8]
 8004350:	e7cf      	b.n	80042f2 <__swbuf_r+0x1a>
 8004352:	4b09      	ldr	r3, [pc, #36]	; (8004378 <__swbuf_r+0xa0>)
 8004354:	429c      	cmp	r4, r3
 8004356:	bf08      	it	eq
 8004358:	68ec      	ldreq	r4, [r5, #12]
 800435a:	e7ca      	b.n	80042f2 <__swbuf_r+0x1a>
 800435c:	4621      	mov	r1, r4
 800435e:	4628      	mov	r0, r5
 8004360:	f000 f80c 	bl	800437c <__swsetup_r>
 8004364:	2800      	cmp	r0, #0
 8004366:	d0cb      	beq.n	8004300 <__swbuf_r+0x28>
 8004368:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800436c:	e7ea      	b.n	8004344 <__swbuf_r+0x6c>
 800436e:	bf00      	nop
 8004370:	080052bc 	.word	0x080052bc
 8004374:	080052dc 	.word	0x080052dc
 8004378:	0800529c 	.word	0x0800529c

0800437c <__swsetup_r>:
 800437c:	4b32      	ldr	r3, [pc, #200]	; (8004448 <__swsetup_r+0xcc>)
 800437e:	b570      	push	{r4, r5, r6, lr}
 8004380:	681d      	ldr	r5, [r3, #0]
 8004382:	4606      	mov	r6, r0
 8004384:	460c      	mov	r4, r1
 8004386:	b125      	cbz	r5, 8004392 <__swsetup_r+0x16>
 8004388:	69ab      	ldr	r3, [r5, #24]
 800438a:	b913      	cbnz	r3, 8004392 <__swsetup_r+0x16>
 800438c:	4628      	mov	r0, r5
 800438e:	f000 f97d 	bl	800468c <__sinit>
 8004392:	4b2e      	ldr	r3, [pc, #184]	; (800444c <__swsetup_r+0xd0>)
 8004394:	429c      	cmp	r4, r3
 8004396:	d10f      	bne.n	80043b8 <__swsetup_r+0x3c>
 8004398:	686c      	ldr	r4, [r5, #4]
 800439a:	89a3      	ldrh	r3, [r4, #12]
 800439c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80043a0:	0719      	lsls	r1, r3, #28
 80043a2:	d42c      	bmi.n	80043fe <__swsetup_r+0x82>
 80043a4:	06dd      	lsls	r5, r3, #27
 80043a6:	d411      	bmi.n	80043cc <__swsetup_r+0x50>
 80043a8:	2309      	movs	r3, #9
 80043aa:	6033      	str	r3, [r6, #0]
 80043ac:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80043b0:	81a3      	strh	r3, [r4, #12]
 80043b2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80043b6:	e03e      	b.n	8004436 <__swsetup_r+0xba>
 80043b8:	4b25      	ldr	r3, [pc, #148]	; (8004450 <__swsetup_r+0xd4>)
 80043ba:	429c      	cmp	r4, r3
 80043bc:	d101      	bne.n	80043c2 <__swsetup_r+0x46>
 80043be:	68ac      	ldr	r4, [r5, #8]
 80043c0:	e7eb      	b.n	800439a <__swsetup_r+0x1e>
 80043c2:	4b24      	ldr	r3, [pc, #144]	; (8004454 <__swsetup_r+0xd8>)
 80043c4:	429c      	cmp	r4, r3
 80043c6:	bf08      	it	eq
 80043c8:	68ec      	ldreq	r4, [r5, #12]
 80043ca:	e7e6      	b.n	800439a <__swsetup_r+0x1e>
 80043cc:	0758      	lsls	r0, r3, #29
 80043ce:	d512      	bpl.n	80043f6 <__swsetup_r+0x7a>
 80043d0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80043d2:	b141      	cbz	r1, 80043e6 <__swsetup_r+0x6a>
 80043d4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80043d8:	4299      	cmp	r1, r3
 80043da:	d002      	beq.n	80043e2 <__swsetup_r+0x66>
 80043dc:	4630      	mov	r0, r6
 80043de:	f000 fa5b 	bl	8004898 <_free_r>
 80043e2:	2300      	movs	r3, #0
 80043e4:	6363      	str	r3, [r4, #52]	; 0x34
 80043e6:	89a3      	ldrh	r3, [r4, #12]
 80043e8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80043ec:	81a3      	strh	r3, [r4, #12]
 80043ee:	2300      	movs	r3, #0
 80043f0:	6063      	str	r3, [r4, #4]
 80043f2:	6923      	ldr	r3, [r4, #16]
 80043f4:	6023      	str	r3, [r4, #0]
 80043f6:	89a3      	ldrh	r3, [r4, #12]
 80043f8:	f043 0308 	orr.w	r3, r3, #8
 80043fc:	81a3      	strh	r3, [r4, #12]
 80043fe:	6923      	ldr	r3, [r4, #16]
 8004400:	b94b      	cbnz	r3, 8004416 <__swsetup_r+0x9a>
 8004402:	89a3      	ldrh	r3, [r4, #12]
 8004404:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004408:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800440c:	d003      	beq.n	8004416 <__swsetup_r+0x9a>
 800440e:	4621      	mov	r1, r4
 8004410:	4630      	mov	r0, r6
 8004412:	f000 fa01 	bl	8004818 <__smakebuf_r>
 8004416:	89a0      	ldrh	r0, [r4, #12]
 8004418:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800441c:	f010 0301 	ands.w	r3, r0, #1
 8004420:	d00a      	beq.n	8004438 <__swsetup_r+0xbc>
 8004422:	2300      	movs	r3, #0
 8004424:	60a3      	str	r3, [r4, #8]
 8004426:	6963      	ldr	r3, [r4, #20]
 8004428:	425b      	negs	r3, r3
 800442a:	61a3      	str	r3, [r4, #24]
 800442c:	6923      	ldr	r3, [r4, #16]
 800442e:	b943      	cbnz	r3, 8004442 <__swsetup_r+0xc6>
 8004430:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8004434:	d1ba      	bne.n	80043ac <__swsetup_r+0x30>
 8004436:	bd70      	pop	{r4, r5, r6, pc}
 8004438:	0781      	lsls	r1, r0, #30
 800443a:	bf58      	it	pl
 800443c:	6963      	ldrpl	r3, [r4, #20]
 800443e:	60a3      	str	r3, [r4, #8]
 8004440:	e7f4      	b.n	800442c <__swsetup_r+0xb0>
 8004442:	2000      	movs	r0, #0
 8004444:	e7f7      	b.n	8004436 <__swsetup_r+0xba>
 8004446:	bf00      	nop
 8004448:	20000010 	.word	0x20000010
 800444c:	080052bc 	.word	0x080052bc
 8004450:	080052dc 	.word	0x080052dc
 8004454:	0800529c 	.word	0x0800529c

08004458 <__sflush_r>:
 8004458:	898a      	ldrh	r2, [r1, #12]
 800445a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800445e:	4605      	mov	r5, r0
 8004460:	0710      	lsls	r0, r2, #28
 8004462:	460c      	mov	r4, r1
 8004464:	d458      	bmi.n	8004518 <__sflush_r+0xc0>
 8004466:	684b      	ldr	r3, [r1, #4]
 8004468:	2b00      	cmp	r3, #0
 800446a:	dc05      	bgt.n	8004478 <__sflush_r+0x20>
 800446c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800446e:	2b00      	cmp	r3, #0
 8004470:	dc02      	bgt.n	8004478 <__sflush_r+0x20>
 8004472:	2000      	movs	r0, #0
 8004474:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004478:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800447a:	2e00      	cmp	r6, #0
 800447c:	d0f9      	beq.n	8004472 <__sflush_r+0x1a>
 800447e:	2300      	movs	r3, #0
 8004480:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004484:	682f      	ldr	r7, [r5, #0]
 8004486:	602b      	str	r3, [r5, #0]
 8004488:	d032      	beq.n	80044f0 <__sflush_r+0x98>
 800448a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800448c:	89a3      	ldrh	r3, [r4, #12]
 800448e:	075a      	lsls	r2, r3, #29
 8004490:	d505      	bpl.n	800449e <__sflush_r+0x46>
 8004492:	6863      	ldr	r3, [r4, #4]
 8004494:	1ac0      	subs	r0, r0, r3
 8004496:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004498:	b10b      	cbz	r3, 800449e <__sflush_r+0x46>
 800449a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800449c:	1ac0      	subs	r0, r0, r3
 800449e:	2300      	movs	r3, #0
 80044a0:	4602      	mov	r2, r0
 80044a2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80044a4:	6a21      	ldr	r1, [r4, #32]
 80044a6:	4628      	mov	r0, r5
 80044a8:	47b0      	blx	r6
 80044aa:	1c43      	adds	r3, r0, #1
 80044ac:	89a3      	ldrh	r3, [r4, #12]
 80044ae:	d106      	bne.n	80044be <__sflush_r+0x66>
 80044b0:	6829      	ldr	r1, [r5, #0]
 80044b2:	291d      	cmp	r1, #29
 80044b4:	d82c      	bhi.n	8004510 <__sflush_r+0xb8>
 80044b6:	4a2a      	ldr	r2, [pc, #168]	; (8004560 <__sflush_r+0x108>)
 80044b8:	40ca      	lsrs	r2, r1
 80044ba:	07d6      	lsls	r6, r2, #31
 80044bc:	d528      	bpl.n	8004510 <__sflush_r+0xb8>
 80044be:	2200      	movs	r2, #0
 80044c0:	6062      	str	r2, [r4, #4]
 80044c2:	04d9      	lsls	r1, r3, #19
 80044c4:	6922      	ldr	r2, [r4, #16]
 80044c6:	6022      	str	r2, [r4, #0]
 80044c8:	d504      	bpl.n	80044d4 <__sflush_r+0x7c>
 80044ca:	1c42      	adds	r2, r0, #1
 80044cc:	d101      	bne.n	80044d2 <__sflush_r+0x7a>
 80044ce:	682b      	ldr	r3, [r5, #0]
 80044d0:	b903      	cbnz	r3, 80044d4 <__sflush_r+0x7c>
 80044d2:	6560      	str	r0, [r4, #84]	; 0x54
 80044d4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80044d6:	602f      	str	r7, [r5, #0]
 80044d8:	2900      	cmp	r1, #0
 80044da:	d0ca      	beq.n	8004472 <__sflush_r+0x1a>
 80044dc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80044e0:	4299      	cmp	r1, r3
 80044e2:	d002      	beq.n	80044ea <__sflush_r+0x92>
 80044e4:	4628      	mov	r0, r5
 80044e6:	f000 f9d7 	bl	8004898 <_free_r>
 80044ea:	2000      	movs	r0, #0
 80044ec:	6360      	str	r0, [r4, #52]	; 0x34
 80044ee:	e7c1      	b.n	8004474 <__sflush_r+0x1c>
 80044f0:	6a21      	ldr	r1, [r4, #32]
 80044f2:	2301      	movs	r3, #1
 80044f4:	4628      	mov	r0, r5
 80044f6:	47b0      	blx	r6
 80044f8:	1c41      	adds	r1, r0, #1
 80044fa:	d1c7      	bne.n	800448c <__sflush_r+0x34>
 80044fc:	682b      	ldr	r3, [r5, #0]
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d0c4      	beq.n	800448c <__sflush_r+0x34>
 8004502:	2b1d      	cmp	r3, #29
 8004504:	d001      	beq.n	800450a <__sflush_r+0xb2>
 8004506:	2b16      	cmp	r3, #22
 8004508:	d101      	bne.n	800450e <__sflush_r+0xb6>
 800450a:	602f      	str	r7, [r5, #0]
 800450c:	e7b1      	b.n	8004472 <__sflush_r+0x1a>
 800450e:	89a3      	ldrh	r3, [r4, #12]
 8004510:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004514:	81a3      	strh	r3, [r4, #12]
 8004516:	e7ad      	b.n	8004474 <__sflush_r+0x1c>
 8004518:	690f      	ldr	r7, [r1, #16]
 800451a:	2f00      	cmp	r7, #0
 800451c:	d0a9      	beq.n	8004472 <__sflush_r+0x1a>
 800451e:	0793      	lsls	r3, r2, #30
 8004520:	680e      	ldr	r6, [r1, #0]
 8004522:	bf08      	it	eq
 8004524:	694b      	ldreq	r3, [r1, #20]
 8004526:	600f      	str	r7, [r1, #0]
 8004528:	bf18      	it	ne
 800452a:	2300      	movne	r3, #0
 800452c:	eba6 0807 	sub.w	r8, r6, r7
 8004530:	608b      	str	r3, [r1, #8]
 8004532:	f1b8 0f00 	cmp.w	r8, #0
 8004536:	dd9c      	ble.n	8004472 <__sflush_r+0x1a>
 8004538:	6a21      	ldr	r1, [r4, #32]
 800453a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800453c:	4643      	mov	r3, r8
 800453e:	463a      	mov	r2, r7
 8004540:	4628      	mov	r0, r5
 8004542:	47b0      	blx	r6
 8004544:	2800      	cmp	r0, #0
 8004546:	dc06      	bgt.n	8004556 <__sflush_r+0xfe>
 8004548:	89a3      	ldrh	r3, [r4, #12]
 800454a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800454e:	81a3      	strh	r3, [r4, #12]
 8004550:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004554:	e78e      	b.n	8004474 <__sflush_r+0x1c>
 8004556:	4407      	add	r7, r0
 8004558:	eba8 0800 	sub.w	r8, r8, r0
 800455c:	e7e9      	b.n	8004532 <__sflush_r+0xda>
 800455e:	bf00      	nop
 8004560:	20400001 	.word	0x20400001

08004564 <_fflush_r>:
 8004564:	b538      	push	{r3, r4, r5, lr}
 8004566:	690b      	ldr	r3, [r1, #16]
 8004568:	4605      	mov	r5, r0
 800456a:	460c      	mov	r4, r1
 800456c:	b913      	cbnz	r3, 8004574 <_fflush_r+0x10>
 800456e:	2500      	movs	r5, #0
 8004570:	4628      	mov	r0, r5
 8004572:	bd38      	pop	{r3, r4, r5, pc}
 8004574:	b118      	cbz	r0, 800457e <_fflush_r+0x1a>
 8004576:	6983      	ldr	r3, [r0, #24]
 8004578:	b90b      	cbnz	r3, 800457e <_fflush_r+0x1a>
 800457a:	f000 f887 	bl	800468c <__sinit>
 800457e:	4b14      	ldr	r3, [pc, #80]	; (80045d0 <_fflush_r+0x6c>)
 8004580:	429c      	cmp	r4, r3
 8004582:	d11b      	bne.n	80045bc <_fflush_r+0x58>
 8004584:	686c      	ldr	r4, [r5, #4]
 8004586:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800458a:	2b00      	cmp	r3, #0
 800458c:	d0ef      	beq.n	800456e <_fflush_r+0xa>
 800458e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004590:	07d0      	lsls	r0, r2, #31
 8004592:	d404      	bmi.n	800459e <_fflush_r+0x3a>
 8004594:	0599      	lsls	r1, r3, #22
 8004596:	d402      	bmi.n	800459e <_fflush_r+0x3a>
 8004598:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800459a:	f000 f915 	bl	80047c8 <__retarget_lock_acquire_recursive>
 800459e:	4628      	mov	r0, r5
 80045a0:	4621      	mov	r1, r4
 80045a2:	f7ff ff59 	bl	8004458 <__sflush_r>
 80045a6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80045a8:	07da      	lsls	r2, r3, #31
 80045aa:	4605      	mov	r5, r0
 80045ac:	d4e0      	bmi.n	8004570 <_fflush_r+0xc>
 80045ae:	89a3      	ldrh	r3, [r4, #12]
 80045b0:	059b      	lsls	r3, r3, #22
 80045b2:	d4dd      	bmi.n	8004570 <_fflush_r+0xc>
 80045b4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80045b6:	f000 f908 	bl	80047ca <__retarget_lock_release_recursive>
 80045ba:	e7d9      	b.n	8004570 <_fflush_r+0xc>
 80045bc:	4b05      	ldr	r3, [pc, #20]	; (80045d4 <_fflush_r+0x70>)
 80045be:	429c      	cmp	r4, r3
 80045c0:	d101      	bne.n	80045c6 <_fflush_r+0x62>
 80045c2:	68ac      	ldr	r4, [r5, #8]
 80045c4:	e7df      	b.n	8004586 <_fflush_r+0x22>
 80045c6:	4b04      	ldr	r3, [pc, #16]	; (80045d8 <_fflush_r+0x74>)
 80045c8:	429c      	cmp	r4, r3
 80045ca:	bf08      	it	eq
 80045cc:	68ec      	ldreq	r4, [r5, #12]
 80045ce:	e7da      	b.n	8004586 <_fflush_r+0x22>
 80045d0:	080052bc 	.word	0x080052bc
 80045d4:	080052dc 	.word	0x080052dc
 80045d8:	0800529c 	.word	0x0800529c

080045dc <std>:
 80045dc:	2300      	movs	r3, #0
 80045de:	b510      	push	{r4, lr}
 80045e0:	4604      	mov	r4, r0
 80045e2:	e9c0 3300 	strd	r3, r3, [r0]
 80045e6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80045ea:	6083      	str	r3, [r0, #8]
 80045ec:	8181      	strh	r1, [r0, #12]
 80045ee:	6643      	str	r3, [r0, #100]	; 0x64
 80045f0:	81c2      	strh	r2, [r0, #14]
 80045f2:	6183      	str	r3, [r0, #24]
 80045f4:	4619      	mov	r1, r3
 80045f6:	2208      	movs	r2, #8
 80045f8:	305c      	adds	r0, #92	; 0x5c
 80045fa:	f7ff fdd7 	bl	80041ac <memset>
 80045fe:	4b05      	ldr	r3, [pc, #20]	; (8004614 <std+0x38>)
 8004600:	6263      	str	r3, [r4, #36]	; 0x24
 8004602:	4b05      	ldr	r3, [pc, #20]	; (8004618 <std+0x3c>)
 8004604:	62a3      	str	r3, [r4, #40]	; 0x28
 8004606:	4b05      	ldr	r3, [pc, #20]	; (800461c <std+0x40>)
 8004608:	62e3      	str	r3, [r4, #44]	; 0x2c
 800460a:	4b05      	ldr	r3, [pc, #20]	; (8004620 <std+0x44>)
 800460c:	6224      	str	r4, [r4, #32]
 800460e:	6323      	str	r3, [r4, #48]	; 0x30
 8004610:	bd10      	pop	{r4, pc}
 8004612:	bf00      	nop
 8004614:	08005055 	.word	0x08005055
 8004618:	08005077 	.word	0x08005077
 800461c:	080050af 	.word	0x080050af
 8004620:	080050d3 	.word	0x080050d3

08004624 <_cleanup_r>:
 8004624:	4901      	ldr	r1, [pc, #4]	; (800462c <_cleanup_r+0x8>)
 8004626:	f000 b8af 	b.w	8004788 <_fwalk_reent>
 800462a:	bf00      	nop
 800462c:	08004565 	.word	0x08004565

08004630 <__sfmoreglue>:
 8004630:	b570      	push	{r4, r5, r6, lr}
 8004632:	2268      	movs	r2, #104	; 0x68
 8004634:	1e4d      	subs	r5, r1, #1
 8004636:	4355      	muls	r5, r2
 8004638:	460e      	mov	r6, r1
 800463a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800463e:	f000 f997 	bl	8004970 <_malloc_r>
 8004642:	4604      	mov	r4, r0
 8004644:	b140      	cbz	r0, 8004658 <__sfmoreglue+0x28>
 8004646:	2100      	movs	r1, #0
 8004648:	e9c0 1600 	strd	r1, r6, [r0]
 800464c:	300c      	adds	r0, #12
 800464e:	60a0      	str	r0, [r4, #8]
 8004650:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8004654:	f7ff fdaa 	bl	80041ac <memset>
 8004658:	4620      	mov	r0, r4
 800465a:	bd70      	pop	{r4, r5, r6, pc}

0800465c <__sfp_lock_acquire>:
 800465c:	4801      	ldr	r0, [pc, #4]	; (8004664 <__sfp_lock_acquire+0x8>)
 800465e:	f000 b8b3 	b.w	80047c8 <__retarget_lock_acquire_recursive>
 8004662:	bf00      	nop
 8004664:	2000038d 	.word	0x2000038d

08004668 <__sfp_lock_release>:
 8004668:	4801      	ldr	r0, [pc, #4]	; (8004670 <__sfp_lock_release+0x8>)
 800466a:	f000 b8ae 	b.w	80047ca <__retarget_lock_release_recursive>
 800466e:	bf00      	nop
 8004670:	2000038d 	.word	0x2000038d

08004674 <__sinit_lock_acquire>:
 8004674:	4801      	ldr	r0, [pc, #4]	; (800467c <__sinit_lock_acquire+0x8>)
 8004676:	f000 b8a7 	b.w	80047c8 <__retarget_lock_acquire_recursive>
 800467a:	bf00      	nop
 800467c:	2000038e 	.word	0x2000038e

08004680 <__sinit_lock_release>:
 8004680:	4801      	ldr	r0, [pc, #4]	; (8004688 <__sinit_lock_release+0x8>)
 8004682:	f000 b8a2 	b.w	80047ca <__retarget_lock_release_recursive>
 8004686:	bf00      	nop
 8004688:	2000038e 	.word	0x2000038e

0800468c <__sinit>:
 800468c:	b510      	push	{r4, lr}
 800468e:	4604      	mov	r4, r0
 8004690:	f7ff fff0 	bl	8004674 <__sinit_lock_acquire>
 8004694:	69a3      	ldr	r3, [r4, #24]
 8004696:	b11b      	cbz	r3, 80046a0 <__sinit+0x14>
 8004698:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800469c:	f7ff bff0 	b.w	8004680 <__sinit_lock_release>
 80046a0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80046a4:	6523      	str	r3, [r4, #80]	; 0x50
 80046a6:	4b13      	ldr	r3, [pc, #76]	; (80046f4 <__sinit+0x68>)
 80046a8:	4a13      	ldr	r2, [pc, #76]	; (80046f8 <__sinit+0x6c>)
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	62a2      	str	r2, [r4, #40]	; 0x28
 80046ae:	42a3      	cmp	r3, r4
 80046b0:	bf04      	itt	eq
 80046b2:	2301      	moveq	r3, #1
 80046b4:	61a3      	streq	r3, [r4, #24]
 80046b6:	4620      	mov	r0, r4
 80046b8:	f000 f820 	bl	80046fc <__sfp>
 80046bc:	6060      	str	r0, [r4, #4]
 80046be:	4620      	mov	r0, r4
 80046c0:	f000 f81c 	bl	80046fc <__sfp>
 80046c4:	60a0      	str	r0, [r4, #8]
 80046c6:	4620      	mov	r0, r4
 80046c8:	f000 f818 	bl	80046fc <__sfp>
 80046cc:	2200      	movs	r2, #0
 80046ce:	60e0      	str	r0, [r4, #12]
 80046d0:	2104      	movs	r1, #4
 80046d2:	6860      	ldr	r0, [r4, #4]
 80046d4:	f7ff ff82 	bl	80045dc <std>
 80046d8:	68a0      	ldr	r0, [r4, #8]
 80046da:	2201      	movs	r2, #1
 80046dc:	2109      	movs	r1, #9
 80046de:	f7ff ff7d 	bl	80045dc <std>
 80046e2:	68e0      	ldr	r0, [r4, #12]
 80046e4:	2202      	movs	r2, #2
 80046e6:	2112      	movs	r1, #18
 80046e8:	f7ff ff78 	bl	80045dc <std>
 80046ec:	2301      	movs	r3, #1
 80046ee:	61a3      	str	r3, [r4, #24]
 80046f0:	e7d2      	b.n	8004698 <__sinit+0xc>
 80046f2:	bf00      	nop
 80046f4:	08005298 	.word	0x08005298
 80046f8:	08004625 	.word	0x08004625

080046fc <__sfp>:
 80046fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80046fe:	4607      	mov	r7, r0
 8004700:	f7ff ffac 	bl	800465c <__sfp_lock_acquire>
 8004704:	4b1e      	ldr	r3, [pc, #120]	; (8004780 <__sfp+0x84>)
 8004706:	681e      	ldr	r6, [r3, #0]
 8004708:	69b3      	ldr	r3, [r6, #24]
 800470a:	b913      	cbnz	r3, 8004712 <__sfp+0x16>
 800470c:	4630      	mov	r0, r6
 800470e:	f7ff ffbd 	bl	800468c <__sinit>
 8004712:	3648      	adds	r6, #72	; 0x48
 8004714:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8004718:	3b01      	subs	r3, #1
 800471a:	d503      	bpl.n	8004724 <__sfp+0x28>
 800471c:	6833      	ldr	r3, [r6, #0]
 800471e:	b30b      	cbz	r3, 8004764 <__sfp+0x68>
 8004720:	6836      	ldr	r6, [r6, #0]
 8004722:	e7f7      	b.n	8004714 <__sfp+0x18>
 8004724:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8004728:	b9d5      	cbnz	r5, 8004760 <__sfp+0x64>
 800472a:	4b16      	ldr	r3, [pc, #88]	; (8004784 <__sfp+0x88>)
 800472c:	60e3      	str	r3, [r4, #12]
 800472e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8004732:	6665      	str	r5, [r4, #100]	; 0x64
 8004734:	f000 f847 	bl	80047c6 <__retarget_lock_init_recursive>
 8004738:	f7ff ff96 	bl	8004668 <__sfp_lock_release>
 800473c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8004740:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8004744:	6025      	str	r5, [r4, #0]
 8004746:	61a5      	str	r5, [r4, #24]
 8004748:	2208      	movs	r2, #8
 800474a:	4629      	mov	r1, r5
 800474c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8004750:	f7ff fd2c 	bl	80041ac <memset>
 8004754:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8004758:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800475c:	4620      	mov	r0, r4
 800475e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004760:	3468      	adds	r4, #104	; 0x68
 8004762:	e7d9      	b.n	8004718 <__sfp+0x1c>
 8004764:	2104      	movs	r1, #4
 8004766:	4638      	mov	r0, r7
 8004768:	f7ff ff62 	bl	8004630 <__sfmoreglue>
 800476c:	4604      	mov	r4, r0
 800476e:	6030      	str	r0, [r6, #0]
 8004770:	2800      	cmp	r0, #0
 8004772:	d1d5      	bne.n	8004720 <__sfp+0x24>
 8004774:	f7ff ff78 	bl	8004668 <__sfp_lock_release>
 8004778:	230c      	movs	r3, #12
 800477a:	603b      	str	r3, [r7, #0]
 800477c:	e7ee      	b.n	800475c <__sfp+0x60>
 800477e:	bf00      	nop
 8004780:	08005298 	.word	0x08005298
 8004784:	ffff0001 	.word	0xffff0001

08004788 <_fwalk_reent>:
 8004788:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800478c:	4606      	mov	r6, r0
 800478e:	4688      	mov	r8, r1
 8004790:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8004794:	2700      	movs	r7, #0
 8004796:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800479a:	f1b9 0901 	subs.w	r9, r9, #1
 800479e:	d505      	bpl.n	80047ac <_fwalk_reent+0x24>
 80047a0:	6824      	ldr	r4, [r4, #0]
 80047a2:	2c00      	cmp	r4, #0
 80047a4:	d1f7      	bne.n	8004796 <_fwalk_reent+0xe>
 80047a6:	4638      	mov	r0, r7
 80047a8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80047ac:	89ab      	ldrh	r3, [r5, #12]
 80047ae:	2b01      	cmp	r3, #1
 80047b0:	d907      	bls.n	80047c2 <_fwalk_reent+0x3a>
 80047b2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80047b6:	3301      	adds	r3, #1
 80047b8:	d003      	beq.n	80047c2 <_fwalk_reent+0x3a>
 80047ba:	4629      	mov	r1, r5
 80047bc:	4630      	mov	r0, r6
 80047be:	47c0      	blx	r8
 80047c0:	4307      	orrs	r7, r0
 80047c2:	3568      	adds	r5, #104	; 0x68
 80047c4:	e7e9      	b.n	800479a <_fwalk_reent+0x12>

080047c6 <__retarget_lock_init_recursive>:
 80047c6:	4770      	bx	lr

080047c8 <__retarget_lock_acquire_recursive>:
 80047c8:	4770      	bx	lr

080047ca <__retarget_lock_release_recursive>:
 80047ca:	4770      	bx	lr

080047cc <__swhatbuf_r>:
 80047cc:	b570      	push	{r4, r5, r6, lr}
 80047ce:	460e      	mov	r6, r1
 80047d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80047d4:	2900      	cmp	r1, #0
 80047d6:	b096      	sub	sp, #88	; 0x58
 80047d8:	4614      	mov	r4, r2
 80047da:	461d      	mov	r5, r3
 80047dc:	da08      	bge.n	80047f0 <__swhatbuf_r+0x24>
 80047de:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80047e2:	2200      	movs	r2, #0
 80047e4:	602a      	str	r2, [r5, #0]
 80047e6:	061a      	lsls	r2, r3, #24
 80047e8:	d410      	bmi.n	800480c <__swhatbuf_r+0x40>
 80047ea:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80047ee:	e00e      	b.n	800480e <__swhatbuf_r+0x42>
 80047f0:	466a      	mov	r2, sp
 80047f2:	f000 fc95 	bl	8005120 <_fstat_r>
 80047f6:	2800      	cmp	r0, #0
 80047f8:	dbf1      	blt.n	80047de <__swhatbuf_r+0x12>
 80047fa:	9a01      	ldr	r2, [sp, #4]
 80047fc:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8004800:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8004804:	425a      	negs	r2, r3
 8004806:	415a      	adcs	r2, r3
 8004808:	602a      	str	r2, [r5, #0]
 800480a:	e7ee      	b.n	80047ea <__swhatbuf_r+0x1e>
 800480c:	2340      	movs	r3, #64	; 0x40
 800480e:	2000      	movs	r0, #0
 8004810:	6023      	str	r3, [r4, #0]
 8004812:	b016      	add	sp, #88	; 0x58
 8004814:	bd70      	pop	{r4, r5, r6, pc}
	...

08004818 <__smakebuf_r>:
 8004818:	898b      	ldrh	r3, [r1, #12]
 800481a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800481c:	079d      	lsls	r5, r3, #30
 800481e:	4606      	mov	r6, r0
 8004820:	460c      	mov	r4, r1
 8004822:	d507      	bpl.n	8004834 <__smakebuf_r+0x1c>
 8004824:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004828:	6023      	str	r3, [r4, #0]
 800482a:	6123      	str	r3, [r4, #16]
 800482c:	2301      	movs	r3, #1
 800482e:	6163      	str	r3, [r4, #20]
 8004830:	b002      	add	sp, #8
 8004832:	bd70      	pop	{r4, r5, r6, pc}
 8004834:	ab01      	add	r3, sp, #4
 8004836:	466a      	mov	r2, sp
 8004838:	f7ff ffc8 	bl	80047cc <__swhatbuf_r>
 800483c:	9900      	ldr	r1, [sp, #0]
 800483e:	4605      	mov	r5, r0
 8004840:	4630      	mov	r0, r6
 8004842:	f000 f895 	bl	8004970 <_malloc_r>
 8004846:	b948      	cbnz	r0, 800485c <__smakebuf_r+0x44>
 8004848:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800484c:	059a      	lsls	r2, r3, #22
 800484e:	d4ef      	bmi.n	8004830 <__smakebuf_r+0x18>
 8004850:	f023 0303 	bic.w	r3, r3, #3
 8004854:	f043 0302 	orr.w	r3, r3, #2
 8004858:	81a3      	strh	r3, [r4, #12]
 800485a:	e7e3      	b.n	8004824 <__smakebuf_r+0xc>
 800485c:	4b0d      	ldr	r3, [pc, #52]	; (8004894 <__smakebuf_r+0x7c>)
 800485e:	62b3      	str	r3, [r6, #40]	; 0x28
 8004860:	89a3      	ldrh	r3, [r4, #12]
 8004862:	6020      	str	r0, [r4, #0]
 8004864:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004868:	81a3      	strh	r3, [r4, #12]
 800486a:	9b00      	ldr	r3, [sp, #0]
 800486c:	6163      	str	r3, [r4, #20]
 800486e:	9b01      	ldr	r3, [sp, #4]
 8004870:	6120      	str	r0, [r4, #16]
 8004872:	b15b      	cbz	r3, 800488c <__smakebuf_r+0x74>
 8004874:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004878:	4630      	mov	r0, r6
 800487a:	f000 fc63 	bl	8005144 <_isatty_r>
 800487e:	b128      	cbz	r0, 800488c <__smakebuf_r+0x74>
 8004880:	89a3      	ldrh	r3, [r4, #12]
 8004882:	f023 0303 	bic.w	r3, r3, #3
 8004886:	f043 0301 	orr.w	r3, r3, #1
 800488a:	81a3      	strh	r3, [r4, #12]
 800488c:	89a0      	ldrh	r0, [r4, #12]
 800488e:	4305      	orrs	r5, r0
 8004890:	81a5      	strh	r5, [r4, #12]
 8004892:	e7cd      	b.n	8004830 <__smakebuf_r+0x18>
 8004894:	08004625 	.word	0x08004625

08004898 <_free_r>:
 8004898:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800489a:	2900      	cmp	r1, #0
 800489c:	d044      	beq.n	8004928 <_free_r+0x90>
 800489e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80048a2:	9001      	str	r0, [sp, #4]
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	f1a1 0404 	sub.w	r4, r1, #4
 80048aa:	bfb8      	it	lt
 80048ac:	18e4      	addlt	r4, r4, r3
 80048ae:	f000 fc6b 	bl	8005188 <__malloc_lock>
 80048b2:	4a1e      	ldr	r2, [pc, #120]	; (800492c <_free_r+0x94>)
 80048b4:	9801      	ldr	r0, [sp, #4]
 80048b6:	6813      	ldr	r3, [r2, #0]
 80048b8:	b933      	cbnz	r3, 80048c8 <_free_r+0x30>
 80048ba:	6063      	str	r3, [r4, #4]
 80048bc:	6014      	str	r4, [r2, #0]
 80048be:	b003      	add	sp, #12
 80048c0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80048c4:	f000 bc66 	b.w	8005194 <__malloc_unlock>
 80048c8:	42a3      	cmp	r3, r4
 80048ca:	d908      	bls.n	80048de <_free_r+0x46>
 80048cc:	6825      	ldr	r5, [r4, #0]
 80048ce:	1961      	adds	r1, r4, r5
 80048d0:	428b      	cmp	r3, r1
 80048d2:	bf01      	itttt	eq
 80048d4:	6819      	ldreq	r1, [r3, #0]
 80048d6:	685b      	ldreq	r3, [r3, #4]
 80048d8:	1949      	addeq	r1, r1, r5
 80048da:	6021      	streq	r1, [r4, #0]
 80048dc:	e7ed      	b.n	80048ba <_free_r+0x22>
 80048de:	461a      	mov	r2, r3
 80048e0:	685b      	ldr	r3, [r3, #4]
 80048e2:	b10b      	cbz	r3, 80048e8 <_free_r+0x50>
 80048e4:	42a3      	cmp	r3, r4
 80048e6:	d9fa      	bls.n	80048de <_free_r+0x46>
 80048e8:	6811      	ldr	r1, [r2, #0]
 80048ea:	1855      	adds	r5, r2, r1
 80048ec:	42a5      	cmp	r5, r4
 80048ee:	d10b      	bne.n	8004908 <_free_r+0x70>
 80048f0:	6824      	ldr	r4, [r4, #0]
 80048f2:	4421      	add	r1, r4
 80048f4:	1854      	adds	r4, r2, r1
 80048f6:	42a3      	cmp	r3, r4
 80048f8:	6011      	str	r1, [r2, #0]
 80048fa:	d1e0      	bne.n	80048be <_free_r+0x26>
 80048fc:	681c      	ldr	r4, [r3, #0]
 80048fe:	685b      	ldr	r3, [r3, #4]
 8004900:	6053      	str	r3, [r2, #4]
 8004902:	4421      	add	r1, r4
 8004904:	6011      	str	r1, [r2, #0]
 8004906:	e7da      	b.n	80048be <_free_r+0x26>
 8004908:	d902      	bls.n	8004910 <_free_r+0x78>
 800490a:	230c      	movs	r3, #12
 800490c:	6003      	str	r3, [r0, #0]
 800490e:	e7d6      	b.n	80048be <_free_r+0x26>
 8004910:	6825      	ldr	r5, [r4, #0]
 8004912:	1961      	adds	r1, r4, r5
 8004914:	428b      	cmp	r3, r1
 8004916:	bf04      	itt	eq
 8004918:	6819      	ldreq	r1, [r3, #0]
 800491a:	685b      	ldreq	r3, [r3, #4]
 800491c:	6063      	str	r3, [r4, #4]
 800491e:	bf04      	itt	eq
 8004920:	1949      	addeq	r1, r1, r5
 8004922:	6021      	streq	r1, [r4, #0]
 8004924:	6054      	str	r4, [r2, #4]
 8004926:	e7ca      	b.n	80048be <_free_r+0x26>
 8004928:	b003      	add	sp, #12
 800492a:	bd30      	pop	{r4, r5, pc}
 800492c:	20000390 	.word	0x20000390

08004930 <sbrk_aligned>:
 8004930:	b570      	push	{r4, r5, r6, lr}
 8004932:	4e0e      	ldr	r6, [pc, #56]	; (800496c <sbrk_aligned+0x3c>)
 8004934:	460c      	mov	r4, r1
 8004936:	6831      	ldr	r1, [r6, #0]
 8004938:	4605      	mov	r5, r0
 800493a:	b911      	cbnz	r1, 8004942 <sbrk_aligned+0x12>
 800493c:	f000 fb7a 	bl	8005034 <_sbrk_r>
 8004940:	6030      	str	r0, [r6, #0]
 8004942:	4621      	mov	r1, r4
 8004944:	4628      	mov	r0, r5
 8004946:	f000 fb75 	bl	8005034 <_sbrk_r>
 800494a:	1c43      	adds	r3, r0, #1
 800494c:	d00a      	beq.n	8004964 <sbrk_aligned+0x34>
 800494e:	1cc4      	adds	r4, r0, #3
 8004950:	f024 0403 	bic.w	r4, r4, #3
 8004954:	42a0      	cmp	r0, r4
 8004956:	d007      	beq.n	8004968 <sbrk_aligned+0x38>
 8004958:	1a21      	subs	r1, r4, r0
 800495a:	4628      	mov	r0, r5
 800495c:	f000 fb6a 	bl	8005034 <_sbrk_r>
 8004960:	3001      	adds	r0, #1
 8004962:	d101      	bne.n	8004968 <sbrk_aligned+0x38>
 8004964:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8004968:	4620      	mov	r0, r4
 800496a:	bd70      	pop	{r4, r5, r6, pc}
 800496c:	20000394 	.word	0x20000394

08004970 <_malloc_r>:
 8004970:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004974:	1ccd      	adds	r5, r1, #3
 8004976:	f025 0503 	bic.w	r5, r5, #3
 800497a:	3508      	adds	r5, #8
 800497c:	2d0c      	cmp	r5, #12
 800497e:	bf38      	it	cc
 8004980:	250c      	movcc	r5, #12
 8004982:	2d00      	cmp	r5, #0
 8004984:	4607      	mov	r7, r0
 8004986:	db01      	blt.n	800498c <_malloc_r+0x1c>
 8004988:	42a9      	cmp	r1, r5
 800498a:	d905      	bls.n	8004998 <_malloc_r+0x28>
 800498c:	230c      	movs	r3, #12
 800498e:	603b      	str	r3, [r7, #0]
 8004990:	2600      	movs	r6, #0
 8004992:	4630      	mov	r0, r6
 8004994:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004998:	4e2e      	ldr	r6, [pc, #184]	; (8004a54 <_malloc_r+0xe4>)
 800499a:	f000 fbf5 	bl	8005188 <__malloc_lock>
 800499e:	6833      	ldr	r3, [r6, #0]
 80049a0:	461c      	mov	r4, r3
 80049a2:	bb34      	cbnz	r4, 80049f2 <_malloc_r+0x82>
 80049a4:	4629      	mov	r1, r5
 80049a6:	4638      	mov	r0, r7
 80049a8:	f7ff ffc2 	bl	8004930 <sbrk_aligned>
 80049ac:	1c43      	adds	r3, r0, #1
 80049ae:	4604      	mov	r4, r0
 80049b0:	d14d      	bne.n	8004a4e <_malloc_r+0xde>
 80049b2:	6834      	ldr	r4, [r6, #0]
 80049b4:	4626      	mov	r6, r4
 80049b6:	2e00      	cmp	r6, #0
 80049b8:	d140      	bne.n	8004a3c <_malloc_r+0xcc>
 80049ba:	6823      	ldr	r3, [r4, #0]
 80049bc:	4631      	mov	r1, r6
 80049be:	4638      	mov	r0, r7
 80049c0:	eb04 0803 	add.w	r8, r4, r3
 80049c4:	f000 fb36 	bl	8005034 <_sbrk_r>
 80049c8:	4580      	cmp	r8, r0
 80049ca:	d13a      	bne.n	8004a42 <_malloc_r+0xd2>
 80049cc:	6821      	ldr	r1, [r4, #0]
 80049ce:	3503      	adds	r5, #3
 80049d0:	1a6d      	subs	r5, r5, r1
 80049d2:	f025 0503 	bic.w	r5, r5, #3
 80049d6:	3508      	adds	r5, #8
 80049d8:	2d0c      	cmp	r5, #12
 80049da:	bf38      	it	cc
 80049dc:	250c      	movcc	r5, #12
 80049de:	4629      	mov	r1, r5
 80049e0:	4638      	mov	r0, r7
 80049e2:	f7ff ffa5 	bl	8004930 <sbrk_aligned>
 80049e6:	3001      	adds	r0, #1
 80049e8:	d02b      	beq.n	8004a42 <_malloc_r+0xd2>
 80049ea:	6823      	ldr	r3, [r4, #0]
 80049ec:	442b      	add	r3, r5
 80049ee:	6023      	str	r3, [r4, #0]
 80049f0:	e00e      	b.n	8004a10 <_malloc_r+0xa0>
 80049f2:	6822      	ldr	r2, [r4, #0]
 80049f4:	1b52      	subs	r2, r2, r5
 80049f6:	d41e      	bmi.n	8004a36 <_malloc_r+0xc6>
 80049f8:	2a0b      	cmp	r2, #11
 80049fa:	d916      	bls.n	8004a2a <_malloc_r+0xba>
 80049fc:	1961      	adds	r1, r4, r5
 80049fe:	42a3      	cmp	r3, r4
 8004a00:	6025      	str	r5, [r4, #0]
 8004a02:	bf18      	it	ne
 8004a04:	6059      	strne	r1, [r3, #4]
 8004a06:	6863      	ldr	r3, [r4, #4]
 8004a08:	bf08      	it	eq
 8004a0a:	6031      	streq	r1, [r6, #0]
 8004a0c:	5162      	str	r2, [r4, r5]
 8004a0e:	604b      	str	r3, [r1, #4]
 8004a10:	4638      	mov	r0, r7
 8004a12:	f104 060b 	add.w	r6, r4, #11
 8004a16:	f000 fbbd 	bl	8005194 <__malloc_unlock>
 8004a1a:	f026 0607 	bic.w	r6, r6, #7
 8004a1e:	1d23      	adds	r3, r4, #4
 8004a20:	1af2      	subs	r2, r6, r3
 8004a22:	d0b6      	beq.n	8004992 <_malloc_r+0x22>
 8004a24:	1b9b      	subs	r3, r3, r6
 8004a26:	50a3      	str	r3, [r4, r2]
 8004a28:	e7b3      	b.n	8004992 <_malloc_r+0x22>
 8004a2a:	6862      	ldr	r2, [r4, #4]
 8004a2c:	42a3      	cmp	r3, r4
 8004a2e:	bf0c      	ite	eq
 8004a30:	6032      	streq	r2, [r6, #0]
 8004a32:	605a      	strne	r2, [r3, #4]
 8004a34:	e7ec      	b.n	8004a10 <_malloc_r+0xa0>
 8004a36:	4623      	mov	r3, r4
 8004a38:	6864      	ldr	r4, [r4, #4]
 8004a3a:	e7b2      	b.n	80049a2 <_malloc_r+0x32>
 8004a3c:	4634      	mov	r4, r6
 8004a3e:	6876      	ldr	r6, [r6, #4]
 8004a40:	e7b9      	b.n	80049b6 <_malloc_r+0x46>
 8004a42:	230c      	movs	r3, #12
 8004a44:	603b      	str	r3, [r7, #0]
 8004a46:	4638      	mov	r0, r7
 8004a48:	f000 fba4 	bl	8005194 <__malloc_unlock>
 8004a4c:	e7a1      	b.n	8004992 <_malloc_r+0x22>
 8004a4e:	6025      	str	r5, [r4, #0]
 8004a50:	e7de      	b.n	8004a10 <_malloc_r+0xa0>
 8004a52:	bf00      	nop
 8004a54:	20000390 	.word	0x20000390

08004a58 <__sfputc_r>:
 8004a58:	6893      	ldr	r3, [r2, #8]
 8004a5a:	3b01      	subs	r3, #1
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	b410      	push	{r4}
 8004a60:	6093      	str	r3, [r2, #8]
 8004a62:	da08      	bge.n	8004a76 <__sfputc_r+0x1e>
 8004a64:	6994      	ldr	r4, [r2, #24]
 8004a66:	42a3      	cmp	r3, r4
 8004a68:	db01      	blt.n	8004a6e <__sfputc_r+0x16>
 8004a6a:	290a      	cmp	r1, #10
 8004a6c:	d103      	bne.n	8004a76 <__sfputc_r+0x1e>
 8004a6e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004a72:	f7ff bc31 	b.w	80042d8 <__swbuf_r>
 8004a76:	6813      	ldr	r3, [r2, #0]
 8004a78:	1c58      	adds	r0, r3, #1
 8004a7a:	6010      	str	r0, [r2, #0]
 8004a7c:	7019      	strb	r1, [r3, #0]
 8004a7e:	4608      	mov	r0, r1
 8004a80:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004a84:	4770      	bx	lr

08004a86 <__sfputs_r>:
 8004a86:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a88:	4606      	mov	r6, r0
 8004a8a:	460f      	mov	r7, r1
 8004a8c:	4614      	mov	r4, r2
 8004a8e:	18d5      	adds	r5, r2, r3
 8004a90:	42ac      	cmp	r4, r5
 8004a92:	d101      	bne.n	8004a98 <__sfputs_r+0x12>
 8004a94:	2000      	movs	r0, #0
 8004a96:	e007      	b.n	8004aa8 <__sfputs_r+0x22>
 8004a98:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004a9c:	463a      	mov	r2, r7
 8004a9e:	4630      	mov	r0, r6
 8004aa0:	f7ff ffda 	bl	8004a58 <__sfputc_r>
 8004aa4:	1c43      	adds	r3, r0, #1
 8004aa6:	d1f3      	bne.n	8004a90 <__sfputs_r+0xa>
 8004aa8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004aac <_vfiprintf_r>:
 8004aac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004ab0:	460d      	mov	r5, r1
 8004ab2:	b09d      	sub	sp, #116	; 0x74
 8004ab4:	4614      	mov	r4, r2
 8004ab6:	4698      	mov	r8, r3
 8004ab8:	4606      	mov	r6, r0
 8004aba:	b118      	cbz	r0, 8004ac4 <_vfiprintf_r+0x18>
 8004abc:	6983      	ldr	r3, [r0, #24]
 8004abe:	b90b      	cbnz	r3, 8004ac4 <_vfiprintf_r+0x18>
 8004ac0:	f7ff fde4 	bl	800468c <__sinit>
 8004ac4:	4b89      	ldr	r3, [pc, #548]	; (8004cec <_vfiprintf_r+0x240>)
 8004ac6:	429d      	cmp	r5, r3
 8004ac8:	d11b      	bne.n	8004b02 <_vfiprintf_r+0x56>
 8004aca:	6875      	ldr	r5, [r6, #4]
 8004acc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004ace:	07d9      	lsls	r1, r3, #31
 8004ad0:	d405      	bmi.n	8004ade <_vfiprintf_r+0x32>
 8004ad2:	89ab      	ldrh	r3, [r5, #12]
 8004ad4:	059a      	lsls	r2, r3, #22
 8004ad6:	d402      	bmi.n	8004ade <_vfiprintf_r+0x32>
 8004ad8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004ada:	f7ff fe75 	bl	80047c8 <__retarget_lock_acquire_recursive>
 8004ade:	89ab      	ldrh	r3, [r5, #12]
 8004ae0:	071b      	lsls	r3, r3, #28
 8004ae2:	d501      	bpl.n	8004ae8 <_vfiprintf_r+0x3c>
 8004ae4:	692b      	ldr	r3, [r5, #16]
 8004ae6:	b9eb      	cbnz	r3, 8004b24 <_vfiprintf_r+0x78>
 8004ae8:	4629      	mov	r1, r5
 8004aea:	4630      	mov	r0, r6
 8004aec:	f7ff fc46 	bl	800437c <__swsetup_r>
 8004af0:	b1c0      	cbz	r0, 8004b24 <_vfiprintf_r+0x78>
 8004af2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004af4:	07dc      	lsls	r4, r3, #31
 8004af6:	d50e      	bpl.n	8004b16 <_vfiprintf_r+0x6a>
 8004af8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004afc:	b01d      	add	sp, #116	; 0x74
 8004afe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004b02:	4b7b      	ldr	r3, [pc, #492]	; (8004cf0 <_vfiprintf_r+0x244>)
 8004b04:	429d      	cmp	r5, r3
 8004b06:	d101      	bne.n	8004b0c <_vfiprintf_r+0x60>
 8004b08:	68b5      	ldr	r5, [r6, #8]
 8004b0a:	e7df      	b.n	8004acc <_vfiprintf_r+0x20>
 8004b0c:	4b79      	ldr	r3, [pc, #484]	; (8004cf4 <_vfiprintf_r+0x248>)
 8004b0e:	429d      	cmp	r5, r3
 8004b10:	bf08      	it	eq
 8004b12:	68f5      	ldreq	r5, [r6, #12]
 8004b14:	e7da      	b.n	8004acc <_vfiprintf_r+0x20>
 8004b16:	89ab      	ldrh	r3, [r5, #12]
 8004b18:	0598      	lsls	r0, r3, #22
 8004b1a:	d4ed      	bmi.n	8004af8 <_vfiprintf_r+0x4c>
 8004b1c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004b1e:	f7ff fe54 	bl	80047ca <__retarget_lock_release_recursive>
 8004b22:	e7e9      	b.n	8004af8 <_vfiprintf_r+0x4c>
 8004b24:	2300      	movs	r3, #0
 8004b26:	9309      	str	r3, [sp, #36]	; 0x24
 8004b28:	2320      	movs	r3, #32
 8004b2a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004b2e:	f8cd 800c 	str.w	r8, [sp, #12]
 8004b32:	2330      	movs	r3, #48	; 0x30
 8004b34:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8004cf8 <_vfiprintf_r+0x24c>
 8004b38:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004b3c:	f04f 0901 	mov.w	r9, #1
 8004b40:	4623      	mov	r3, r4
 8004b42:	469a      	mov	sl, r3
 8004b44:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004b48:	b10a      	cbz	r2, 8004b4e <_vfiprintf_r+0xa2>
 8004b4a:	2a25      	cmp	r2, #37	; 0x25
 8004b4c:	d1f9      	bne.n	8004b42 <_vfiprintf_r+0x96>
 8004b4e:	ebba 0b04 	subs.w	fp, sl, r4
 8004b52:	d00b      	beq.n	8004b6c <_vfiprintf_r+0xc0>
 8004b54:	465b      	mov	r3, fp
 8004b56:	4622      	mov	r2, r4
 8004b58:	4629      	mov	r1, r5
 8004b5a:	4630      	mov	r0, r6
 8004b5c:	f7ff ff93 	bl	8004a86 <__sfputs_r>
 8004b60:	3001      	adds	r0, #1
 8004b62:	f000 80aa 	beq.w	8004cba <_vfiprintf_r+0x20e>
 8004b66:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004b68:	445a      	add	r2, fp
 8004b6a:	9209      	str	r2, [sp, #36]	; 0x24
 8004b6c:	f89a 3000 	ldrb.w	r3, [sl]
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	f000 80a2 	beq.w	8004cba <_vfiprintf_r+0x20e>
 8004b76:	2300      	movs	r3, #0
 8004b78:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004b7c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004b80:	f10a 0a01 	add.w	sl, sl, #1
 8004b84:	9304      	str	r3, [sp, #16]
 8004b86:	9307      	str	r3, [sp, #28]
 8004b88:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004b8c:	931a      	str	r3, [sp, #104]	; 0x68
 8004b8e:	4654      	mov	r4, sl
 8004b90:	2205      	movs	r2, #5
 8004b92:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004b96:	4858      	ldr	r0, [pc, #352]	; (8004cf8 <_vfiprintf_r+0x24c>)
 8004b98:	f7fb fb42 	bl	8000220 <memchr>
 8004b9c:	9a04      	ldr	r2, [sp, #16]
 8004b9e:	b9d8      	cbnz	r0, 8004bd8 <_vfiprintf_r+0x12c>
 8004ba0:	06d1      	lsls	r1, r2, #27
 8004ba2:	bf44      	itt	mi
 8004ba4:	2320      	movmi	r3, #32
 8004ba6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004baa:	0713      	lsls	r3, r2, #28
 8004bac:	bf44      	itt	mi
 8004bae:	232b      	movmi	r3, #43	; 0x2b
 8004bb0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004bb4:	f89a 3000 	ldrb.w	r3, [sl]
 8004bb8:	2b2a      	cmp	r3, #42	; 0x2a
 8004bba:	d015      	beq.n	8004be8 <_vfiprintf_r+0x13c>
 8004bbc:	9a07      	ldr	r2, [sp, #28]
 8004bbe:	4654      	mov	r4, sl
 8004bc0:	2000      	movs	r0, #0
 8004bc2:	f04f 0c0a 	mov.w	ip, #10
 8004bc6:	4621      	mov	r1, r4
 8004bc8:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004bcc:	3b30      	subs	r3, #48	; 0x30
 8004bce:	2b09      	cmp	r3, #9
 8004bd0:	d94e      	bls.n	8004c70 <_vfiprintf_r+0x1c4>
 8004bd2:	b1b0      	cbz	r0, 8004c02 <_vfiprintf_r+0x156>
 8004bd4:	9207      	str	r2, [sp, #28]
 8004bd6:	e014      	b.n	8004c02 <_vfiprintf_r+0x156>
 8004bd8:	eba0 0308 	sub.w	r3, r0, r8
 8004bdc:	fa09 f303 	lsl.w	r3, r9, r3
 8004be0:	4313      	orrs	r3, r2
 8004be2:	9304      	str	r3, [sp, #16]
 8004be4:	46a2      	mov	sl, r4
 8004be6:	e7d2      	b.n	8004b8e <_vfiprintf_r+0xe2>
 8004be8:	9b03      	ldr	r3, [sp, #12]
 8004bea:	1d19      	adds	r1, r3, #4
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	9103      	str	r1, [sp, #12]
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	bfbb      	ittet	lt
 8004bf4:	425b      	neglt	r3, r3
 8004bf6:	f042 0202 	orrlt.w	r2, r2, #2
 8004bfa:	9307      	strge	r3, [sp, #28]
 8004bfc:	9307      	strlt	r3, [sp, #28]
 8004bfe:	bfb8      	it	lt
 8004c00:	9204      	strlt	r2, [sp, #16]
 8004c02:	7823      	ldrb	r3, [r4, #0]
 8004c04:	2b2e      	cmp	r3, #46	; 0x2e
 8004c06:	d10c      	bne.n	8004c22 <_vfiprintf_r+0x176>
 8004c08:	7863      	ldrb	r3, [r4, #1]
 8004c0a:	2b2a      	cmp	r3, #42	; 0x2a
 8004c0c:	d135      	bne.n	8004c7a <_vfiprintf_r+0x1ce>
 8004c0e:	9b03      	ldr	r3, [sp, #12]
 8004c10:	1d1a      	adds	r2, r3, #4
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	9203      	str	r2, [sp, #12]
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	bfb8      	it	lt
 8004c1a:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8004c1e:	3402      	adds	r4, #2
 8004c20:	9305      	str	r3, [sp, #20]
 8004c22:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8004d08 <_vfiprintf_r+0x25c>
 8004c26:	7821      	ldrb	r1, [r4, #0]
 8004c28:	2203      	movs	r2, #3
 8004c2a:	4650      	mov	r0, sl
 8004c2c:	f7fb faf8 	bl	8000220 <memchr>
 8004c30:	b140      	cbz	r0, 8004c44 <_vfiprintf_r+0x198>
 8004c32:	2340      	movs	r3, #64	; 0x40
 8004c34:	eba0 000a 	sub.w	r0, r0, sl
 8004c38:	fa03 f000 	lsl.w	r0, r3, r0
 8004c3c:	9b04      	ldr	r3, [sp, #16]
 8004c3e:	4303      	orrs	r3, r0
 8004c40:	3401      	adds	r4, #1
 8004c42:	9304      	str	r3, [sp, #16]
 8004c44:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004c48:	482c      	ldr	r0, [pc, #176]	; (8004cfc <_vfiprintf_r+0x250>)
 8004c4a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004c4e:	2206      	movs	r2, #6
 8004c50:	f7fb fae6 	bl	8000220 <memchr>
 8004c54:	2800      	cmp	r0, #0
 8004c56:	d03f      	beq.n	8004cd8 <_vfiprintf_r+0x22c>
 8004c58:	4b29      	ldr	r3, [pc, #164]	; (8004d00 <_vfiprintf_r+0x254>)
 8004c5a:	bb1b      	cbnz	r3, 8004ca4 <_vfiprintf_r+0x1f8>
 8004c5c:	9b03      	ldr	r3, [sp, #12]
 8004c5e:	3307      	adds	r3, #7
 8004c60:	f023 0307 	bic.w	r3, r3, #7
 8004c64:	3308      	adds	r3, #8
 8004c66:	9303      	str	r3, [sp, #12]
 8004c68:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004c6a:	443b      	add	r3, r7
 8004c6c:	9309      	str	r3, [sp, #36]	; 0x24
 8004c6e:	e767      	b.n	8004b40 <_vfiprintf_r+0x94>
 8004c70:	fb0c 3202 	mla	r2, ip, r2, r3
 8004c74:	460c      	mov	r4, r1
 8004c76:	2001      	movs	r0, #1
 8004c78:	e7a5      	b.n	8004bc6 <_vfiprintf_r+0x11a>
 8004c7a:	2300      	movs	r3, #0
 8004c7c:	3401      	adds	r4, #1
 8004c7e:	9305      	str	r3, [sp, #20]
 8004c80:	4619      	mov	r1, r3
 8004c82:	f04f 0c0a 	mov.w	ip, #10
 8004c86:	4620      	mov	r0, r4
 8004c88:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004c8c:	3a30      	subs	r2, #48	; 0x30
 8004c8e:	2a09      	cmp	r2, #9
 8004c90:	d903      	bls.n	8004c9a <_vfiprintf_r+0x1ee>
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d0c5      	beq.n	8004c22 <_vfiprintf_r+0x176>
 8004c96:	9105      	str	r1, [sp, #20]
 8004c98:	e7c3      	b.n	8004c22 <_vfiprintf_r+0x176>
 8004c9a:	fb0c 2101 	mla	r1, ip, r1, r2
 8004c9e:	4604      	mov	r4, r0
 8004ca0:	2301      	movs	r3, #1
 8004ca2:	e7f0      	b.n	8004c86 <_vfiprintf_r+0x1da>
 8004ca4:	ab03      	add	r3, sp, #12
 8004ca6:	9300      	str	r3, [sp, #0]
 8004ca8:	462a      	mov	r2, r5
 8004caa:	4b16      	ldr	r3, [pc, #88]	; (8004d04 <_vfiprintf_r+0x258>)
 8004cac:	a904      	add	r1, sp, #16
 8004cae:	4630      	mov	r0, r6
 8004cb0:	f3af 8000 	nop.w
 8004cb4:	4607      	mov	r7, r0
 8004cb6:	1c78      	adds	r0, r7, #1
 8004cb8:	d1d6      	bne.n	8004c68 <_vfiprintf_r+0x1bc>
 8004cba:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004cbc:	07d9      	lsls	r1, r3, #31
 8004cbe:	d405      	bmi.n	8004ccc <_vfiprintf_r+0x220>
 8004cc0:	89ab      	ldrh	r3, [r5, #12]
 8004cc2:	059a      	lsls	r2, r3, #22
 8004cc4:	d402      	bmi.n	8004ccc <_vfiprintf_r+0x220>
 8004cc6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004cc8:	f7ff fd7f 	bl	80047ca <__retarget_lock_release_recursive>
 8004ccc:	89ab      	ldrh	r3, [r5, #12]
 8004cce:	065b      	lsls	r3, r3, #25
 8004cd0:	f53f af12 	bmi.w	8004af8 <_vfiprintf_r+0x4c>
 8004cd4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004cd6:	e711      	b.n	8004afc <_vfiprintf_r+0x50>
 8004cd8:	ab03      	add	r3, sp, #12
 8004cda:	9300      	str	r3, [sp, #0]
 8004cdc:	462a      	mov	r2, r5
 8004cde:	4b09      	ldr	r3, [pc, #36]	; (8004d04 <_vfiprintf_r+0x258>)
 8004ce0:	a904      	add	r1, sp, #16
 8004ce2:	4630      	mov	r0, r6
 8004ce4:	f000 f880 	bl	8004de8 <_printf_i>
 8004ce8:	e7e4      	b.n	8004cb4 <_vfiprintf_r+0x208>
 8004cea:	bf00      	nop
 8004cec:	080052bc 	.word	0x080052bc
 8004cf0:	080052dc 	.word	0x080052dc
 8004cf4:	0800529c 	.word	0x0800529c
 8004cf8:	080052fc 	.word	0x080052fc
 8004cfc:	08005306 	.word	0x08005306
 8004d00:	00000000 	.word	0x00000000
 8004d04:	08004a87 	.word	0x08004a87
 8004d08:	08005302 	.word	0x08005302

08004d0c <_printf_common>:
 8004d0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004d10:	4616      	mov	r6, r2
 8004d12:	4699      	mov	r9, r3
 8004d14:	688a      	ldr	r2, [r1, #8]
 8004d16:	690b      	ldr	r3, [r1, #16]
 8004d18:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004d1c:	4293      	cmp	r3, r2
 8004d1e:	bfb8      	it	lt
 8004d20:	4613      	movlt	r3, r2
 8004d22:	6033      	str	r3, [r6, #0]
 8004d24:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004d28:	4607      	mov	r7, r0
 8004d2a:	460c      	mov	r4, r1
 8004d2c:	b10a      	cbz	r2, 8004d32 <_printf_common+0x26>
 8004d2e:	3301      	adds	r3, #1
 8004d30:	6033      	str	r3, [r6, #0]
 8004d32:	6823      	ldr	r3, [r4, #0]
 8004d34:	0699      	lsls	r1, r3, #26
 8004d36:	bf42      	ittt	mi
 8004d38:	6833      	ldrmi	r3, [r6, #0]
 8004d3a:	3302      	addmi	r3, #2
 8004d3c:	6033      	strmi	r3, [r6, #0]
 8004d3e:	6825      	ldr	r5, [r4, #0]
 8004d40:	f015 0506 	ands.w	r5, r5, #6
 8004d44:	d106      	bne.n	8004d54 <_printf_common+0x48>
 8004d46:	f104 0a19 	add.w	sl, r4, #25
 8004d4a:	68e3      	ldr	r3, [r4, #12]
 8004d4c:	6832      	ldr	r2, [r6, #0]
 8004d4e:	1a9b      	subs	r3, r3, r2
 8004d50:	42ab      	cmp	r3, r5
 8004d52:	dc26      	bgt.n	8004da2 <_printf_common+0x96>
 8004d54:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004d58:	1e13      	subs	r3, r2, #0
 8004d5a:	6822      	ldr	r2, [r4, #0]
 8004d5c:	bf18      	it	ne
 8004d5e:	2301      	movne	r3, #1
 8004d60:	0692      	lsls	r2, r2, #26
 8004d62:	d42b      	bmi.n	8004dbc <_printf_common+0xb0>
 8004d64:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004d68:	4649      	mov	r1, r9
 8004d6a:	4638      	mov	r0, r7
 8004d6c:	47c0      	blx	r8
 8004d6e:	3001      	adds	r0, #1
 8004d70:	d01e      	beq.n	8004db0 <_printf_common+0xa4>
 8004d72:	6823      	ldr	r3, [r4, #0]
 8004d74:	68e5      	ldr	r5, [r4, #12]
 8004d76:	6832      	ldr	r2, [r6, #0]
 8004d78:	f003 0306 	and.w	r3, r3, #6
 8004d7c:	2b04      	cmp	r3, #4
 8004d7e:	bf08      	it	eq
 8004d80:	1aad      	subeq	r5, r5, r2
 8004d82:	68a3      	ldr	r3, [r4, #8]
 8004d84:	6922      	ldr	r2, [r4, #16]
 8004d86:	bf0c      	ite	eq
 8004d88:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004d8c:	2500      	movne	r5, #0
 8004d8e:	4293      	cmp	r3, r2
 8004d90:	bfc4      	itt	gt
 8004d92:	1a9b      	subgt	r3, r3, r2
 8004d94:	18ed      	addgt	r5, r5, r3
 8004d96:	2600      	movs	r6, #0
 8004d98:	341a      	adds	r4, #26
 8004d9a:	42b5      	cmp	r5, r6
 8004d9c:	d11a      	bne.n	8004dd4 <_printf_common+0xc8>
 8004d9e:	2000      	movs	r0, #0
 8004da0:	e008      	b.n	8004db4 <_printf_common+0xa8>
 8004da2:	2301      	movs	r3, #1
 8004da4:	4652      	mov	r2, sl
 8004da6:	4649      	mov	r1, r9
 8004da8:	4638      	mov	r0, r7
 8004daa:	47c0      	blx	r8
 8004dac:	3001      	adds	r0, #1
 8004dae:	d103      	bne.n	8004db8 <_printf_common+0xac>
 8004db0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004db4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004db8:	3501      	adds	r5, #1
 8004dba:	e7c6      	b.n	8004d4a <_printf_common+0x3e>
 8004dbc:	18e1      	adds	r1, r4, r3
 8004dbe:	1c5a      	adds	r2, r3, #1
 8004dc0:	2030      	movs	r0, #48	; 0x30
 8004dc2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004dc6:	4422      	add	r2, r4
 8004dc8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004dcc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004dd0:	3302      	adds	r3, #2
 8004dd2:	e7c7      	b.n	8004d64 <_printf_common+0x58>
 8004dd4:	2301      	movs	r3, #1
 8004dd6:	4622      	mov	r2, r4
 8004dd8:	4649      	mov	r1, r9
 8004dda:	4638      	mov	r0, r7
 8004ddc:	47c0      	blx	r8
 8004dde:	3001      	adds	r0, #1
 8004de0:	d0e6      	beq.n	8004db0 <_printf_common+0xa4>
 8004de2:	3601      	adds	r6, #1
 8004de4:	e7d9      	b.n	8004d9a <_printf_common+0x8e>
	...

08004de8 <_printf_i>:
 8004de8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004dec:	7e0f      	ldrb	r7, [r1, #24]
 8004dee:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004df0:	2f78      	cmp	r7, #120	; 0x78
 8004df2:	4691      	mov	r9, r2
 8004df4:	4680      	mov	r8, r0
 8004df6:	460c      	mov	r4, r1
 8004df8:	469a      	mov	sl, r3
 8004dfa:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004dfe:	d807      	bhi.n	8004e10 <_printf_i+0x28>
 8004e00:	2f62      	cmp	r7, #98	; 0x62
 8004e02:	d80a      	bhi.n	8004e1a <_printf_i+0x32>
 8004e04:	2f00      	cmp	r7, #0
 8004e06:	f000 80d8 	beq.w	8004fba <_printf_i+0x1d2>
 8004e0a:	2f58      	cmp	r7, #88	; 0x58
 8004e0c:	f000 80a3 	beq.w	8004f56 <_printf_i+0x16e>
 8004e10:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004e14:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004e18:	e03a      	b.n	8004e90 <_printf_i+0xa8>
 8004e1a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004e1e:	2b15      	cmp	r3, #21
 8004e20:	d8f6      	bhi.n	8004e10 <_printf_i+0x28>
 8004e22:	a101      	add	r1, pc, #4	; (adr r1, 8004e28 <_printf_i+0x40>)
 8004e24:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004e28:	08004e81 	.word	0x08004e81
 8004e2c:	08004e95 	.word	0x08004e95
 8004e30:	08004e11 	.word	0x08004e11
 8004e34:	08004e11 	.word	0x08004e11
 8004e38:	08004e11 	.word	0x08004e11
 8004e3c:	08004e11 	.word	0x08004e11
 8004e40:	08004e95 	.word	0x08004e95
 8004e44:	08004e11 	.word	0x08004e11
 8004e48:	08004e11 	.word	0x08004e11
 8004e4c:	08004e11 	.word	0x08004e11
 8004e50:	08004e11 	.word	0x08004e11
 8004e54:	08004fa1 	.word	0x08004fa1
 8004e58:	08004ec5 	.word	0x08004ec5
 8004e5c:	08004f83 	.word	0x08004f83
 8004e60:	08004e11 	.word	0x08004e11
 8004e64:	08004e11 	.word	0x08004e11
 8004e68:	08004fc3 	.word	0x08004fc3
 8004e6c:	08004e11 	.word	0x08004e11
 8004e70:	08004ec5 	.word	0x08004ec5
 8004e74:	08004e11 	.word	0x08004e11
 8004e78:	08004e11 	.word	0x08004e11
 8004e7c:	08004f8b 	.word	0x08004f8b
 8004e80:	682b      	ldr	r3, [r5, #0]
 8004e82:	1d1a      	adds	r2, r3, #4
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	602a      	str	r2, [r5, #0]
 8004e88:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004e8c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004e90:	2301      	movs	r3, #1
 8004e92:	e0a3      	b.n	8004fdc <_printf_i+0x1f4>
 8004e94:	6820      	ldr	r0, [r4, #0]
 8004e96:	6829      	ldr	r1, [r5, #0]
 8004e98:	0606      	lsls	r6, r0, #24
 8004e9a:	f101 0304 	add.w	r3, r1, #4
 8004e9e:	d50a      	bpl.n	8004eb6 <_printf_i+0xce>
 8004ea0:	680e      	ldr	r6, [r1, #0]
 8004ea2:	602b      	str	r3, [r5, #0]
 8004ea4:	2e00      	cmp	r6, #0
 8004ea6:	da03      	bge.n	8004eb0 <_printf_i+0xc8>
 8004ea8:	232d      	movs	r3, #45	; 0x2d
 8004eaa:	4276      	negs	r6, r6
 8004eac:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004eb0:	485e      	ldr	r0, [pc, #376]	; (800502c <_printf_i+0x244>)
 8004eb2:	230a      	movs	r3, #10
 8004eb4:	e019      	b.n	8004eea <_printf_i+0x102>
 8004eb6:	680e      	ldr	r6, [r1, #0]
 8004eb8:	602b      	str	r3, [r5, #0]
 8004eba:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004ebe:	bf18      	it	ne
 8004ec0:	b236      	sxthne	r6, r6
 8004ec2:	e7ef      	b.n	8004ea4 <_printf_i+0xbc>
 8004ec4:	682b      	ldr	r3, [r5, #0]
 8004ec6:	6820      	ldr	r0, [r4, #0]
 8004ec8:	1d19      	adds	r1, r3, #4
 8004eca:	6029      	str	r1, [r5, #0]
 8004ecc:	0601      	lsls	r1, r0, #24
 8004ece:	d501      	bpl.n	8004ed4 <_printf_i+0xec>
 8004ed0:	681e      	ldr	r6, [r3, #0]
 8004ed2:	e002      	b.n	8004eda <_printf_i+0xf2>
 8004ed4:	0646      	lsls	r6, r0, #25
 8004ed6:	d5fb      	bpl.n	8004ed0 <_printf_i+0xe8>
 8004ed8:	881e      	ldrh	r6, [r3, #0]
 8004eda:	4854      	ldr	r0, [pc, #336]	; (800502c <_printf_i+0x244>)
 8004edc:	2f6f      	cmp	r7, #111	; 0x6f
 8004ede:	bf0c      	ite	eq
 8004ee0:	2308      	moveq	r3, #8
 8004ee2:	230a      	movne	r3, #10
 8004ee4:	2100      	movs	r1, #0
 8004ee6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004eea:	6865      	ldr	r5, [r4, #4]
 8004eec:	60a5      	str	r5, [r4, #8]
 8004eee:	2d00      	cmp	r5, #0
 8004ef0:	bfa2      	ittt	ge
 8004ef2:	6821      	ldrge	r1, [r4, #0]
 8004ef4:	f021 0104 	bicge.w	r1, r1, #4
 8004ef8:	6021      	strge	r1, [r4, #0]
 8004efa:	b90e      	cbnz	r6, 8004f00 <_printf_i+0x118>
 8004efc:	2d00      	cmp	r5, #0
 8004efe:	d04d      	beq.n	8004f9c <_printf_i+0x1b4>
 8004f00:	4615      	mov	r5, r2
 8004f02:	fbb6 f1f3 	udiv	r1, r6, r3
 8004f06:	fb03 6711 	mls	r7, r3, r1, r6
 8004f0a:	5dc7      	ldrb	r7, [r0, r7]
 8004f0c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004f10:	4637      	mov	r7, r6
 8004f12:	42bb      	cmp	r3, r7
 8004f14:	460e      	mov	r6, r1
 8004f16:	d9f4      	bls.n	8004f02 <_printf_i+0x11a>
 8004f18:	2b08      	cmp	r3, #8
 8004f1a:	d10b      	bne.n	8004f34 <_printf_i+0x14c>
 8004f1c:	6823      	ldr	r3, [r4, #0]
 8004f1e:	07de      	lsls	r6, r3, #31
 8004f20:	d508      	bpl.n	8004f34 <_printf_i+0x14c>
 8004f22:	6923      	ldr	r3, [r4, #16]
 8004f24:	6861      	ldr	r1, [r4, #4]
 8004f26:	4299      	cmp	r1, r3
 8004f28:	bfde      	ittt	le
 8004f2a:	2330      	movle	r3, #48	; 0x30
 8004f2c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004f30:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8004f34:	1b52      	subs	r2, r2, r5
 8004f36:	6122      	str	r2, [r4, #16]
 8004f38:	f8cd a000 	str.w	sl, [sp]
 8004f3c:	464b      	mov	r3, r9
 8004f3e:	aa03      	add	r2, sp, #12
 8004f40:	4621      	mov	r1, r4
 8004f42:	4640      	mov	r0, r8
 8004f44:	f7ff fee2 	bl	8004d0c <_printf_common>
 8004f48:	3001      	adds	r0, #1
 8004f4a:	d14c      	bne.n	8004fe6 <_printf_i+0x1fe>
 8004f4c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004f50:	b004      	add	sp, #16
 8004f52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004f56:	4835      	ldr	r0, [pc, #212]	; (800502c <_printf_i+0x244>)
 8004f58:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8004f5c:	6829      	ldr	r1, [r5, #0]
 8004f5e:	6823      	ldr	r3, [r4, #0]
 8004f60:	f851 6b04 	ldr.w	r6, [r1], #4
 8004f64:	6029      	str	r1, [r5, #0]
 8004f66:	061d      	lsls	r5, r3, #24
 8004f68:	d514      	bpl.n	8004f94 <_printf_i+0x1ac>
 8004f6a:	07df      	lsls	r7, r3, #31
 8004f6c:	bf44      	itt	mi
 8004f6e:	f043 0320 	orrmi.w	r3, r3, #32
 8004f72:	6023      	strmi	r3, [r4, #0]
 8004f74:	b91e      	cbnz	r6, 8004f7e <_printf_i+0x196>
 8004f76:	6823      	ldr	r3, [r4, #0]
 8004f78:	f023 0320 	bic.w	r3, r3, #32
 8004f7c:	6023      	str	r3, [r4, #0]
 8004f7e:	2310      	movs	r3, #16
 8004f80:	e7b0      	b.n	8004ee4 <_printf_i+0xfc>
 8004f82:	6823      	ldr	r3, [r4, #0]
 8004f84:	f043 0320 	orr.w	r3, r3, #32
 8004f88:	6023      	str	r3, [r4, #0]
 8004f8a:	2378      	movs	r3, #120	; 0x78
 8004f8c:	4828      	ldr	r0, [pc, #160]	; (8005030 <_printf_i+0x248>)
 8004f8e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004f92:	e7e3      	b.n	8004f5c <_printf_i+0x174>
 8004f94:	0659      	lsls	r1, r3, #25
 8004f96:	bf48      	it	mi
 8004f98:	b2b6      	uxthmi	r6, r6
 8004f9a:	e7e6      	b.n	8004f6a <_printf_i+0x182>
 8004f9c:	4615      	mov	r5, r2
 8004f9e:	e7bb      	b.n	8004f18 <_printf_i+0x130>
 8004fa0:	682b      	ldr	r3, [r5, #0]
 8004fa2:	6826      	ldr	r6, [r4, #0]
 8004fa4:	6961      	ldr	r1, [r4, #20]
 8004fa6:	1d18      	adds	r0, r3, #4
 8004fa8:	6028      	str	r0, [r5, #0]
 8004faa:	0635      	lsls	r5, r6, #24
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	d501      	bpl.n	8004fb4 <_printf_i+0x1cc>
 8004fb0:	6019      	str	r1, [r3, #0]
 8004fb2:	e002      	b.n	8004fba <_printf_i+0x1d2>
 8004fb4:	0670      	lsls	r0, r6, #25
 8004fb6:	d5fb      	bpl.n	8004fb0 <_printf_i+0x1c8>
 8004fb8:	8019      	strh	r1, [r3, #0]
 8004fba:	2300      	movs	r3, #0
 8004fbc:	6123      	str	r3, [r4, #16]
 8004fbe:	4615      	mov	r5, r2
 8004fc0:	e7ba      	b.n	8004f38 <_printf_i+0x150>
 8004fc2:	682b      	ldr	r3, [r5, #0]
 8004fc4:	1d1a      	adds	r2, r3, #4
 8004fc6:	602a      	str	r2, [r5, #0]
 8004fc8:	681d      	ldr	r5, [r3, #0]
 8004fca:	6862      	ldr	r2, [r4, #4]
 8004fcc:	2100      	movs	r1, #0
 8004fce:	4628      	mov	r0, r5
 8004fd0:	f7fb f926 	bl	8000220 <memchr>
 8004fd4:	b108      	cbz	r0, 8004fda <_printf_i+0x1f2>
 8004fd6:	1b40      	subs	r0, r0, r5
 8004fd8:	6060      	str	r0, [r4, #4]
 8004fda:	6863      	ldr	r3, [r4, #4]
 8004fdc:	6123      	str	r3, [r4, #16]
 8004fde:	2300      	movs	r3, #0
 8004fe0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004fe4:	e7a8      	b.n	8004f38 <_printf_i+0x150>
 8004fe6:	6923      	ldr	r3, [r4, #16]
 8004fe8:	462a      	mov	r2, r5
 8004fea:	4649      	mov	r1, r9
 8004fec:	4640      	mov	r0, r8
 8004fee:	47d0      	blx	sl
 8004ff0:	3001      	adds	r0, #1
 8004ff2:	d0ab      	beq.n	8004f4c <_printf_i+0x164>
 8004ff4:	6823      	ldr	r3, [r4, #0]
 8004ff6:	079b      	lsls	r3, r3, #30
 8004ff8:	d413      	bmi.n	8005022 <_printf_i+0x23a>
 8004ffa:	68e0      	ldr	r0, [r4, #12]
 8004ffc:	9b03      	ldr	r3, [sp, #12]
 8004ffe:	4298      	cmp	r0, r3
 8005000:	bfb8      	it	lt
 8005002:	4618      	movlt	r0, r3
 8005004:	e7a4      	b.n	8004f50 <_printf_i+0x168>
 8005006:	2301      	movs	r3, #1
 8005008:	4632      	mov	r2, r6
 800500a:	4649      	mov	r1, r9
 800500c:	4640      	mov	r0, r8
 800500e:	47d0      	blx	sl
 8005010:	3001      	adds	r0, #1
 8005012:	d09b      	beq.n	8004f4c <_printf_i+0x164>
 8005014:	3501      	adds	r5, #1
 8005016:	68e3      	ldr	r3, [r4, #12]
 8005018:	9903      	ldr	r1, [sp, #12]
 800501a:	1a5b      	subs	r3, r3, r1
 800501c:	42ab      	cmp	r3, r5
 800501e:	dcf2      	bgt.n	8005006 <_printf_i+0x21e>
 8005020:	e7eb      	b.n	8004ffa <_printf_i+0x212>
 8005022:	2500      	movs	r5, #0
 8005024:	f104 0619 	add.w	r6, r4, #25
 8005028:	e7f5      	b.n	8005016 <_printf_i+0x22e>
 800502a:	bf00      	nop
 800502c:	0800530d 	.word	0x0800530d
 8005030:	0800531e 	.word	0x0800531e

08005034 <_sbrk_r>:
 8005034:	b538      	push	{r3, r4, r5, lr}
 8005036:	4d06      	ldr	r5, [pc, #24]	; (8005050 <_sbrk_r+0x1c>)
 8005038:	2300      	movs	r3, #0
 800503a:	4604      	mov	r4, r0
 800503c:	4608      	mov	r0, r1
 800503e:	602b      	str	r3, [r5, #0]
 8005040:	f7fc f81e 	bl	8001080 <_sbrk>
 8005044:	1c43      	adds	r3, r0, #1
 8005046:	d102      	bne.n	800504e <_sbrk_r+0x1a>
 8005048:	682b      	ldr	r3, [r5, #0]
 800504a:	b103      	cbz	r3, 800504e <_sbrk_r+0x1a>
 800504c:	6023      	str	r3, [r4, #0]
 800504e:	bd38      	pop	{r3, r4, r5, pc}
 8005050:	20000398 	.word	0x20000398

08005054 <__sread>:
 8005054:	b510      	push	{r4, lr}
 8005056:	460c      	mov	r4, r1
 8005058:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800505c:	f000 f8a0 	bl	80051a0 <_read_r>
 8005060:	2800      	cmp	r0, #0
 8005062:	bfab      	itete	ge
 8005064:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005066:	89a3      	ldrhlt	r3, [r4, #12]
 8005068:	181b      	addge	r3, r3, r0
 800506a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800506e:	bfac      	ite	ge
 8005070:	6563      	strge	r3, [r4, #84]	; 0x54
 8005072:	81a3      	strhlt	r3, [r4, #12]
 8005074:	bd10      	pop	{r4, pc}

08005076 <__swrite>:
 8005076:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800507a:	461f      	mov	r7, r3
 800507c:	898b      	ldrh	r3, [r1, #12]
 800507e:	05db      	lsls	r3, r3, #23
 8005080:	4605      	mov	r5, r0
 8005082:	460c      	mov	r4, r1
 8005084:	4616      	mov	r6, r2
 8005086:	d505      	bpl.n	8005094 <__swrite+0x1e>
 8005088:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800508c:	2302      	movs	r3, #2
 800508e:	2200      	movs	r2, #0
 8005090:	f000 f868 	bl	8005164 <_lseek_r>
 8005094:	89a3      	ldrh	r3, [r4, #12]
 8005096:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800509a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800509e:	81a3      	strh	r3, [r4, #12]
 80050a0:	4632      	mov	r2, r6
 80050a2:	463b      	mov	r3, r7
 80050a4:	4628      	mov	r0, r5
 80050a6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80050aa:	f000 b817 	b.w	80050dc <_write_r>

080050ae <__sseek>:
 80050ae:	b510      	push	{r4, lr}
 80050b0:	460c      	mov	r4, r1
 80050b2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80050b6:	f000 f855 	bl	8005164 <_lseek_r>
 80050ba:	1c43      	adds	r3, r0, #1
 80050bc:	89a3      	ldrh	r3, [r4, #12]
 80050be:	bf15      	itete	ne
 80050c0:	6560      	strne	r0, [r4, #84]	; 0x54
 80050c2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80050c6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80050ca:	81a3      	strheq	r3, [r4, #12]
 80050cc:	bf18      	it	ne
 80050ce:	81a3      	strhne	r3, [r4, #12]
 80050d0:	bd10      	pop	{r4, pc}

080050d2 <__sclose>:
 80050d2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80050d6:	f000 b813 	b.w	8005100 <_close_r>
	...

080050dc <_write_r>:
 80050dc:	b538      	push	{r3, r4, r5, lr}
 80050de:	4d07      	ldr	r5, [pc, #28]	; (80050fc <_write_r+0x20>)
 80050e0:	4604      	mov	r4, r0
 80050e2:	4608      	mov	r0, r1
 80050e4:	4611      	mov	r1, r2
 80050e6:	2200      	movs	r2, #0
 80050e8:	602a      	str	r2, [r5, #0]
 80050ea:	461a      	mov	r2, r3
 80050ec:	f7fb ff77 	bl	8000fde <_write>
 80050f0:	1c43      	adds	r3, r0, #1
 80050f2:	d102      	bne.n	80050fa <_write_r+0x1e>
 80050f4:	682b      	ldr	r3, [r5, #0]
 80050f6:	b103      	cbz	r3, 80050fa <_write_r+0x1e>
 80050f8:	6023      	str	r3, [r4, #0]
 80050fa:	bd38      	pop	{r3, r4, r5, pc}
 80050fc:	20000398 	.word	0x20000398

08005100 <_close_r>:
 8005100:	b538      	push	{r3, r4, r5, lr}
 8005102:	4d06      	ldr	r5, [pc, #24]	; (800511c <_close_r+0x1c>)
 8005104:	2300      	movs	r3, #0
 8005106:	4604      	mov	r4, r0
 8005108:	4608      	mov	r0, r1
 800510a:	602b      	str	r3, [r5, #0]
 800510c:	f7fb ff83 	bl	8001016 <_close>
 8005110:	1c43      	adds	r3, r0, #1
 8005112:	d102      	bne.n	800511a <_close_r+0x1a>
 8005114:	682b      	ldr	r3, [r5, #0]
 8005116:	b103      	cbz	r3, 800511a <_close_r+0x1a>
 8005118:	6023      	str	r3, [r4, #0]
 800511a:	bd38      	pop	{r3, r4, r5, pc}
 800511c:	20000398 	.word	0x20000398

08005120 <_fstat_r>:
 8005120:	b538      	push	{r3, r4, r5, lr}
 8005122:	4d07      	ldr	r5, [pc, #28]	; (8005140 <_fstat_r+0x20>)
 8005124:	2300      	movs	r3, #0
 8005126:	4604      	mov	r4, r0
 8005128:	4608      	mov	r0, r1
 800512a:	4611      	mov	r1, r2
 800512c:	602b      	str	r3, [r5, #0]
 800512e:	f7fb ff7e 	bl	800102e <_fstat>
 8005132:	1c43      	adds	r3, r0, #1
 8005134:	d102      	bne.n	800513c <_fstat_r+0x1c>
 8005136:	682b      	ldr	r3, [r5, #0]
 8005138:	b103      	cbz	r3, 800513c <_fstat_r+0x1c>
 800513a:	6023      	str	r3, [r4, #0]
 800513c:	bd38      	pop	{r3, r4, r5, pc}
 800513e:	bf00      	nop
 8005140:	20000398 	.word	0x20000398

08005144 <_isatty_r>:
 8005144:	b538      	push	{r3, r4, r5, lr}
 8005146:	4d06      	ldr	r5, [pc, #24]	; (8005160 <_isatty_r+0x1c>)
 8005148:	2300      	movs	r3, #0
 800514a:	4604      	mov	r4, r0
 800514c:	4608      	mov	r0, r1
 800514e:	602b      	str	r3, [r5, #0]
 8005150:	f7fb ff7d 	bl	800104e <_isatty>
 8005154:	1c43      	adds	r3, r0, #1
 8005156:	d102      	bne.n	800515e <_isatty_r+0x1a>
 8005158:	682b      	ldr	r3, [r5, #0]
 800515a:	b103      	cbz	r3, 800515e <_isatty_r+0x1a>
 800515c:	6023      	str	r3, [r4, #0]
 800515e:	bd38      	pop	{r3, r4, r5, pc}
 8005160:	20000398 	.word	0x20000398

08005164 <_lseek_r>:
 8005164:	b538      	push	{r3, r4, r5, lr}
 8005166:	4d07      	ldr	r5, [pc, #28]	; (8005184 <_lseek_r+0x20>)
 8005168:	4604      	mov	r4, r0
 800516a:	4608      	mov	r0, r1
 800516c:	4611      	mov	r1, r2
 800516e:	2200      	movs	r2, #0
 8005170:	602a      	str	r2, [r5, #0]
 8005172:	461a      	mov	r2, r3
 8005174:	f7fb ff76 	bl	8001064 <_lseek>
 8005178:	1c43      	adds	r3, r0, #1
 800517a:	d102      	bne.n	8005182 <_lseek_r+0x1e>
 800517c:	682b      	ldr	r3, [r5, #0]
 800517e:	b103      	cbz	r3, 8005182 <_lseek_r+0x1e>
 8005180:	6023      	str	r3, [r4, #0]
 8005182:	bd38      	pop	{r3, r4, r5, pc}
 8005184:	20000398 	.word	0x20000398

08005188 <__malloc_lock>:
 8005188:	4801      	ldr	r0, [pc, #4]	; (8005190 <__malloc_lock+0x8>)
 800518a:	f7ff bb1d 	b.w	80047c8 <__retarget_lock_acquire_recursive>
 800518e:	bf00      	nop
 8005190:	2000038c 	.word	0x2000038c

08005194 <__malloc_unlock>:
 8005194:	4801      	ldr	r0, [pc, #4]	; (800519c <__malloc_unlock+0x8>)
 8005196:	f7ff bb18 	b.w	80047ca <__retarget_lock_release_recursive>
 800519a:	bf00      	nop
 800519c:	2000038c 	.word	0x2000038c

080051a0 <_read_r>:
 80051a0:	b538      	push	{r3, r4, r5, lr}
 80051a2:	4d07      	ldr	r5, [pc, #28]	; (80051c0 <_read_r+0x20>)
 80051a4:	4604      	mov	r4, r0
 80051a6:	4608      	mov	r0, r1
 80051a8:	4611      	mov	r1, r2
 80051aa:	2200      	movs	r2, #0
 80051ac:	602a      	str	r2, [r5, #0]
 80051ae:	461a      	mov	r2, r3
 80051b0:	f7fb fef8 	bl	8000fa4 <_read>
 80051b4:	1c43      	adds	r3, r0, #1
 80051b6:	d102      	bne.n	80051be <_read_r+0x1e>
 80051b8:	682b      	ldr	r3, [r5, #0]
 80051ba:	b103      	cbz	r3, 80051be <_read_r+0x1e>
 80051bc:	6023      	str	r3, [r4, #0]
 80051be:	bd38      	pop	{r3, r4, r5, pc}
 80051c0:	20000398 	.word	0x20000398

080051c4 <_init>:
 80051c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80051c6:	bf00      	nop
 80051c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80051ca:	bc08      	pop	{r3}
 80051cc:	469e      	mov	lr, r3
 80051ce:	4770      	bx	lr

080051d0 <_fini>:
 80051d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80051d2:	bf00      	nop
 80051d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80051d6:	bc08      	pop	{r3}
 80051d8:	469e      	mov	lr, r3
 80051da:	4770      	bx	lr
